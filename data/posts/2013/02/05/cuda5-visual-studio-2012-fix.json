{"type":"post","json_base":"data/posts","json":"data/posts/2013/02/05/cuda5-visual-studio-2012-fix.json","path":"2013/02/05/cuda5-visual-studio-2012-fix/","data":{"title":"GPU并行编程CUDA5.0+Visual Studio 2012环境配置","content":"<h1 id=\"u95EE_u9898\"><a href=\"#u95EE_u9898\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>CUDA5.0并不支持Visual Studio 2012的v110 toolchain，所以在安装后尝试编译，会先后遇到如下的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc : fatal error : &#39;-ccbin&#39;: expected a number&#10;**nvcc fatal : nvcc cannot find a supported cl version. Only MSVC 8.0 and MSVC 9.0 are supported**</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"u89E3_u51B3_u65B9_u6848_uFF1A\"><a href=\"#u89E3_u51B3_u65B9_u6848_uFF1A\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h1><h2 id=\"1-_u90E8_u7F72/_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6\"><a href=\"#1-_u90E8_u7F72/_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6\" class=\"headerlink\" title=\"1.部署/修改配置文件\"></a>1.部署/修改配置文件</h2><p>在C\\:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V110\\BuildCustomizations文件夹中是MSBuild要完成编译的自定义配置文件，需要手动部署（拷贝）到C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V110\\BuildCustomizations文件夹下。本文中路径为Win7 64bit默认安装后的路径，根据自己的安装情况调整。</p>\n<p>在这之前需要修改如下文件：</p>\n<p><strong>CUDA5.0.props中</strong></p>\n<p>找到如下行：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;CudaClVersion Condition=\"'$(PlatformToolset)' == 'v90'\"&amp;gt;2008&amp;lt;/CudaClVersion&amp;gt;</span><br><span class=\"line\">&amp;lt;CudaClVersion Condition=\"'$(PlatformToolset)' == 'v100'\"&amp;gt;2010&amp;lt;/CudaClVersion&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;CudaClVersion Condition=\"'$(PlatformToolset)' == 'v110'\"&amp;gt;2010&amp;lt;/CudaClVersion&amp;gt;</span><br></pre></td></tr></table></figure>\n<p><strong>CUDA 5.0.targets中</strong></p>\n<p>找到CudaCleanDependsOn标签，改为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;CudaCleanDependsOn&amp;gt;</span><br><span class=\"line\">  $(CudaCompileDependsOn);</span><br><span class=\"line\">  _SelectedFiles;</span><br><span class=\"line\">  CudaFilterSelectedFiles;</span><br><span class=\"line\">  AddCudaCompileMetadata;</span><br><span class=\"line\">  AddCudaLinkMetadata;</span><br><span class=\"line\">  AddCudaCompileDeps;</span><br><span class=\"line\">  AddCudaCompilePropsDeps;</span><br><span class=\"line\">  ValidateCudaBuild;</span><br><span class=\"line\">  ValidateCudaCodeGeneration;</span><br><span class=\"line\">  ComputeCudaCompileOutput;</span><br><span class=\"line\">  PrepareForCudaBuild</span><br><span class=\"line\">&amp;lt;/CudaCleanDependsOn&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>找到GenerateRelocatableDeviceCode，改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GenerateRelocatableDeviceCode=\"%(CudaCompile.GenerateRelocatableDeviceCode)\"</span><br></pre></td></tr></table></figure>\n<p>找到CodeGeneration，改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CodeGeneration=\"%(CudaCompile.CodeGenerationValues)\"</span><br></pre></td></tr></table></figure>\n<p>找到CommandLineTemplate，改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandLineTemplate=\"\"$(CudaToolkitNvccPath)\" %(CudaCompile.BuildCommandLineTemplate) %(CudaCompile.ApiCommandLineTemplate) %(CudaCompile.CleanCommandLineTemplate)\" /&amp;gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-__u4FEE_u6539_u5934_u6587_u4EF6\"><a href=\"#2-__u4FEE_u6539_u5934_u6587_u4EF6\" class=\"headerlink\" title=\"2. 修改头文件\"></a>2. 修改头文件</h2><p>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v5.0\\include文件夹中，host_config.h文件。</p>\n<p>找到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> _MSC_VER &amp;lt; <span class=\"number\">1400</span> || _MSC_VER &amp;gt; <span class=\"number\">1600</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">error</span> -- unsupported MSVC version! Only MSVC <span class=\"number\">8.0</span>, <span class=\"number\">9.0</span>, and <span class=\"number\">10.0</span> are supported!</span></span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> _MSC_VER &amp;lt; <span class=\"number\">1400</span> || _MSC_VER &amp;gt; <span class=\"number\">1700</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">error</span> -- unsupported MSVC version! Only MSVC <span class=\"number\">8.0</span>, <span class=\"number\">9.0</span>, and <span class=\"number\">10.0</span> are supported!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-__u8BED_u6CD5_u9AD8_u4EAE_u652F_u6301\"><a href=\"#3-__u8BED_u6CD5_u9AD8_u4EAE_u652F_u6301\" class=\"headerlink\" title=\"3. 语法高亮支持\"></a>3. 语法高亮支持</h2><ol>\n<li>菜单“Tools-&gt;Options…”，展开左侧“Text Editor”，点击“File Extension”.</li>\n<li>在“Extension”框中输入“cu”, 选择“Microsoft Visual C++”，点击“Add”，捅“OK”。</li>\n<li>重新打开文件</li>\n</ol>\n<p>## </p>\n","date":"2013-02-05T03:37:57.000Z","path":"2013/02/05/cuda5-visual-studio-2012-fix/","isDark":true,"featureColor":"#947444","featureImage":"/image/stock/4.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#947444","isDark":true,"contrast":4.38675255709906},"Muted":{"color":"#8b704c","isDark":true,"contrast":4.720403801183811},"DarkVibrant":{"color":"#2c2214","isDark":true,"contrast":17.310047977134303},"DarkMuted":{"color":"#3e3121","isDark":true,"contrast":16.064607088557274},"LightVibrant":{"color":"#dcac74","isDark":false,"contrast":2.059564738834789}},"json":"data/posts/2013/02/05/cuda5-visual-studio-2012-fix.json","tags":[{"name":"CUDA","slug":"CUDA","path":"tags/CUDA/","permalink":"http://catx.me/tags/CUDA/","postCount":1},{"name":"GPU","slug":"GPU","path":"tags/GPU/","permalink":"http://catx.me/tags/GPU/","postCount":1},{"name":"Visual Studio 2012","slug":"Visual-Studio-2012","path":"tags/Visual-Studio-2012/","permalink":"http://catx.me/tags/Visual-Studio-2012/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"39ec1ac0fa60b1476d4dc20d9d1ac52eb6cdc4fe","prev":{"title":"豆瓣电台API分析","content":"<p>前几天看到命令行版的电台<a href=\"http://cmd.fm\" target=\"_blank\" rel=\"external\">cmd.fm</a>，表示键盘党最爱。<br>可惜音乐都是来自sound cloud，大天朝的重口味和网速各种水土不服，于是首先想到的就是要山寨个用豆瓣电台音乐的版本。<br>豆瓣毫无悬念的没有公开API，不过这个完全不影响抓包分析，完整的文档放在GitHub <a href=\"https://github.com/akfish/fm-terminal/blob/develop/douban-fm-api.md\" target=\"_blank\" rel=\"external\">Douban FM API Documentation</a>。</p>\n<p>现在已经用这个API做了一个命令行风格豆瓣电台的Chrome插件，<a href=\"http://fm.catx.me\" target=\"_blank\" rel=\"external\">FM Terminal</a>。</p>\n<p>所有的音乐都是防盗链的，所以Web应用的可能性不大。略诡异的是放出红心的概率比较低，不像官方版的那么容易陷入红心无法自拔。</p>\n<p>其中比较有意思的是两点，一是广告很容易和其它普通、二逼或者文艺的音乐区分开来。<br>另一个是豆瓣<a href=\"https://github.com/akfish/fm-terminal/blob/develop/douban-fm-api.md#discussion-of-history-parameter\" target=\"_blank\" rel=\"external\">追踪用户播放行为的方式</a>，正常播放完成的音乐豆瓣不关心，只对加红心、丢垃圾桶和跳过这样的“异常”行为感兴趣。传回去的记录是时序的，说明后台的算法应该是和时序有关的。</p>\n<p>不过我只想说，敢不敢让广告也能加心拖垃圾桶，挖掘下用户爱看神马广告。</p>\n<p>&nbsp;</p>\n","date":"2013-09-30T03:27:48.000Z","path":"2013/09/30/douban-fm-api/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2013/09/30/douban-fm-api.json","tags":[{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"前端","slug":"前端","path":"tags/前端/","permalink":"http://catx.me/tags/前端/","postCount":2},{"name":"豆瓣","slug":"豆瓣","path":"tags/豆瓣/","permalink":"http://catx.me/tags/豆瓣/","postCount":1},{"name":"逆向","slug":"逆向","path":"tags/逆向/","permalink":"http://catx.me/tags/逆向/","postCount":1},{"name":"音乐","slug":"音乐","path":"tags/音乐/","permalink":"http://catx.me/tags/音乐/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"next":{"title":"中国区气象雷达数据爬虫","content":"<p>作为一个数据控，爱好各种实时数据，比如中央气象台的<a href=\"http://www.nmc.gov.cn/publish/radar/stations-chongqing.htm\" target=\"_blank\" rel=\"external\">气象雷达</a>数据。最近在进行的一个HTML5项目，就是利用Canvas和WebGL，把外观土鳖的官方数据，变成洋气+实用的交互式地图。由于HTML5 Canvas CORS的限制，在没有服务器配合的情况下，无法跨域载入图片，然后<code>getImageData</code>，因此就做了一个爬虫。</p>\n<p>经过一番试验，发现国外的免费云服务只有GAE能够访问nmc.gov.cn，确定爬虫在GAE上安家了。大致计算了下数据量，全国167个雷达站，平均10分钟更新1帧，每帧是一幅约35KB的GIF图像，一天下来就至少800+M的数据，放GAE上不现实。同时前端也需要<code>.json</code>文件，描述雷达站信息以及数据帧列表，所以还需要数据库存储，而GAE坑爹的datastore quota，一天只能5w次读写，爬虫大概跑3圈就爆了。在这样一些约束下，最后脑洞大开的结合GitHub API，把数据全存到一个GitHub repository里，然后再把git tree拖回来当数据库用，解决问题。</p>\n<p>目前在GAE上部署了两个实例，分时运行，因为bandwidth quota大概只能支撑半天，然后每天删除repository重建一次，避免超过GitHub的quota。</p>\n<p>除了爬图片，地图叠加层的对其需要知道雷达站的坐标，以及数据的范围（即图片上的“数据范围：xxx km”），前者通过之前人肉爬到的一个包含全国雷达站坐标的xml文件解决问题。<br>至于数据范围没有找到官方的数据，最后写了一个简单的OCR算法直接从图片上识别。</p>\n<h2 id=\"u9644_u8BB0_uFF1A_u7528GitHub_API_u521B_u5EFAcommit_u6D41_u7A0B\"><a href=\"#u9644_u8BB0_uFF1A_u7528GitHub_API_u521B_u5EFAcommit_u6D41_u7A0B\" class=\"headerlink\" title=\"附记：用GitHub API创建commit流程\"></a>附记：用GitHub API创建commit流程</h2><p>GitHub提供了<a href=\"https://developer.github.com/v3/repos/contents/\" target=\"_blank\" rel=\"external\">Content API</a>，可以方便的对单个文件进行CRUD操作，每次操作产生1个commit。<br>如果需要一次commit多个文件（比如这个爬虫每次cron会新增数百文件），这样显然不实际。<br>更好的做法是通过<a href=\"https://developer.github.com/v3/git/\" target=\"_blank\" rel=\"external\">Git Data API</a>，模拟git创建一次commit的过程。<br>之前做git私有传输协议的经验立即发挥作，轻车熟路的解决，流程如下：</p>\n<ol>\n<li>用<a href=\"https://developer.github.com/v3/git/blobs/\" target=\"_blank\" rel=\"external\">Blob API</a>为每个文件创建一个blob</li>\n<li>用<a href=\"https://developer.github.com/v3/git/trees/\" target=\"_blank\" rel=\"external\">Tree API</a>为每个子文件夹创建一个tree，并添加其中文件对应的blob</li>\n<li>用<a href=\"https://developer.github.com/v3/git/commits/\" target=\"_blank\" rel=\"external\">Commit API</a>读出要commit分支最新的commit，以及commit对应的tree</li>\n<li>创建root tree，未改变的文件/文件夹需要原封不动的在tree里面保留，插入/替换新增的blob/tree</li>\n<li>创建commit，tree指向新的root tree，parent指向分支最新commit</li>\n<li>用<a href=\"https://developer.github.com/v3/git/refs/\" target=\"_blank\" rel=\"external\">Reference API</a>更新分支的ref，指向新创建的commit</li>\n</ol>\n<p>如果操作中断或重复操作，blob/tree都不会导致多余的数据产生（纯浪费上传带宽而已）。<br>因为git用SHA1 Digest作为所有git object的文件名，同内容的blob/tree不会重复。<br>需要注意一个例外，commit由于包含了时间戳，会重复创建。</p>\n<p>当然最好封装好的library，会省不少事。<br>比如我在这个项目里用到的python library是<a href=\"https://github.com/jacquev6/PyGithub\" target=\"_blank\" rel=\"external\">PyGitHub</a>，几个月前给这个项目发过pull request增加了些功能，比较熟悉用起来顺手。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>源码: <a href=\"https://github.com/catx-weather/radar-bot\" target=\"_blank\" rel=\"external\">radar-bot</a></li>\n<li>爬到的数据：<a href=\"https://github.com/catx-weather/data\" target=\"_blank\" rel=\"external\">data</a></li>\n<li>OCR工具：<a href=\"https://github.com/catx-weather/frame-range-ocr\" target=\"_blank\" rel=\"external\">Frame Range OCR</a></li>\n</ul>\n","date":"2014-08-10T16:14:12.000Z","path":"2014/08/11/china-weather-radar-crawler/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2014/08/11/china-weather-radar-crawler.json","tags":[{"name":"Crawler","slug":"Crawler","path":"tags/Crawler/","permalink":"http://catx.me/tags/Crawler/","postCount":1},{"name":"Fun","slug":"Fun","path":"tags/Fun/","permalink":"http://catx.me/tags/Fun/","postCount":2},{"name":"GAE","slug":"GAE","path":"tags/GAE/","permalink":"http://catx.me/tags/GAE/","postCount":1},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"Python","slug":"Python","path":"tags/Python/","permalink":"http://catx.me/tags/Python/","postCount":1},{"name":"Weather","slug":"Weather","path":"tags/Weather/","permalink":"http://catx.me/tags/Weather/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]}}