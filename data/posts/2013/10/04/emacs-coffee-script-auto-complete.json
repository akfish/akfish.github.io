{"type":"post","json_base":"data/posts","json":"data/posts/2013/10/04/emacs-coffee-script-auto-complete.json","path":"2013/10/04/emacs-coffee-script-auto-complete/","data":{"title":"CoffeeScript Emacs自动完成插件","content":"<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2013/10/snapshoot.png\"><img src=\"/images/01c744b804dc7bc0fa68a56cca0d50206b090e62.png\" alt=\"ac-coffee-snapshot\"></a> Emacs CoffeeScript自动完成</p>\n<p>最近几个前端相关的应用，都用到了CoffeeScript。发现Emacs没有CoffeeScript的auto complete source，效率上略拖后腿，参考Emacs Auto Complete的<a href=\"http://cx4a.org/software/auto-complete/manual.html#Extend\" target=\"_blank\" rel=\"external\">文档</a>，自己写了一个。</p>\n<p>目前这个版本只是简单的基于<a href=\"http://coffeescript.org/documentation/docs/lexer.html\" target=\"_blank\" rel=\"external\">Lexer</a>，列出了所有identifier的名称，scope的信息是完全没有的，基本上够用。在后续的维护中，会基于<a href=\"http://coffeescript.org/documentation/docs/grammar.html\" target=\"_blank\" rel=\"external\">Grammar</a>，增加更多的feature。</p>\n<p>下载和安装说明都在Github上：<a href=\"http://project.catx.me/ac-coffee/\" target=\"_blank\" rel=\"external\">ac-coffee</a></p>\n","date":"2013-10-03T23:59:05.000Z","path":"2013/10/04/emacs-coffee-script-auto-complete/","isDark":true,"featureColor":"#947444","featureImage":"/image/stock/4.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#947444","isDark":true,"contrast":4.38675255709906},"Muted":{"color":"#8b704c","isDark":true,"contrast":4.720403801183811},"DarkVibrant":{"color":"#2c2214","isDark":true,"contrast":17.310047977134303},"DarkMuted":{"color":"#3e3121","isDark":true,"contrast":16.064607088557274},"LightVibrant":{"color":"#dcac74","isDark":false,"contrast":2.059564738834789}},"json":"data/posts/2013/10/04/emacs-coffee-script-auto-complete.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":9},{"name":"Emacs","slug":"Emacs","path":"tags/Emacs/","permalink":"http://catx.me/tags/Emacs/","postCount":1},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"Lisp","slug":"Lisp","path":"tags/Lisp/","permalink":"http://catx.me/tags/Lisp/","postCount":1},{"name":"工具","slug":"工具","path":"tags/工具/","permalink":"http://catx.me/tags/工具/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"b48841de0d3d2d2a5e4659703feae4334af179d3","prev":{"title":"单片机控制笔记本风扇(1)-引脚定义","content":"<p>由于今天照例失眠，顺手把前几天刚换下的老旧笔记本风扇拆开折腾，作为从软转硬的Hello world。</p>\n<p>采用的芯片是STC12C4052AD，用USP转ISP模块供电+串口通信。</p>\n<p>整个折腾的大致计划是：</p>\n<ol>\n<li>无刷风扇的引脚定义以及控制方法</li>\n<li>用单片机读取风扇转速并实现调速控制</li>\n</ol>\n<p><div><a id=\"more\"></a></div><br><img src=\"/images/e19f51b63051b973df9e04e2091b1c96e5dac72b.jpg\" alt=\"\"></p>\n<p>A. 首先观察单片机的引脚定义把ISP下载线搞好，在面包板上搭好了用12MHz外部晶振的最小系统。这部分毫无难度，没神马好说的。</p>\n<p>B. 然后拆风扇，有4条连线，颜色分别是红黑黄蓝。</p>\n<p>红色和黑色对于所有理科人类以及部分文科人类而言，一眼就能看出必然是负责供电的。</p>\n<p>黑色接GND，红色接Vcc，果断风扇就开始biubiu的转动了。</p>\n<p>黄色和蓝色其中之一必然是风扇转速输出，由于手里没有万用表或示波器，就分别用蓝线和黄线短接单片机的3号引脚（TXD），然后就可以在笔记本上通过串口助手查看通过ISP模块传回的串口电平变化。结果是黄色有稳定的数据输出，蓝色没有任何输出。几乎可以确定黄色就是转速信号的输出了。</p>\n<p>为了确定这一点，断掉风扇的电源然后人肉转动，结果神马都没发生。</p>\n<p>接下来研究蓝色了，首先接到Vcc上，没有任何变化，风扇依然biubiu的转；然后插到GND，风扇神奇的停止了转动，然后人肉转动风扇，发现黄色脚有数据输出，每一转两个脉冲。</p>\n<p>于是可以确定各个引脚的作用：</p>\n<table>\n<thead>\n<tr>\n<th>颜色</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>红</td>\n<td>Vcc （接公共正极）</td>\n</tr>\n<tr>\n<td>黑</td>\n<td>GND （接公共地）</td>\n</tr>\n<tr>\n<td>黄</td>\n<td>脉冲信号输出，一圈两次。（接TXD输出到串口）</td>\n</tr>\n<tr>\n<td>蓝</td>\n<td>控制信号，高电平正常转动，低电平停转。（接PWM0，见下文）</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/b17abc0595e4256524ee17d9e7f9b53535012d44.jpg\" alt=\"\"></p>\n<p>C.控制信号研究</p>\n<p>风扇的转速是可调的，所以蓝色信号线的作用不仅仅是开关。</p>\n<p>查阅STC12C4052AD的引脚定义，发现有两个能产生PWM信号的引脚，PWM0（11脚）和PWM1（9脚）。</p>\n<p>接下来就是对单片机编程产生一个PWM控制信号，当然作为一个死程序员，软的部分几乎可以说不是问题了。</p>\n<p>在对蓝色信号线输入一个频率按正弦规律变化的PWM信号以后，在笔记本上通过串口接收到的Raw Data（1/2控制信号周期）如下：</p>\n<p><img src=\"/images/f16c6566b3d4f480b8b47913948ae88b91306cc6.png\" alt=\"\"></p>\n<p>可以看出风扇转速大致按照控制信号的变化而变化，其中有一部分数值变小是因为软件按照一定的编码规则把字节截断了。</p>\n<p>值得一提的是，串口通信时有多种波特率可以选择，波特率直接决定软件如何截断字节流。</p>\n<p>在这个试验中，只有最低的波特率600bps能够得出可读的有意义数据，从这个结果可以估计出风扇的转速大概在10^3(rpm)的数量级，与实际情况下风扇的转速吻合，进一步验证了之前的结果。（以3000rpm为例，每秒钟50转，产生100个高电平脉冲，考虑两个脉冲信号之间的（低电平信号）距离会大于最小距离，输出信号的波特率数量级大概就是10^2bps）</p>\n","date":"2011-05-11T01:14:32.000Z","path":"2011/05/11/fan-study-1-pin-de/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"<p>由于今天照例失眠，顺手把前几天刚换下的老旧笔记本风扇拆开折腾，作为从软转硬的Hello world。</p>\n<p>采用的芯片是STC12C4052AD，用USP转ISP模块供电+串口通信。</p>\n<p>整个折腾的大致计划是：</p>\n<ol>\n<li>无刷风扇的引脚定义以及控制方法</li>\n<li>用单片机读取风扇转速并实现调速控制</li>\n</ol>\n<p><div>","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"json":"data/posts/2011/05/11/fan-study-1-pin-de.json","tags":[{"name":"单片机","slug":"单片机","path":"tags/单片机/","permalink":"http://catx.me/tags/单片机/","postCount":2},{"name":"电子","slug":"电子","path":"tags/电子/","permalink":"http://catx.me/tags/电子/","postCount":2},{"name":"风扇","slug":"风扇","path":"tags/风扇/","permalink":"http://catx.me/tags/风扇/","postCount":2}],"categories":[{"name":"硬","slug":"硬","path":"categories/硬/","permalink":"http://catx.me/categories/硬/","postCount":2}]},"next":{"title":"豆瓣电台API分析","content":"<p>前几天看到命令行版的电台<a href=\"http://cmd.fm\" target=\"_blank\" rel=\"external\">cmd.fm</a>，表示键盘党最爱。<br>可惜音乐都是来自sound cloud，大天朝的重口味和网速各种水土不服，于是首先想到的就是要山寨个用豆瓣电台音乐的版本。<br>豆瓣毫无悬念的没有公开API，不过这个完全不影响抓包分析，完整的文档放在GitHub <a href=\"https://github.com/akfish/fm-terminal/blob/develop/douban-fm-api.md\" target=\"_blank\" rel=\"external\">Douban FM API Documentation</a>。</p>\n<p>现在已经用这个API做了一个命令行风格豆瓣电台的Chrome插件，<a href=\"http://fm.catx.me\" target=\"_blank\" rel=\"external\">FM Terminal</a>。</p>\n<p>所有的音乐都是防盗链的，所以Web应用的可能性不大。略诡异的是放出红心的概率比较低，不像官方版的那么容易陷入红心无法自拔。</p>\n<p>其中比较有意思的是两点，一是广告很容易和其它普通、二逼或者文艺的音乐区分开来。<br>另一个是豆瓣<a href=\"https://github.com/akfish/fm-terminal/blob/develop/douban-fm-api.md#discussion-of-history-parameter\" target=\"_blank\" rel=\"external\">追踪用户播放行为的方式</a>，正常播放完成的音乐豆瓣不关心，只对加红心、丢垃圾桶和跳过这样的“异常”行为感兴趣。传回去的记录是时序的，说明后台的算法应该是和时序有关的。</p>\n<p>不过我只想说，敢不敢让广告也能加心拖垃圾桶，挖掘下用户爱看神马广告。</p>\n<p>&nbsp;</p>\n","date":"2013-09-30T03:27:48.000Z","path":"2013/09/30/douban-fm-api/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2013/09/30/douban-fm-api.json","tags":[{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"前端","slug":"前端","path":"tags/前端/","permalink":"http://catx.me/tags/前端/","postCount":2},{"name":"豆瓣","slug":"豆瓣","path":"tags/豆瓣/","permalink":"http://catx.me/tags/豆瓣/","postCount":1},{"name":"逆向","slug":"逆向","path":"tags/逆向/","permalink":"http://catx.me/tags/逆向/","postCount":1},{"name":"音乐","slug":"音乐","path":"tags/音乐/","permalink":"http://catx.me/tags/音乐/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]}}