{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/12/hexo-uml-tag-plugin.json","path":"2014/03/12/hexo-uml-tag-plugin/","data":{"title":"Hexo UML插件","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>技术类博客总是不可避免的要插入各种UML图，昨天偶然发现一个有意思的Javascript库<a href=\"http://jumly.tmtk.net/\" target=\"_blank\" rel=\"external\">Jumly</a>，用于渲染UML sequence diagram和robustness diagram。于是制作了一个hexo插件，便于在博客中插入。</p>\n<p><strong>Sequence Diagram</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@found &#34;You&#34;, -&#62;&#10;  @message &#34;Think&#34;, -&#62;&#10;    @message &#34;Write your idea&#34;, &#34;hexo-tag-uml&#34;, -&#62;&#10;      @message &#34;&#34;, &#34;JUMLY&#34;, -&#62;&#10;        @create &#34;Diagram&#34;&#10;hexo_tag_uml.css &#34;background-color&#34;:&#34;#8CC84B&#34;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Robustness Diagram</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@actor &#34;User&#34; :-&#62; @view &#34;Browser&#34;&#10;@view &#34;Browser&#34; :-&#62; @controller &#34;Server&#34;&#10;@controller &#34;Server&#34; :-&#62; @entity &#34;Database&#34;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-tag-uml --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521D_u59CB_u5316\"><a href=\"#u521D_u59CB_u5316\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在blog文件夹中执行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo uml install</span><br></pre></td></tr></table></figure>\n<p>在<code>_config.yml</code>文件中添加：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:&#10;- hexo-tag-uml</span><br></pre></td></tr></table></figure></p>\n<p>在主题的<code>.ejs</code>文件的合适位置插入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">%-</span> <span class=\"attribute\">partial</span>('<span class=\"attribute\">jumly</span>') %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一般而言可以放在<code>&lt;head&gt;</code>一节里，需要注意的是Jumly依赖于jQuery，如果主题里引用了其它位置的jQuery，会导致冲突。<br>比如hexo的默认主题landscape就在<code>after-footer.ejs</code>中插入了jQuery，需要将相应行去掉，替换为上面语句。<br>也是因为实际主题的实现哥又不同，这个插件没能实现自动修改theme layout文件。</p>\n<h2 id=\"u8BED_u6CD5\"><a href=\"#u8BED_u6CD5\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&amp;#37; uml [diagram_type] %&#125;</span><br><span class=\"line\">&#123;&amp;#37; uml %&#125;</span><br></pre></td></tr></table></figure>\n<p><code>diagram_type</code>可以取的值为：</p>\n<ul>\n<li>sequence</li>\n<li>robustness</li>\n</ul>\n<p>如果留空，默认为sequence。</p>\n<h2 id=\"u793A_u4F8B\"><a href=\"#u793A_u4F8B\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&amp;#37; uml %&#125;</span><br><span class=\"line\">@found \"Browser\", -&gt;</span><br><span class=\"line\">  @alt &#123;</span><br><span class=\"line\"><span class=\"code\">    \"[200]\": -&gt; @message \"GET href resources\", \"HTTP Server\"</span></span><br><span class=\"line\"><span class=\"code\">    \"[301]\": -&gt; @ref \"GET the moved page\"</span></span><br><span class=\"line\"><span class=\"code\">    \"[404]\": -&gt; @ref \"show NOT FOUND\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">@find(\".ref\").css(width:256, \"padding-bottom\":4)</span><br><span class=\"line\">  .find(\".tag\").css float:\"left\"</span><br><span class=\"line\">get<span class=\"emphasis\">_the_</span>moved_page.css \"background-color\":\"#80c080\"</span><br><span class=\"line\">show<span class=\"emphasis\">_not_</span>found.css \"background-color\":\"#f0b0b0\"</span><br><span class=\"line\">&#123;&amp;#37; enduml %&#125;</span><br></pre></td></tr></table></figure>\n<p>效果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@found &#34;Browser&#34;, -&#62;&#10;  @alt &#123;&#10;    &#34;[200]&#34;: -&#62; @message &#34;GET href resources&#34;, &#34;HTTP Server&#34;&#10;    &#34;[301]&#34;: -&#62; @ref &#34;GET the moved page&#34;&#10;    &#34;[404]&#34;: -&#62; @ref &#34;show NOT FOUND&#34;&#10;  &#125;&#10;@find(&#34;.ref&#34;).css(width:256, &#34;padding-bottom&#34;:4)&#10;  .find(&#34;.tag&#34;).css float:&#34;left&#34;&#10;get_the_moved_page.css &#34;background-color&#34;:&#34;#80c080&#34;&#10;show_not_found.css &#34;background-color&#34;:&#34;#f0b0b0&#34;</span><br></pre></td></tr></table></figure>\n<p>Jumly的表达式规则详见：<a href=\"http://jumly.tmtk.net/reference.html\" target=\"_blank\" rel=\"external\">Jumly Reference Manual</a></p>\n<p>在线编辑器：<a href=\"http://jumly.tmtk.net/try.html\" target=\"_blank\" rel=\"external\">Try Jumly</a></p>\n","date":"2014-03-12T06:23:37.000Z","path":"2014/03/12/hexo-uml-tag-plugin/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"permalink":"http://catx.me/2014/03/12/hexo-uml-tag-plugin/","json":"data/posts/2014/03/12/hexo-uml-tag-plugin.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"Hexo","slug":"Hexo","path":"tags/Hexo/","permalink":"http://catx.me/tags/Hexo/","postCount":3},{"name":"Jumly","slug":"Jumly","path":"tags/Jumly/","permalink":"http://catx.me/tags/Jumly/","postCount":1},{"name":"Node.Js","slug":"Node-Js","path":"tags/Node-Js/","permalink":"http://catx.me/tags/Node-Js/","postCount":3},{"name":"UML","slug":"UML","path":"tags/UML/","permalink":"http://catx.me/tags/UML/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"8c82ea1d34c0060740a427df0ceec890ab5f3738","prev":{"title":"HTML5音频可视化试验","content":"<p><img src=\"/images/d36ba1d28266e9eea9e0bc73cf32b53557e2ed21.gif\" alt=\"\"></p>\n<p>上周末脑洞大开的想到能否完全用HTML5的Web Audio API实现一个吉他调音器，折腾过后这个主要的目标失败了，音频可视化的部分倒是相对完整，实现了音量、频谱图以及音高的可视化。</p>\n<h2 id=\"u97F3_u9AD8_u68C0_u6D4B_u7B97_u6CD5\"><a href=\"#u97F3_u9AD8_u68C0_u6D4B_u7B97_u6CD5\" class=\"headerlink\" title=\"音高检测算法\"></a>音高检测算法</h2><p>调音器的原理其实很简单，本质上就是音高检测算法(pitch detection algorithm)，实现的方式有很多<a href=\"http://strum.googlecode.com/svn/trunk/Research/Efficient%20Pitch%20Detection%20Techniques%20For%20Interactive%20Music.pdf\" target=\"_blank\" rel=\"external\">[1]</a>，时域方法和频域方法都有。</p>\n<p>乐音最基本的特征就是由一系列谐波组成，包含一个基本频率$f$，以及一系列基本频率的整数倍的子波$2f, 3f, 4f, …, nf$，基础频率$f$的值就是乐音的音调。</p>\n<p><img src=\"/images/f8919d6d536b1edcc0cfd78bbf6b1da1554330b1.png\" alt=\"\"></p>\n<p>所以一种简单的频域音高检测算法就是HPS(harmonic product spectrum)：</p>\n<p>$$Y(\\omega) = \\prod_{r = 1}^R|X(\\omega r)|$$<br>$$\\hat{Y} = \\max_{\\omega_i}{Y(\\omega_i)}$$</p>\n<p>其中$X$是音频在频域空间的向量表示（通常通过FFT得到），HPS就是求一个频率的$R$个整数数倍位置的信号强度的乘积，形成一个新的频谱图$Y$。</p>\n<p>谐波的基础频率就会在$Y$中形成波峰：</p>\n<p><img src=\"/images/5282b104e2e419c83c659f2507bdd849410f8093.png\" alt=\"\"></p>\n<p>这个方法的缺点很明显，高频信号由于已经没有多少谐波被采样，因此在高频并不可靠。不过对于音乐而言，这并不是问题，钢琴的最高音C8不过才4186.01Hz，而音乐文件的采样率普遍是kHz级别。</p>\n<h2 id=\"HTML5_Audio_API\"><a href=\"#HTML5_Audio_API\" class=\"headerlink\" title=\"HTML5 Audio API\"></a>HTML5 Audio API</h2><p>用Audio API做音频可视化至少会创建三个对象：<code>AudioContext</code>, <code>AudioSource</code>和<code>AnalyzerNode</code>。<br>前两者的作用很显然不用多说，<code>AnalyzerNode</code>提供实时的FFT数据。</p>\n<p>首先当然是创建一个<code>context</code>，绑定一个<code>analyzer</code>:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context = <span class=\"keyword\">new</span> AudioContext()</span><br><span class=\"line\">analyzer = context.createAnalyser()</span><br><span class=\"line\">analyzer.smoothingTimeConstant = <span class=\"number\">0.3</span></span><br><span class=\"line\">analyzer.fftSize = <span class=\"number\">2048</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>fftSize</code>指定把频域空间平均分成多少份.</p>\n<p>接着是创建<code>source</code>，可以是麦克风的输入：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.getUserMedia <span class=\"attribute\">audio</span>: <span class=\"literal\">true</span>, <span class=\"function\">(<span class=\"params\">(stream)</span> -&gt;</span></span><br><span class=\"line\">  source = context.createMediaStreamSource stream</span><br><span class=\"line\">  mic_stream = stream</span><br><span class=\"line\">  source.connect analyzer</span><br><span class=\"line\">  analyzer.connect context.destination</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log <span class=\"string\">\"Microphone open. Sample rate: <span class=\"subst\">#&#123;context.sampleRate&#125;</span> Hz\"</span></span><br><span class=\"line\">  ), <span class=\"function\"><span class=\"params\">(err)</span> -&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error <span class=\"string\">\"Fail to access microphone: <span class=\"subst\">#&#123;err&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>也可以是载入一个音频文件：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source = context.createBufferSource()</span><br><span class=\"line\"></span><br><span class=\"line\">source.connect analyzer</span><br><span class=\"line\">analyzer.connect context.destination</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">xhr.onload = <span class=\"function\">=&gt;</span></span><br><span class=\"line\">  context.decodeAudioData xhr.response, <span class=\"function\">(<span class=\"params\">(b)</span> -&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log <span class=\"string\">\"Audio loaded: <span class=\"subst\">#&#123;url&#125;</span>, Sample rate: <span class=\"subst\">#&#123;context.sampleRate&#125;</span>Hz\"</span></span><br><span class=\"line\">    source.buffer = b</span><br><span class=\"line\">    source.<span class=\"keyword\">loop</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    source.start <span class=\"number\">0.0</span></span><br><span class=\"line\">    ), <span class=\"function\"><span class=\"params\">(err)</span> -&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error <span class=\"string\">\"Fail to load audio: <span class=\"subst\">#&#123;url&#125;</span>\"</span></span><br><span class=\"line\">xhr.open <span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span></span><br><span class=\"line\">xhr.responseType = <span class=\"string\">'arraybuffer'</span></span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n<p>然后需要创建一个<code>ScriptProcessorNode</code>，和<code>analyzer</code>链接，这样在每帧数据可用时会执行前者的<code>onaudioprocess</code>，音频处理算法一般都放在这里：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node = context.createScriptProcessor <span class=\"number\">2048</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">node.onaudioprocess = <span class=\"function\">-&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">TODO:</span> process audio</span></span><br><span class=\"line\">node.connect context.destination</span><br><span class=\"line\">analyzer.connect node</span><br></pre></td></tr></table></figure>\n<p>读取FFT数据：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.onaudioprocess = <span class=\"function\">-&gt;</span></span><br><span class=\"line\">  n = analyzer.frequencyBinCount</span><br><span class=\"line\">  arr = <span class=\"keyword\">new</span> Uint8Array(n)</span><br><span class=\"line\">  analyzer.getByteFrequencyData arr</span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">TODO:</span> Draw</span></span><br></pre></td></tr></table></figure>\n<p>读出来的数组里包含了从低频到高频的强度，可以直接用于绘制频谱图，求和平均就是音量，也可以作为频域处理算法的输入。</p>\n<p>数组里元素$i$对应的频率为$f_i = \\frac{Sample Rate}{FFT Size} i$。</p>\n<p>在调音器这个应用中，最大的问题就是精度，Audio API里最大取值只能是<code>2048</code>，在48kHz采样率时，频率分辨率只能到23.43Hz。<br>这个精度是无法接受的，如$E4 = 329.628, F4 = 349.228$之间只相差了19.6Hz，完全无法区分。</p>\n<h2 id=\"u53EF_u89C6_u5316\"><a href=\"#u53EF_u89C6_u5316\" class=\"headerlink\" title=\"可视化\"></a>可视化</h2><p>在这个项目里尝试了下<a href=\"/processingjs.org/\">processing.js</a>，虽然API很清晰，但是绘图功能不足，没有原生的gradient，blur支持，只能人肉实现，于是性能一不小心就惨淡了。</p>\n<h2 id=\"u6E90_u7801\"><a href=\"#u6E90_u7801\" class=\"headerlink\" title=\"源码\"></a>源码</h2><ul>\n<li><a href=\"http://catx.me/not-a-tuner-yet\">Demo</a></li>\n</ul>\n<div id=\"badge-container-akfish-not-a-tuner-yet-a34a7d\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-akfish-not-a-tuner-yet-a34a7d\", \"akfish\", \"not-a-tuner-yet\", \"a34a7d\", false);\n</script>\n\n<p>建议使用Chrome打开，FireFox上性能很惨淡。</p>\n","date":"2014-08-26T01:06:16.000Z","path":"2014/08/26/html5-sound-visualization-experiment-with-processingjs/","isDark":true,"featureColor":"#146ca4","featureImage":"/images/sound-visualization-exp.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#146ca4","isDark":true,"contrast":5.665104928657267},"Muted":{"color":"#8db3c8","isDark":false,"contrast":2.230575663094013},"DarkVibrant":{"color":"#146498","isDark":true,"contrast":10.975361372213726},"DarkMuted":{"color":"#617784","isDark":true,"contrast":5.125568077118013},"LightVibrant":{"color":"#609bbd","isDark":true,"contrast":3.2074486961643944},"LightMuted":{"color":"#b5bfc6","isDark":false,"contrast":1.869572315096829}},"permalink":"http://catx.me/2014/08/26/html5-sound-visualization-experiment-with-processingjs/","json":"data/posts/2014/08/26/html5-sound-visualization-experiment-with-processingjs.json","tags":[{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"Music","slug":"Music","path":"tags/Music/","permalink":"http://catx.me/tags/Music/","postCount":1},{"name":"Visualization","slug":"Visualization","path":"tags/Visualization/","permalink":"http://catx.me/tags/Visualization/","postCount":1},{"name":"processing.js","slug":"processing-js","path":"tags/processing-js/","permalink":"http://catx.me/tags/processing-js/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"next":{"title":"Hexo站点迁移主题","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>今天把博客从<code>blog.catx.me</code>迁移到了<code>catx.me</code>，并关闭了原来的wordpress博客，算是完成了迁移的工作。<br>由于在过渡期也有若干个项目引用了博客的URL，所以迁移最后需要解决的问题是改变域名过后的重定向。<br>重定向包括两个方面：</p>\n<ul>\n<li>通过原URL的访客不会死链，会自动跳转到新URL</li>\n<li>搜索引擎能自动重新索引，不会降低页面排名</li>\n</ul>\n<p>实现的原理就是在每个页面的<code>&lt;head&gt;</code>部分添加两个标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">http-equiv</span>=<span class=\"value\">\"refresh\"</span> <span class=\"attribute\">content</span>=<span class=\"value\">\"0; url=http://new.domain.com/same/relative/url/of/old/site/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"canonical\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://new.domain.com/same/relative/url/of/old/site/\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第一个是给人看的，第二个是给机器看的。</p>\n<p>前者会自动让浏览器跳转到新的域名，后者在搜索引擎的bot下次抓取页面的时候读取，重新索引到新的URL。</p>\n<p>对于较大的站点，人肉在每个页面的标签很是麻烦，于是做了一个hexo的主题来实现这样一个功能（当然也有其他方式，不过主题是最简单的）。这并不是一个真正的主题，因为没有任何内容会被访问者看到。这个主题唯一的用途就是生成一个结构完全相同的站点，把每个页面重定向到一个新的域名上。</p>\n<h2 id=\"u4F7F_u7528\"><a href=\"#u4F7F_u7528\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>以把在<code>blog.catx.me</code>上的站点迁移到<code>catx.me</code>上为例，创建repo、修改DNS、修改CNAME这些部署上的细节大同小异而又千变万化，不在此说明，过程如下：</p>\n<ul>\n<li>创建一个hexo博客文件夹的副本</li>\n<li>在副本文件夹中安装这个主题：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/akfish/hexo-theme-redirect.git themes/redirect</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改副本站点的<code>_config.yml</code>文件，使用主题：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: redirect</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改副本站点的<code>_config.yml</code>文件，添加如下行指定新域名：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_domain: catx.me</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改副本站点的部署配置，部署到<code>blog.catx.me</code>(老域名)</li>\n<li>修改原站点的部署配置，部署到<code>catx.me</code>(新域名)</li>\n</ul>\n<p>这样就完成了迁移工作，比如访问<a href=\"http://blog.catx.me\" target=\"_blank\" rel=\"external\">http://blog.catx.me</a>就会自动跳转到<a href=\"http://catx.me\">http://catx.me</a></p>\n<h2 id=\"u5176_u5B83\"><a href=\"#u5176_u5B83\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>如果你的站点部署在GitHub Pages上，老域名恰好在<code>yourname.github.io</code> repo的<code>CNAME</code>绑定过，那么你其它项目的GitHub Pages的URL也需要设置跳转。</p>\n<p>比如有个项目<code>foo</code>，原有的gh-pages地址就是<code>http://blog.catx.me/foo</code>，那么就可以在副本站点中运行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page foo</span><br></pre></td></tr></table></figure>\n<p>部署后就能实现跳转。需要注意的是，hexo生成的页面路径全是小写，如果服务器是区分大小写的，就需要手动在<code>source</code>里修改成正确的形式。</p>\n<h2 id=\"u6E90_u4EE3_u7801\"><a href=\"#u6E90_u4EE3_u7801\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://github.com/akfish/hexo-theme-redirect\" target=\"_blank\" rel=\"external\">hexo-theme-redirect</a></p>\n","date":"2014-03-19T16:02:33.000Z","path":"2014/03/20/hexo-site-migration-theme/","isDark":false,"featureColor":"#a99a48","featureImage":"/image/stock/7.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#a99a48","isDark":false,"contrast":2.8607233160176517},"Muted":{"color":"#b7ac6a","isDark":false,"contrast":2.3019786002998246},"DarkVibrant":{"color":"#8a7133","isDark":true,"contrast":4.70318580028283},"DarkMuted":{"color":"#534c37","isDark":true,"contrast":14.371837375676147},"LightVibrant":{"color":"#e4dcc3","isDark":false,"contrast":1.3703902496024831},"LightMuted":{"color":"#aba790","isDark":false,"contrast":2.4244396488445554}},"permalink":"http://catx.me/2014/03/20/hexo-site-migration-theme/","json":"data/posts/2014/03/20/hexo-site-migration-theme.json","tags":[{"name":"Hexo","slug":"Hexo","path":"tags/Hexo/","permalink":"http://catx.me/tags/Hexo/","postCount":3},{"name":"migiration","slug":"migiration","path":"tags/migiration/","permalink":"http://catx.me/tags/migiration/","postCount":1},{"name":"theme","slug":"theme","path":"tags/theme/","permalink":"http://catx.me/tags/theme/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]}}