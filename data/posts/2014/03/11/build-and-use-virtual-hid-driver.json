{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/11/build-and-use-virtual-hid-driver.json","path":"2014/03/11/build-and-use-virtual-hid-driver/","data":{"title":"编译并使用虚拟HID驱动","content":"<h2 id=\"u80CC_u666F\"><a href=\"#u80CC_u666F\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>虚拟HID驱动用于虚拟一个或多个人机交互设备，如键盘、鼠标、摇杆等，作用都懂的。<br>经过搜索发现一个开源项目<a href=\"https://code.google.com/p/vmulti/\" target=\"_blank\" rel=\"external\">vmulti</a>，实现了虚拟的多点触控、鼠标、键盘、摇杆以及数位笔，省去了自己写驱动的麻烦。</p>\n<h2 id=\"u7F16_u8BD1vmulti\"><a href=\"#u7F16_u8BD1vmulti\" class=\"headerlink\" title=\"编译vmulti\"></a>编译vmulti</h2><ol>\n<li>安装WDK</li>\n<li>运行以管理员权限WDK build environment</li>\n<li>进入vmulti工程文件夹，运行</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build -wgc</span><br></pre></td></tr></table></figure>\n<ol>\n<li>把编译生成的<code>vmulti.sys</code>、<code>multi.inf</code>、<code>hidkmdf.sys</code>文件放到同一个文件夹</li>\n<li>把WDK中的<code>WdfCoInstaller01009.dll</code>, <code>devcon.exe</code>也放到这个文件夹</li>\n</ol>\n<h2 id=\"u9A71_u52A8_u7B7E_u540D\"><a href=\"#u9A71_u52A8_u7B7E_u540D\" class=\"headerlink\" title=\"驱动签名\"></a>驱动签名</h2><p>Windows x64系统上无法安装无签名的驱动，需要进行self sign。所有操作需要在管理员权限的WDK build environment中执行。</p>\n<h3 id=\"u6253_u5F00Windows_u6D4B_u8BD5_u6A21_u5F0F\"><a href=\"#u6253_u5F00Windows_u6D4B_u8BD5_u6A21_u5F0F\" class=\"headerlink\" title=\"打开Windows测试模式\"></a>打开Windows测试模式</h3><p>要加载self sign的内核代码，需要打开windows的测试模式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bcdedit /set testsigning on</span><br></pre></td></tr></table></figure>\n<p>重启。</p>\n<h3 id=\"u521B_u5EFA_u8BC1_u4E66\"><a href=\"#u521B_u5EFA_u8BC1_u4E66\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">makecert -r -pe -ss &#34;CatX&#34; -n &#34;CN=CatX Test Certificate&#34; catx.cer&#10;certmgr -add catx.cer /s /r localMachine root&#10;certmgr -add catx.cer /s /r localMachine trustedpublisher</span><br></pre></td></tr></table></figure>\n<p>验证证书是否正确安装，运行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certmgr</span><br></pre></td></tr></table></figure>\n<h3 id=\"u7B7E_u540D\"><a href=\"#u7B7E_u540D\" class=\"headerlink\" title=\"签名\"></a>签名</h3><p>驱动中的如下文件需要签名：</p>\n<ul>\n<li><code>*.sys</code>文件</li>\n<li><code>*.inf</code>中引用的<code>*.cat</code>文件</li>\n</ul>\n<p>如果<code>*.cat</code>文件不存在，需要运行inf2cat创建：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inf2cat /driver:%driver_folder% /os:7_x64</span><br></pre></td></tr></table></figure>\n<p>vmulti需要签名的文件有vmulti.sys、hidkmdf.sys和kmdfsamples.cat，运行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signtool sign /v /s &#34;CatX&#34; /n &#34;CatX Test Certificate&#34; /t http://timestamp.verisign.com/scripts/timestamp.dll %file_name%</span><br></pre></td></tr></table></figure>\n<p>验证签名：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signtool verify /pa /v *.cat *.sys</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B89_u88C5vmulti\"><a href=\"#u5B89_u88C5vmulti\" class=\"headerlink\" title=\"安装vmulti\"></a>安装vmulti</h2><p>运行：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devcon install vmulti.inf djpnewton\\vmulti</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u6D4B_u8BD5\"><a href=\"#u6D4B_u8BD5\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>vmulti工程中包含了一个测试程序<code>testvmulti.exe</code>，用于测试驱动功能：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testvmulti.exe /multitouch&#10;testvmulti.exe /mouse&#10;testvmulti.exe /digitizer</span><br></pre></td></tr></table></figure></p>\n","date":"2014-03-11T02:24:16.000Z","path":"2014/03/11/build-and-use-virtual-hid-driver/","isDark":true,"featureColor":"#2f5a75","featureImage":"/image/stock/2.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2f5a75","isDark":true,"contrast":12.293085300100254},"Muted":{"color":"#64767c","isDark":true,"contrast":5.234975288978602},"DarkVibrant":{"color":"#1f4b68","isDark":true,"contrast":13.414009026295917},"DarkMuted":{"color":"#477084","isDark":true,"contrast":5.611238656641319},"LightVibrant":{"color":"#ecdabf","isDark":false,"contrast":1.3683052639522741},"LightMuted":{"color":"#95b1b5","isDark":false,"contrast":2.274202152883682}},"json":"data/posts/2014/03/11/build-and-use-virtual-hid-driver.json","tags":[{"name":"HID","slug":"HID","path":"tags/HID/","permalink":"http://catx.me/tags/HID/","postCount":1},{"name":"驱动","slug":"驱动","path":"tags/驱动/","permalink":"http://catx.me/tags/驱动/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"5e5a3640ccb5c4e126aed7f7acf5c4771bce3fca","prev":{"title":"中国区气象雷达数据爬虫","content":"<p>作为一个数据控，爱好各种实时数据，比如中央气象台的<a href=\"http://www.nmc.gov.cn/publish/radar/stations-chongqing.htm\" target=\"_blank\" rel=\"external\">气象雷达</a>数据。最近在进行的一个HTML5项目，就是利用Canvas和WebGL，把外观土鳖的官方数据，变成洋气+实用的交互式地图。由于HTML5 Canvas CORS的限制，在没有服务器配合的情况下，无法跨域载入图片，然后<code>getImageData</code>，因此就做了一个爬虫。</p>\n<p>经过一番试验，发现国外的免费云服务只有GAE能够访问nmc.gov.cn，确定爬虫在GAE上安家了。大致计算了下数据量，全国167个雷达站，平均10分钟更新1帧，每帧是一幅约35KB的GIF图像，一天下来就至少800+M的数据，放GAE上不现实。同时前端也需要<code>.json</code>文件，描述雷达站信息以及数据帧列表，所以还需要数据库存储，而GAE坑爹的datastore quota，一天只能5w次读写，爬虫大概跑3圈就爆了。在这样一些约束下，最后脑洞大开的结合GitHub API，把数据全存到一个GitHub repository里，然后再把git tree拖回来当数据库用，解决问题。</p>\n<p>目前在GAE上部署了两个实例，分时运行，因为bandwidth quota大概只能支撑半天，然后每天删除repository重建一次，避免超过GitHub的quota。</p>\n<p>除了爬图片，地图叠加层的对其需要知道雷达站的坐标，以及数据的范围（即图片上的“数据范围：xxx km”），前者通过之前人肉爬到的一个包含全国雷达站坐标的xml文件解决问题。<br>至于数据范围没有找到官方的数据，最后写了一个简单的OCR算法直接从图片上识别。</p>\n<h2 id=\"u9644_u8BB0_uFF1A_u7528GitHub_API_u521B_u5EFAcommit_u6D41_u7A0B\"><a href=\"#u9644_u8BB0_uFF1A_u7528GitHub_API_u521B_u5EFAcommit_u6D41_u7A0B\" class=\"headerlink\" title=\"附记：用GitHub API创建commit流程\"></a>附记：用GitHub API创建commit流程</h2><p>GitHub提供了<a href=\"https://developer.github.com/v3/repos/contents/\" target=\"_blank\" rel=\"external\">Content API</a>，可以方便的对单个文件进行CRUD操作，每次操作产生1个commit。<br>如果需要一次commit多个文件（比如这个爬虫每次cron会新增数百文件），这样显然不实际。<br>更好的做法是通过<a href=\"https://developer.github.com/v3/git/\" target=\"_blank\" rel=\"external\">Git Data API</a>，模拟git创建一次commit的过程。<br>之前做git私有传输协议的经验立即发挥作，轻车熟路的解决，流程如下：</p>\n<ol>\n<li>用<a href=\"https://developer.github.com/v3/git/blobs/\" target=\"_blank\" rel=\"external\">Blob API</a>为每个文件创建一个blob</li>\n<li>用<a href=\"https://developer.github.com/v3/git/trees/\" target=\"_blank\" rel=\"external\">Tree API</a>为每个子文件夹创建一个tree，并添加其中文件对应的blob</li>\n<li>用<a href=\"https://developer.github.com/v3/git/commits/\" target=\"_blank\" rel=\"external\">Commit API</a>读出要commit分支最新的commit，以及commit对应的tree</li>\n<li>创建root tree，未改变的文件/文件夹需要原封不动的在tree里面保留，插入/替换新增的blob/tree</li>\n<li>创建commit，tree指向新的root tree，parent指向分支最新commit</li>\n<li>用<a href=\"https://developer.github.com/v3/git/refs/\" target=\"_blank\" rel=\"external\">Reference API</a>更新分支的ref，指向新创建的commit</li>\n</ol>\n<p>如果操作中断或重复操作，blob/tree都不会导致多余的数据产生（纯浪费上传带宽而已）。<br>因为git用SHA1 Digest作为所有git object的文件名，同内容的blob/tree不会重复。<br>需要注意一个例外，commit由于包含了时间戳，会重复创建。</p>\n<p>当然最好封装好的library，会省不少事。<br>比如我在这个项目里用到的python library是<a href=\"https://github.com/jacquev6/PyGithub\" target=\"_blank\" rel=\"external\">PyGitHub</a>，几个月前给这个项目发过pull request增加了些功能，比较熟悉用起来顺手。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>源码: <a href=\"https://github.com/catx-weather/radar-bot\" target=\"_blank\" rel=\"external\">radar-bot</a></li>\n<li>爬到的数据：<a href=\"https://github.com/catx-weather/data\" target=\"_blank\" rel=\"external\">data</a></li>\n<li>OCR工具：<a href=\"https://github.com/catx-weather/frame-range-ocr\" target=\"_blank\" rel=\"external\">Frame Range OCR</a></li>\n</ul>\n","date":"2014-08-10T16:14:12.000Z","path":"2014/08/11/china-weather-radar-crawler/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2014/08/11/china-weather-radar-crawler.json","tags":[{"name":"Crawler","slug":"Crawler","path":"tags/Crawler/","permalink":"http://catx.me/tags/Crawler/","postCount":1},{"name":"Fun","slug":"Fun","path":"tags/Fun/","permalink":"http://catx.me/tags/Fun/","postCount":2},{"name":"GAE","slug":"GAE","path":"tags/GAE/","permalink":"http://catx.me/tags/GAE/","postCount":1},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"Python","slug":"Python","path":"tags/Python/","permalink":"http://catx.me/tags/Python/","postCount":1},{"name":"Weather","slug":"Weather","path":"tags/Weather/","permalink":"http://catx.me/tags/Weather/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"next":{"title":"BSC星表数据通用转换脚本","content":"<h2 id=\"u7B80_u4ECB\"><a href=\"#u7B80_u4ECB\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这两天开始用WebGL做一个星图App，需要处理各种星表数据。</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Bright_Star_Catalogue\" target=\"_blank\" rel=\"external\">Yale Bright Star Catalogue</a> (BSC, 亮星星表)包含了所有视星等6.5以上的恒星(9000+枚)，基本上就是人类狗眼能看到的所有恒星了。</p>\n<p>写了这个转换脚本，可以将星表数据转换为任意格式，只需要创建对应格式的underscore template就行了。</p>\n<h2 id=\"u4E0B_u8F7D\"><a href=\"#u4E0B_u8F7D\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>Markdown格式化后的BSC 5th Edition Readme: <a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc\" target=\"_blank\" rel=\"external\">Bright Star Catalogue, 5th Revised Ed. </a></p>\n<p>转换脚本: <a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc/convertor\" target=\"_blank\" rel=\"external\">Generic Convertor For Bright Star Catalogue</a></p>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>Node.Js</li>\n<li>在脚本目录中<code>npm install</code>如下包：<ul>\n<li>coffee-script</li>\n<li>async</li>\n<li>underscore</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc#file-summary\" target=\"_blank\" rel=\"external\">下载</a>星表数据文件，解压<code>bsc5.dat</code>和<code>notes</code>文件，放到和脚本相同目录</li>\n<li>和脚本一起的有一个简单的<code>json</code>模板(underscore template)，也可以根据需要自己创建，放到和脚本相同目录</li>\n</ul>\n<h2 id=\"u8FD0_u884C\"><a href=\"#u8FD0_u884C\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>命令格式:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ coffee convert template_file_name output_file_name</span><br></pre></td></tr></table></figure></p>\n<p>例:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ coffee convert json bsc5.json</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u521B_u5EFA_u6A21_u677F\"><a href=\"#u521B_u5EFA_u6A21_u677F\" class=\"headerlink\" title=\"创建模板\"></a>创建模板</h2><p>参考：</p>\n<ul>\n<li><a href=\"http://underscorejs.org/#template\" target=\"_blank\" rel=\"external\">underscore.js template</a></li>\n<li><a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc/convertor#writing-templates\" target=\"_blank\" rel=\"external\">Writing Templates</a></li>\n</ul>\n","date":"2014-05-02T02:43:38.000Z","path":"2014/05/02/bright-star-catalogue-convertor/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2014/05/02/bright-star-catalogue-convertor.json","tags":[{"name":"Astronomy","slug":"Astronomy","path":"tags/Astronomy/","permalink":"http://catx.me/tags/Astronomy/","postCount":1},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":9},{"name":"Node.Js","slug":"Node-Js","path":"tags/Node-Js/","permalink":"http://catx.me/tags/Node-Js/","postCount":4}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24},{"name":"天文","slug":"天文","path":"categories/天文/","permalink":"http://catx.me/categories/天文/","postCount":1}]}}