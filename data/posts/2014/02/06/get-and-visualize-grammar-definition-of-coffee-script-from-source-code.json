{"type":"post","json_base":"data/posts","json":"data/posts/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code.json","path":"2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","data":{"title":"从CoffeeScript源代码中获取文法并可视化","content":"<p>最近在研究把CoffeeScript编译到.Net CLR环境上运行的可能性，在几个CoffeeScript compiler的实现中，没有发现对文法定义的specification，如果要人肉重建不仅工作量忧桑，还有可能导致兼容性问题。于是看了下源代码，发现略施小计就能解决这个问题。</p>\n<p>CoffeeScript的Parser使用jison生成的，所有的文法都在<a href=\"http://coffeescript.org/documentation/docs/grammar.html\" target=\"_blank\" rel=\"external\">grammar.coffee</a>里定义了。这个代码非常好改，去掉对jison的调用，把语法定义用JSON.stringify() format了再输出，执行<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">修改后的代码</a>：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee grammar.coffee</span><br></pre></td></tr></table></figure></p>\n<p>就会得到一大串jison格式的文法定义：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"tokens\"</span>:<span class=\"string\">\" TERMINATOR TERMINATOR TERMINATOR STATEMENT INDENT OUTDENT INDENT OUTDENT IDENTIFIER NUMBER STRING JS REGEX BOOL = = INDENT OUTDENT : : INDENT OUTDENT RETURN RETURN HERECOMMENT PARAM_START PARAM_END -&amp;gt; =&amp;gt;  ,  , ... = ... . ?. :: :: INDEX_START INDEX_END INDEX_SOAK &#123; &#125;  , TERMINATOR INDENT OUTDENT CLASS CLASS CLASS EXTENDS CLASS EXTENDS CLASS CLASS CLASS EXTENDS CLASS EXTENDS SUPER SUPER  FUNC_EXIST CALL_START CALL_END CALL_START CALL_END THIS @ @ [ ] [ ] .. ... [ ] , TERMINATOR INDENT OUTDENT INDENT OUTDENT , TRY TRY TRY FINALLY TRY FINALLY CATCH THROW ( ) ( INDENT OUTDENT ) WHILE WHILE WHEN UNTIL UNTIL WHEN LOOP LOOP FOR FOR FOR OWN , FORIN FOROF FORIN WHEN FOROF WHEN FORIN BY FORIN WHEN BY FORIN BY WHEN SWITCH INDENT OUTDENT SWITCH INDENT ELSE OUTDENT SWITCH INDENT OUTDENT SWITCH INDENT ELSE OUTDENT LEADING_WHEN LEADING_WHEN TERMINATOR IF ELSE IF ELSE POST_IF POST_IF UNARY - + -- ++ -- ++ ? + - MATH SHIFT COMPARE LOGIC RELATION COMPOUND_ASSIGN COMPOUND_ASSIGN INDENT OUTDENT EXTENDS\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bnf\"</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Root\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"\"</span>,<span class=\"string\">\"return $$ = new yy.Block;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body\"</span>,<span class=\"string\">\"return $$ = $1;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Block TERMINATOR\"</span>,<span class=\"string\">\"return $$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Body\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"Line\"</span>,<span class=\"string\">\"$$ = yy.Block.wrap([$1]);\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body TERMINATOR Line\"</span>,<span class=\"string\">\"$$ = $1.push($3);\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body TERMINATOR\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Line\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"Expression\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Statement\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>这样已经算是可用了，但可读性依然不高，经过一番搜索发现一个jison-to-w3c文法标记格式的<a href=\"http://bottlecaps.de/convert/\" target=\"_blank\" rel=\"external\">转换器</a>，得到<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">文法</a>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Root     ::= Body?&#10;Body     ::= Line ( TERMINATOR Line | TERMINATOR )*&#10;Line     ::= Expression&#10;           | Statement&#10;Statement&#10;         ::= Return&#10;           | Comment&#10;           | STATEMENT&#10;Expression&#10;         ::= Value&#10;           | Invocation&#10;           | Code&#10;           | Operation&#10;           | Assign&#10;           | If&#10;           | Try&#10;           | While&#10;           | For&#10;           | Switch&#10;           | Class&#10;           | Throw&#10;...</span><br></pre></td></tr></table></figure></p>\n<p>最后找到一个可视化文法的网站<a href=\"http://bottlecaps.de/rr/ui\" target=\"_blank\" rel=\"external\">Railroad Diagram Generator</a>将其可视化，just for fun:</p>\n<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/coffee-grammar.png\"><img src=\"/images/064306e5ca2ed757a42cd94fd214d22e49fc19c8.png\" alt=\"coffee-grammar\"></a></p>\n<p>完整的图在：<a href=\"http://project.catx.me/other/coffee-grammar.xhtml\" target=\"_blank\" rel=\"external\">http://project.catx.me/other/coffee-grammar.xhtml</a></p>\n<p>源代码+完整的文法定义：<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">https://gist.github.com/akfish/8827385</a></p>\n","date":"2014-02-05T16:55:24.000Z","path":"2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","isDark":true,"featureColor":"#2f5a75","featureImage":"/image/stock/2.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2f5a75","isDark":true,"contrast":12.293085300100254},"Muted":{"color":"#64767c","isDark":true,"contrast":5.234975288978602},"DarkVibrant":{"color":"#1f4b68","isDark":true,"contrast":13.414009026295917},"DarkMuted":{"color":"#477084","isDark":true,"contrast":5.611238656641319},"LightVibrant":{"color":"#ecdabf","isDark":false,"contrast":1.3683052639522741},"LightMuted":{"color":"#95b1b5","isDark":false,"contrast":2.274202152883682}},"json":"data/posts/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":9},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"495d221209b03d2c1b2cc2f61a3e91d6a54a4018","prev":{"title":"Git私有传输协议实现-接口篇(1)","content":"<p>Git默认支持http, https, ssh协议，同时也提供了扩展私有协议的方法，文档<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-remote-helpers.html\" target=\"_blank\" rel=\"external\">git-remote-helpers</a>给出了详细的spec。</p>\n<p>比如要实现一种协议，把git repository存储（可加密）到私人的email邮箱中，以存储一些不便于host到GitHub的私人repo，同时免去购买主机/服务器的成本和维护带来的麻烦，Repository的clone url格式定义为<code>mail://your@email.com:repo_name</code>。</p>\n<h2 id=\"u8C03_u7528\"><a href=\"#u8C03_u7528\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>使用git命令clone, 现在什么都没实现，所以理所当然的报错：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone mail://akfish@gmail.com:foo&#10;fatal: Unable to find remote helper for &#39;mail&#39;</span><br></pre></td></tr></table></figure></p>\n<p>根据文档的描述：</p>\n<blockquote>\n<p>When git encounters a URL of the form &lt;transport&gt;://&lt;address&gt;, where &lt;transport&gt; is a protocol that it cannot handle natively, it automatically invokes git remote-&lt;transport&gt; with the full URL as the second argument. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote.</p>\n</blockquote>\n<p>即git会把url中<code>mail://</code>映射到调用命令<code>git-remote-mail</code>，所以只需要用任何开发语言实现一个标准输入输出的命令行程序，满足文档中定义的命令格式，放在git能搜寻到的位置，就能让git支持私有协议（注意python在windows下存在stdout无法被重定向的问题，无法和git正确通信）。本例中用C#实现，创建控制台程序git-remote-mail：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">git_remote_mail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            Logger logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">\"git-remote-mail.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"args: \"</span> + String.Join(<span class=\"string\">\", \"</span>, args));</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次执行clone，错误提示消失，由于这个脚本什么事情也没做，所以当然也就什么都不会发生。stdin和stdout被用于与git通信，不会显示出来。如果需要输出消息，write到stderr，或者产生一个日志文件来记录，Logger类实现了相应的功能，具体代码见<a href=\"https://github.com/akfish/git-mail/blob/master/git-remote-mail/Logger.cs\" target=\"_blank\" rel=\"external\">Logger.cs</a>。执行clone命令后，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2013/10/20 22:07:02]Open log file git-remote-mail.txt&#10;[2013/10/20 22:07:02]args: origin, mail://akfish@gmail.com:foo&#10;[2013/10/20 22:07:02]Close log file</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，在调用的时候，还传入了两个参数：origin和mail://akfish@gmail.com:foo，根据文档：</p>\n<blockquote>\n<p>Remote helper programs are invoked with one or (optionally) two arguments. The first argument specifies a remote repository as in git; it is either the name of a configured remote or a URL. The second argument specifies a URL; it is usually of the form &lt;transport&gt;://&lt;address&gt;, but any arbitrary string is possible.</p>\n</blockquote>\n<p>参数的数量为1~2个，第一个参数为repo的名字或者url，第二个参数如果存在，为repo的url。</p>\n<h2 id=\"u547D_u4EE4_u6D41\"><a href=\"#u547D_u4EE4_u6D41\" class=\"headerlink\" title=\"命令流\"></a>命令流</h2><p>Git通过stdin向remote helper发送命令，一行一个，第一个命令总是<em>capabilities</em>。Remote helper需要通过stdout返回支持的capabilities，每行一个，以空行结束。Capabilities代表helper支持哪些命令子集，如fetch需要支持<em>connect, fetch, import</em>，详细的列表在文档里有列出。</p>\n<p>命令流通常以空行结束，但在某些情况下空行后会跟着其它协议的payload（如pack），具体参见command的具体说明。要注意的是命令流用的是linux-style line ending，即以<em>\\n</em>结尾，如果使用<em>Console.WriteLine</em>产生的是DOS line ending（<em>\\r\\n</em>），则不能正确工作。<em>\n</em></p>\n<p>增加代码响应capabilities命令：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//.... </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    Logger logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">\"git-remote-mail.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.Log(<span class=\"string\">\"args: \"</span> + String.Join(<span class=\"string\">\", \"</span>, args));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> line;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exitCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        line = Console.ReadLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.Log(<span class=\"string\">\"&amp;gt;&amp;gt;\"</span> + line);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(line))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"Command stream terminated\"</span>);</span><br><span class=\"line\">            exitCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (line.StartsWith(<span class=\"string\">\"capabilities\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"connect\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"fetch\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"import\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"&amp;lt;&amp;lt;connect, fetch, import\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"Unhandled command. Exit\"</span>);</span><br><span class=\"line\">            exitCode = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.Dispose();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exitCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2013/10/20 22:28:53]Open log file git-remote-mail.txt&#10;[2013/10/20 22:28:53]args: origin, mail://akfish@gmail.com:foo&#10;[2013/10/20 22:28:53]&#38;gt;&#38;gt;capabilities&#10;[2013/10/20 22:28:53]&#38;lt;&#38;lt;connect, fetch, import&#10;[2013/10/20 22:28:53]&#38;gt;&#38;gt;connect git-upload-pack&#10;[2013/10/20 22:28:53]Unhandled command. Exit&#10;[2013/10/20 22:28:53]Close log file</span><br></pre></td></tr></table></figure>\n<p>表明命令流已经成功初始化，git继续发出connect命令开始clone的工作。</p>\n<p>接口部分就这么简单，接下来的工作就是根据文档的描述，响应具体的命令，完成协议的具体设计。</p>\n<h2 id=\"u66F4_u591A_u53C2_u8003_u8D44_u6599\"><a href=\"#u66F4_u591A_u53C2_u8003_u8D44_u6599\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><p>Git的repo中包含了大量文档，都是很好的参考资料</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/git/git&#10;$ cd git/Documentation&#10;$ grep -nRHI &#34;receive-pack&#34; *</span><br></pre></td></tr></table></figure>\n<p>会给出这些文档：</p>\n<ul>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/http-protocol.txt\" target=\"_blank\" rel=\"external\">http-protocol</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-heuristics.txt\" target=\"_blank\" rel=\"external\">pack-heuristics</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt\" target=\"_blank\" rel=\"external\">pack-protocol</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/protocol-capabilities.txt\" target=\"_blank\" rel=\"external\">protocol capabilities</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/send-pack-pipeline.txt\" target=\"_blank\" rel=\"external\"><code>send-pack</code> pipeline</a></li>\n</ul>\n<p>以下文档是相关的后端命令，作为补充：</p>\n<ul>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-http-backend.txt\" target=\"_blank\" rel=\"external\"><code>git-http-backend</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-receive-pack.txt\" target=\"_blank\" rel=\"external\"><code>git-receive-pack</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-remote-ext.txt\" target=\"_blank\" rel=\"external\"><code>git-remote-ext</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-send-pack.txt\" target=\"_blank\" rel=\"external\"><code>git-send-pack</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/gitremote-helpers.txt\" target=\"_blank\" rel=\"external\"><code>git-remote-helpers</code></a></li>\n</ul>\n<p>查看源代码中与传输协议相关的commit：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/git/git&#10;$ cd git&#10;$ git log -Stransfer</span><br></pre></td></tr></table></figure>\n<p>可以参见以下commits：</p>\n<ul>\n<li><a href=\"http://github.com/git/git/commit/4bc444eb64173f770c1d1dba2ed3db393c2a9b18\" target=\"_blank\" rel=\"external\">commit 4bc444</a> (Support FTP-over-SSL/TLS for regular FTP)</li>\n<li><a href=\"https://github.com/git/git/commit/daebaa78137d59693a808c1f0bdec0ecb40fc12e\" target=\"_blank\" rel=\"external\">commit daebaa</a> (upload/receive-pack: allow hiding ref hierarchies )</li>\n<li><a href=\"http://github.com/git/git/commit/745f7a8cacae55df3e00507344d8db2a31eb57e8\" target=\"_blank\" rel=\"external\">commit 745f7a</a> (fetch-pack: move core code to libgit.a)</li>\n<li><a href=\"http://github.com/git/git/commit/fe0435011cfc5f0c15bbd4548ce0015f5b8ad430\" target=\"_blank\" rel=\"external\">commit fe0435</a> (Add persistent-https to contrib)<br>&nbsp;</li>\n</ul>\n","date":"2013-10-19T10:47:12.000Z","path":"2013/10/19/git-custom-transfer-protocol-1/","isDark":true,"featureColor":"#2f5a75","featureImage":"/image/stock/2.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2f5a75","isDark":true,"contrast":12.293085300100254},"Muted":{"color":"#64767c","isDark":true,"contrast":5.234975288978602},"DarkVibrant":{"color":"#1f4b68","isDark":true,"contrast":13.414009026295917},"DarkMuted":{"color":"#477084","isDark":true,"contrast":5.611238656641319},"LightVibrant":{"color":"#ecdabf","isDark":false,"contrast":1.3683052639522741},"LightMuted":{"color":"#95b1b5","isDark":false,"contrast":2.274202152883682}},"json":"data/posts/2013/10/19/git-custom-transfer-protocol-1.json","tags":[{"name":"git","slug":"git","path":"tags/git/","permalink":"http://catx.me/tags/git/","postCount":2},{"name":"gmail","slug":"gmail","path":"tags/gmail/","permalink":"http://catx.me/tags/gmail/","postCount":1},{"name":"python","slug":"python","path":"tags/python/","permalink":"http://catx.me/tags/python/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"next":{"title":"用C# ILGenerator在运行时动态生成proxy","content":"<h2 id=\"u95EE_u9898_u63CF_u8FF0\"><a href=\"#u95EE_u9898_u63CF_u8FF0\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>C#中经常会遇到通过单一入口动态调用对象或服务的情况，形如：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">ProxyBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">object</span> <span class=\"title\">Invoke</span>(<span class=\"params\"><span class=\"keyword\">object</span> someMethodRelatedInfo, <span class=\"keyword\">object</span>[] arguments</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如Reflection，远程服务，Host动态脚本引擎时从C#调用引擎context内的方法等等情况都可以归类于这样的模型。</p>\n<p>一种较好的工程实现就是把这些服务方法用接口定义，获得强类型的校验，避免出现不必要的bug，并便于维护。如：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFooService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MethodWithNoReturn</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MethodTakeParameterAndReturn</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于不同的后端，需要有具体的调用实现：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FooProxyBase</span> : <span class=\"title\">ProxyBase</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">object</span> <span class=\"title\">Invoke</span>(<span class=\"params\"><span class=\"keyword\">object</span> someMethodRelatedInfo, <span class=\"keyword\">object</span>[] arguments</span>)</span><br><span class=\"line\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Pack to JSON and send via http</span></span><br><span class=\"line\">    <span class=\"comment\">// Or adapte and call other classes</span></span><br><span class=\"line\">    <span class=\"comment\">// Or whatever</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终的Proxy类通过继承调用实现类，同时实现服务约定接口实现：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FooService : FooProxyBase, IFooService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  #region Implement IFooService</span><br><span class=\"line\">  public void MethodWithNoReturn() </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Invoke(\"MethodWithNoReturn\", new object[0]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public int MethodTakeParameterAndReturn(int a, int b)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    return Invoke(\"MethodTakeParameterAndReturn\", new object[] &#123; a, b &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #endregion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来有一个显然的问题，Proxy类包含大量重复的代码，方法越多实现起来越费劲。这个问题的point of interest就在于Proxy类的动态生成，实现以后只需要一行代码就能替代人肉实现一个巨大的Proxy类：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IFooService proxy = ProxyEmitter.CreateProxy&amp;lt;FooProxyBase, IFooService&amp;gt;(<span class=\"comment\">/*Constructor parameters are supported*/</span>);</span><br></pre></td></tr></table></figure>\n<p>要动态生成Proxy类有很多种方法（如生成源代码然后编译），这里采用在运行时通过Reflection获取服务接口的方法，动态生成Proxy类，最后用ILGenerator.Emit用.Net IL实现代码逻辑。</p>\n<h2 id=\"u5B9E_u73B0_u8981_u70B9\"><a href=\"#u5B9E_u73B0_u8981_u70B9\" class=\"headerlink\" title=\"实现要点\"></a>实现要点</h2><p>如何动态创建Assembly, Module, Type的框架性代码MSDN有详尽的walkthrough，不在本文讨论重点，具体实现可参考源代码。</p>\n<p>这一节记录在实现这个项目中几处逻辑的IL代码生成，有几点是必须要知道的：</p>\n<ul>\n<li>.Net CLR是基于栈的虚拟机</li>\n<li>.Net CLR（在生成C#类时）是强类型的</li>\n<li>参数顺序入栈</li>\n<li>非static method的第一个参数总是this指针</li>\n</ul>\n<p>1. 有参数的constructor</p>\n<p>在C#中很多涉及自动生成的情况（如serialization）都要求无参数的constructor，在有的情况下很让人忧桑，其实要支持有参数的constructor也是可行的。</p>\n<p>如果父类只有一个有参数的constructor，子类的constructor实现必须用足够的参数构造：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span>: <span class=\"title\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Derived</span>(<span class=\"params\"><span class=\"keyword\">int</span> may, <span class=\"keyword\">string</span> para, <span class=\"keyword\">object</span>[] meters</span>): <span class=\"title\">base</span>(<span class=\"params\">may, para, meters</span>) </span>&#123;&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用IL实现上述代码，需要将参数重新压栈，然后call base的ctor指针：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">EmitCtor</span>(<span class=\"params\">TypeBuilder tBuilder, ConstructorInfo ctor</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pTypes = ctor.GetParameters().Select(p =&amp;gt; p.ParameterType).ToArray();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = Emitter.GetConstructor(</span><br><span class=\"line\">        tBuilder,</span><br><span class=\"line\">        MethodAttributes.Public |</span><br><span class=\"line\">        MethodAttributes.HideBySig |</span><br><span class=\"line\">        MethodAttributes.SpecialName |</span><br><span class=\"line\">        MethodAttributes.RTSpecialName,</span><br><span class=\"line\">        pTypes</span><br><span class=\"line\">        );</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ilGen = builder.GetILGenerator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// No locals</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load all args, note arg 0 is this pointer, so must emit one more</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= pTypes.Length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DoEmit(ilGen, OpCodes.Ldarg_S, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Call base ctor</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Call, ctor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的IL形如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IL_0000: ldarg.0</span><br><span class=\"line\">IL_0001: ldarg.1</span><br><span class=\"line\">IL_0002: ldarg.2</span><br><span class=\"line\">IL_0003: ldarg.3</span><br><span class=\"line\">IL_0004: call instance void Base::.ctor(int32, string, object)</span><br><span class=\"line\">IL_0009: ret</span><br></pre></td></tr></table></figure>\n<p>2. Array的初始化<br>由于Invoke的长相，决定了这个生成器中需要大量的生成object[]对象，并把参数装进去。<br>创建一个local variable，首先需要declare：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ilGen.DeclareLocal(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">object</span>[]))</span><br></pre></td></tr></table></figure>\n<p>每个method的运行环境里维护了一个local列表，IL代码通过index把local入栈和出栈。<br>创建Array对象，并设置到local：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize array</span></span><br><span class=\"line\"><span class=\"comment\">// IL_0006:  ldc.i4.x</span></span><br><span class=\"line\">DoEmit(ilGen, OpCodes.Ldc_I4_S, pTypes.Length);</span><br><span class=\"line\"><span class=\"comment\">// IL_0007:  newarr     [mscorlib]System.Object</span></span><br><span class=\"line\">DoEmit(ilGen, OpCodes.Newarr, <span class=\"keyword\">typeof</span>(Object));</span><br><span class=\"line\"><span class=\"comment\">// IL_000c:  stloc.1</span></span><br><span class=\"line\">DoEmit(ilGen, OpCodes.Stloc_0);</span><br><span class=\"line\">``` </span><br><span class=\"line\">对Array元素的逐条赋值由<span class=\"number\">4</span>~<span class=\"number\">5</span>条机器指令完成：</span><br><span class=\"line\"></span><br><span class=\"line\">*   ldloc.?将array入栈</span><br><span class=\"line\">*   ldc_i4_?将当前元素的index入栈</span><br><span class=\"line\">*   将需要赋给元素的值入栈（本例中为参数用ldarg_s，注意参数<span class=\"number\">0</span>为<span class=\"keyword\">this</span>指针）</span><br><span class=\"line\">*   如果是<span class=\"keyword\">value</span> type需要box</span><br><span class=\"line\">*   stelem.<span class=\"keyword\">ref</span>指令完成赋值</span><br><span class=\"line\"></span><br><span class=\"line\">```cs</span><br><span class=\"line\"><span class=\"comment\">// Now fill the array</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; pTypes.Length; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Load the array first</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_000X + 00: ldloc.0</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ldloc_0);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Push the index</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_000X + 01: ldc_i4_x</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ldc_I4_S, i);</span><br><span class=\"line\">    <span class=\"comment\">// Load argument i + 1 (note that argument 0 is this pointer(?))</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_000X + 02: ldarg_X</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ldarg_S, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Box value type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pTypes[i].IsValueType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IL_000X + 03: box pTypes[i]</span></span><br><span class=\"line\">        DoEmit(ilGen, OpCodes.Box, pTypes[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Set arrary element</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_00X + ??: stelem.ref</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Stelem_Ref);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6E90_u4EE3_u7801_u53CA_u4F7F_u7528_u65B9_u6CD5\"><a href=\"#u6E90_u4EE3_u7801_u53CA_u4F7F_u7528_u65B9_u6CD5\" class=\"headerlink\" title=\"源代码及使用方法\"></a>源代码及使用方法</h2><p>见<a href=\"https://github.com/akfish/ProxyEmitter\" target=\"_blank\" rel=\"external\">GitHub</a>。</p>\n","date":"2014-02-28T18:50:56.000Z","path":"2014/03/01/generate-dynamic-proxy-class-at-runtime-with-ilgenerator-c-sharp/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"json":"data/posts/2014/03/01/generate-dynamic-proxy-class-at-runtime-with-ilgenerator-c-sharp.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]}}