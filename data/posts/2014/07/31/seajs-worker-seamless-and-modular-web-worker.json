{"type":"post","json_base":"data/posts","json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","data":{"title":"seajs-worker | 无缝&模块化的Web Worker开发","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Web Worker是HTML5标准增加的多线程方案，直接使用web worker的API开发是一件比较麻烦的事：</p>\n<ul>\n<li>Worker脚本必须放在单独的文件里（虽然可以用blob inline worker，但是IE10/11不支持，并且<a href=\"http://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\" target=\"_blank\" rel=\"external\">官方也没有修改的意思</a>）</li>\n<li>Worker和浏览器脚本需要通过message通信</li>\n<li>不利于模块化开发，不管是AMD还是CMD模块，都不能直接通过<code>importScripts</code>载入运行</li>\n</ul>\n<p>RequireJS<a href=\"/requirejs.org/docs/api.html#webworker\">支持web worker</a>，可以在worker脚本一开头<code>importScript(&#39;path/to/require.js&#39;)</code>，然后就愉快的一路AMD了（当然依然要message通信）。</p>\n<p>而我最近项目里在使用的sea.js不支持，为了解决这个问题，前几天陆续向sea.js发了几个<a href=\"https://github.com/seajs/seajs/pull/1279\" target=\"_blank\" rel=\"external\">pull request</a>，给sea.js增加了web worker支持。</p>\n<p>在变更被merge过后，更进一步的折腾了下，把web worker的API封装了一遍，写了seajs-worker这个插件，实现了真正无缝的开发。开发者不需要关心worker的创建、生命周期管理，也不需要通过消息通信，而是直接通过清晰的异步方法调用。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><a href=\"https://github.com/akfish/seajs-worker\" target=\"_blank\" rel=\"external\">GitHub Repo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/example/\">示例Demo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/doc/\">文档</a></li>\n<li><a href=\"http://catx.me/seajs-worker/tests/SpecRunner.html\">测试</a></li>\n</ul>\n<h2 id=\"u4F7F_u7528_u5B9E_u4F8B\"><a href=\"#u4F7F_u7528_u5B9E_u4F8B\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><p><a href=\"http://catx.me/seajs-worker/example/\">示例</a>源码在repo的的<a href=\"https://github.com/akfish/seajs-worker/tree/master/example\" target=\"_blank\" rel=\"external\">example</a>目录里可以找到。</p>\n<p>使用seajs-worker开发web worker只需要3步。</p>\n<h3 id=\"u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\"><a href=\"#u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\" class=\"headerlink\" title=\"第一步，配置sea.js:\"></a>第一步，配置sea.js:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"actionscript\"></span><br><span class=\"line\">  seajs.config(&#123;</span><br><span class=\"line\">    base: <span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  seajs.<span class=\"keyword\">use</span>(<span class=\"string\">'example/main'</span>);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\"><a href=\"#u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\" class=\"headerlink\" title=\"第二步，实现一个具体的worker类，继承自SeaWorker：\"></a>第二步，实现一个具体的worker类，继承自SeaWorker：</h3><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># image-worker.coffee</span></span><br><span class=\"line\">define (<span class=\"built_in\">require</span>, exports, <span class=\"built_in\">module</span>) -&gt;</span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span> <span class=\"string\">'../worker'</span></span><br><span class=\"line\">  <span class=\"comment\"># require other modules directly</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span> <span class=\"string\">'./image-util'</span></span><br><span class=\"line\">  <span class=\"comment\"># @nodoc</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageWorker</span> <span class=\"keyword\">extends</span> <span class=\"title\">SeaWorker</span></span></span><br><span class=\"line\">    <span class=\"property\">@worker_service</span> <span class=\"string\">'sepia'</span>, <span class=\"function\"><span class=\"params\">(src)</span> -&gt;</span></span><br><span class=\"line\">      src.each (p) -&gt;</span><br><span class=\"line\">        r = <span class=\"number\">0.393</span> * p.r + <span class=\"number\">0.769</span> * p.g + <span class=\"number\">0.189</span> * p.b</span><br><span class=\"line\">        g = <span class=\"number\">0.349</span> * p.r + <span class=\"number\">0.686</span> * p.g + <span class=\"number\">0.168</span> * p.b</span><br><span class=\"line\">        b = <span class=\"number\">0.272</span> * p.r + <span class=\"number\">0.534</span> * p.g + <span class=\"number\">0.131</span> * p.b</span><br><span class=\"line\">        src.setRGBA p.i, r, g, b, p.a</span><br><span class=\"line\">      <span class=\"keyword\">return</span> src</span><br><span class=\"line\"></span><br><span class=\"line\">  SeaWorker.register ImageWorker</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = ImageWorker</span><br></pre></td></tr></table></figure>\n<p>可以看到worker类就是一个普通CMD模块的写法，可以自由<code>require</code>其它模块，只要执行路径里没有调用到web worker不允许访问的API（比如DOM）就行。</p>\n<h3 id=\"u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\"><a href=\"#u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\" class=\"headerlink\" title=\"第三步，创建并调用worker。\"></a>第三步，创建并调用worker。</h3><p>创建：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Worker = <span class=\"built_in\">require</span> <span class=\"string\">'./image-worker'</span></span><br><span class=\"line\">worker = <span class=\"keyword\">new</span> Worker()</span><br></pre></td></tr></table></figure></p>\n<p>seajs-worker提供了两种调用方案。</p>\n<h4 id=\"u5355worker_u65B9_u6848_uFF1A\"><a href=\"#u5355worker_u65B9_u6848_uFF1A\" class=\"headerlink\" title=\"单worker方案：\"></a>单worker方案：</h4><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src, <span class=\"function\"><span class=\"params\">(err, result)</span> -&gt;</span></span><br><span class=\"line\">  ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，再也不需要自己去实现message通信，只需要一个简单的方法调用。返回值的方法除了以上callback的方式以外，如果seajs-worker检测到了<a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a>的存在，就会返回一个promise对象，此时就可以使用<a href=\"http://promisesaplus.com/\" target=\"_blank\" rel=\"external\">Promise/A+ Pattern</a>避免callback的嵌套：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (result) -&gt; ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"u591Aworker_u65B9_u6848\"><a href=\"#u591Aworker_u65B9_u6848\" class=\"headerlink\" title=\"多worker方案\"></a>多worker方案</h4><p>仅仅使用一个worker还不足以发挥多线程的威力，seajs-worker提供了<code>map-reduce</code>语法，一句话实现worker pool:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Divide image into segments</span></span><br><span class=\"line\">segs = [seg_1, seg_2, ..., seg_n]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Worker count</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Map-Reduce</span></span><br><span class=\"line\">Worker.map segs, <span class=\"string\">'sepia'</span>, n</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (dsts) -&gt;</span><br><span class=\"line\">    Worker.reduce dsts, <span class=\"function\">(<span class=\"params\">(ctx, s, i)</span> -&gt;</span></span><br><span class=\"line\">      ctx.putImageData s, <span class=\"number\">0</span>, i * step</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ctx</span><br><span class=\"line\">      ), dst_ctx</span><br></pre></td></tr></table></figure>\n<p>以上代码把图像分成若干块，放到一个<code>Array</code>里，然后通过<code>map</code>把每块交给一个worker进行处理，指定同时最多有10个worker进行操作。完成后传回一个<code>Array</code>，分别对应每块图像的处理结果，由<code>reduce</code>绘制到canvas上。</p>\n<p><a href=\"http://blogs.msdn.com/b/eternalcoding/archive/2012/09/20/using-web-workers-to-improve-performance-of-image-manipulation.aspx\" target=\"_blank\" rel=\"external\">这篇blog</a>用web worker API细线了同样的功能，对比起来代码的清晰程度显而易见。</p>\n<h2 id=\"JavaScript_u4E2D_u4F7F_u7528\"><a href=\"#JavaScript_u4E2D_u4F7F_u7528\" class=\"headerlink\" title=\"JavaScript中使用\"></a>JavaScript中使用</h2><p>seajs-worker为JavaScript开发者提供了几个helper方法，例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Require base</span></span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/sea/worker'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a derived class</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Derived = SeaWorker.extend(&#123;</span><br><span class=\"line\">    field: <span class=\"string\">'I am a field'</span>,</span><br><span class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// I'm a function exists in both worker and browser</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    constructor: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.n = n;</span><br><span class=\"line\">      <span class=\"comment\">// Call parent constructor if needed</span></span><br><span class=\"line\">      <span class=\"comment\">// this.__super(n);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker side methods</span></span><br><span class=\"line\">  Derived.inWorker(<span class=\"string\">\"methodInWorkerOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Browser side methods</span></span><br><span class=\"line\">  Derived.inBrowser(<span class=\"string\">\"methodInBrowserOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker service, running in worker, called from browser</span></span><br><span class=\"line\">  Derived.service(<span class=\"string\">\"foo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Register</span></span><br><span class=\"line\">  SeaWorker.register(Derived);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = Derived;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u9879_u76EE_u72B6_u6001\"><a href=\"#u9879_u76EE_u72B6_u6001\" class=\"headerlink\" title=\"项目状态\"></a>项目状态</h2><p>目前seajs-worker的所有代码均有文档、注释，并通过了单元测试。</p>\n<p><del>API语句针对CoffeeScript设计优化，用JavaScript调用暂时还不够优雅，接下来会改善这个问题。</del></p>\n","date":"2014-07-31T15:02:53.000Z","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","isDark":true,"featureColor":"#d33526","featureImage":"/image/stock/6.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d33526","isDark":true,"contrast":5.2283814901860834},"Muted":{"color":"#92aab3","isDark":false,"contrast":2.4353407534583575},"DarkVibrant":{"color":"#18505f","isDark":true,"contrast":14.789314061889451},"DarkMuted":{"color":"#597e88","isDark":true,"contrast":4.714101405216207},"LightVibrant":{"color":"#d16a62","isDark":true,"contrast":3.610959820667002},"LightMuted":{"color":"#b9ccd2","isDark":false,"contrast":1.6626245807608895}},"permalink":"http://catx.me/2014/07/31/seajs-worker-seamless-and-modular-web-worker/","json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"sea.js","slug":"sea-js","path":"tags/sea-js/","permalink":"http://catx.me/tags/sea-js/","postCount":1},{"name":"测试","slug":"测试","path":"tags/测试/","permalink":"http://catx.me/tags/测试/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"76ef36b88224399d9774ed87583d890f07cfe045","prev":{"title":"The Making Of Sarcasm (1) - Design Goals And Grammar","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>This is not a tutorial on how to use <a href=\"https://irony.codeplex.com/\" target=\"_blank\" rel=\"external\">Irony.net</a>. When I am done with this series of articles, hopefully we will never need to deal with Irony directly ever again.</p>\n<p>In case you didn’t know what Irony is, here is the introduction on its official site:</p>\n<blockquote>\n<p><strong>Irony</strong> is a development kit for implementing languages on .NET platform. Unlike most existing yacc/lex-style solutions Irony does not employ any scanner or parser code generation from grammar specifications written in a specialized meta-language. In Irony the target language grammar is coded directly in c# using operator overloading to express grammar constructs. Irony’s scanner and parser modules use the grammar encoded as c# class to control the parsing process.</p>\n</blockquote>\n<p>Looks fantastic. However, after I tried for days to implement CoffeeScript grammar with it, I encountered some issues:</p>\n<ul>\n<li>While constructing grammar with C# directly sounds cool, the syntax is just not as clean and efficient as a special design DSL would be.</li>\n<li>There are absolutely no compile-time checking on grammar. You have to compile it into dll first, then load it with Irony.GrammarExplorer.</li>\n<li>It is extremely hard, if not impossible, to track any grammar errors back to source code.</li>\n<li>On top of that, debug information on Shift-Reduce and Reduce-Reduce conflict is almost unreadable for a complex grammar.</li>\n</ul>\n<p>It’s a nice concept with poor tooling, which makes it scale poorly as the complexity of grammar grows. After some painstaking efforts to make my CoffeeScript parser to work, I finally begin to do something about it. I decide to create:</p>\n<blockquote>\n<p><strong>Sarcasm</strong>, an EBNF-like DSL that generates Irony.</p>\n</blockquote>\n<p>The design goals are to:</p>\n<ul>\n<li>Implement a DSL that allow developers to define grammar in a more clean and efficient syntax that looks very much like EBNF notation.</li>\n<li>Generate Irony grammar implementation (in C#) and a nice formatted grammar specification document (in MarkDown)</li>\n<li>Enable compile-time error checking and grammar validation</li>\n<li>Trace any errors back to the source code</li>\n<li>Improve the readability of debug information for grammar conflicts</li>\n<li>Provide necessary Visual Studio languages services, templates and tools</li>\n</ul>\n<h2 id=\"Sarcasm_Workflow\"><a href=\"#Sarcasm_Workflow\" class=\"headerlink\" title=\"Sarcasm Workflow\"></a>Sarcasm Workflow</h2><ol>\n<li>Developer writes grammar specification file (.sarc)</li>\n<li>Compiler checks for syntax error and generates both Irony grammar class (in C#) and spec docs (in MarkDown)</li>\n<li>VS continues build process</li>\n<li>If build failed, Sarcasm tools filters though all error messages, and map related errors back to specific tokens in .sarc file.</li>\n<li>If build succeeded,Sarcasm toolsloads the assembly and validates grammar.</li>\n<li>Sarcasm toolstranslates any grammar conflicts, errors into a readable format and trace back to specific rule in .sarc file.<br>The entire workflow should be seamlessly integrated with Visual Studio.</li>\n</ol>\n<h2 id=\"Sarcasm_Grammar\"><a href=\"#Sarcasm_Grammar\" class=\"headerlink\" title=\"Sarcasm Grammar\"></a>Sarcasm Grammar</h2><p>In a nutshell, the Sarcasm grammar is a hybrid of MakeDown and modified EBNF notation. Here’s a quick snippet:<span style=\"line-height: 1.5em;\"></span></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"header\"># H1</span></span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Block comment</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">// Single Line Comment</span><br><span class=\"line\"></span><br><span class=\"line\">// Directive</span><br><span class=\"line\">@class SarcasmGrammar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"header\">## H2</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Declarations</span><br><span class=\"line\">ID      = new IdentifierTerminal(\"ID\");</span><br><span class=\"line\">STRING  = new StringLiteral(\"STRING\", \"\\\"\", StringOptions.AllowsAllEscapes);</span><br><span class=\"line\"></span><br><span class=\"line\">// Production Rules</span><br><span class=\"line\">SimpleValue := STRING | ID;  </span><br><span class=\"line\"></span><br><span class=\"line\">// Repeat</span><br><span class=\"line\">Ids := ID&#123;&#125;;</span><br><span class=\"line\">Ids := ID*;</span><br><span class=\"line\">Ids := ID?;</span><br><span class=\"line\">Ids := ID+;</span><br><span class=\"line\"></span><br><span class=\"line\">// Repeat with delimiters</span><br><span class=\"line\">Ids := ID&#123;\",\"&#125;;</span><br><span class=\"line\">Ids := ID*(\".\");</span><br><span class=\"line\">Ids := ID+(\",\");</span><br><span class=\"line\"><span class=\"header\">### H3</span></span><br></pre></td></tr></table></figure>\n<p>As you can see, the grammar consists of:</p>\n<ul>\n<li>MarkDown headers (start with one or more <span style=\"text-decoration: underline;\">#</span>). Directly used for outlining.</li>\n<li>Comments (single line and block). All other text contents go into comments. MarkDown syntax can be used in comments.</li>\n<li>Directives (starting with <span style=\"text-decoration: underline;\">@)</span>. Configures compiler behaviors like generated class names.</li>\n<li>Declarations. Declare and initialize grammar terminals.</li>\n<li>Production rules. Specifies the grammar rules.<br>I won’t go into full details here. But you can see for yourself:</li>\n</ul>\n<p>Here is the <a href=\"https://gist.github.com/akfish/9167407#file-sarcasm-sarc\" target=\"_blank\" rel=\"external\">full grammar of Sarcasm writing in Sarcasm</a>.</p>\n<p>And here is the <a href=\"https://gist.github.com/akfish/9167407#file-sarcasm-md\" target=\"_blank\" rel=\"external\">MarkDownspecification documentation generated from that file</a></p>\n<p>While the<a href=\"https://github.com/akfish/Sarcasm\" target=\"_blank\" rel=\"external\">project</a>is still in early developing stage, the grammar is mostly completed. I should be able to bootstrap it in a day or two.</p>\n","date":"2014-02-24T20:13:46.000Z","path":"2014/02/25/the-making-of-sarcasm-1/","isDark":true,"featureColor":"#e46753","featureImage":"/image/stock/1.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#e46753","isDark":true,"contrast":3.3464676687814303},"Muted":{"color":"#676767","isDark":true,"contrast":5.656311837697813},"DarkVibrant":{"color":"#721f11","isDark":true,"contrast":11.305374415421051},"DarkMuted":{"color":"#393939","isDark":true,"contrast":15.601542416452443},"LightVibrant":{"color":"#e5826f","isDark":false,"contrast":2.7082115476623927},"LightMuted":{"color":"#a4a4a4","isDark":false,"contrast":2.4926545004666014}},"permalink":"http://catx.me/2014/02/25/the-making-of-sarcasm-1/","json":"data/posts/2014/02/25/the-making-of-sarcasm-1.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":4},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":4}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"next":{"title":"SAE中文关键字提取服务","content":"<p><img src=\"/images/ea44d54a8c5dfedd723e46cf537ac31ab84a791d.png\" alt=\"\"></p>\n<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>SAE提供了效果不错的<a href=\"http://sae.sina.com.cn/doc/python/segment.html\" target=\"_blank\" rel=\"external\">中文分词服务</a>，于是花了点时间做了个基于TF-IDF的关键字提取算法。</p>\n<p>语料库来自<a href=\"http://www.cncorpus.org/\" target=\"_blank\" rel=\"external\">语料库在线</a>。</p>\n<h2 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h2><p>在把一篇文章分词过后，要从中提取出最能代表文章主题的关键字，最young最simple的办法就是基于词频(TF, term frequency)：</p>\n<p>$$TF(t, d) = f(t, d)$$</p>\n<p>其中$t$为一个单词，$d$为文档，$f(t, d)$为这个单词在文档中出现的频率。</p>\n<p>这样带来的问题很显然，即使通过停止词干掉一些频率极高，但对内容毫无贡献的词汇（如“的、地、得”），依然无法排除某些本身频率就很高的词汇。<br>比如在天朝，“中国”一词在所有文章里都有很高的出现概率，但并不见得所有文章都和天朝相关。</p>\n<p>假如有一个语料库，包含了大量具有代表性的文章。如果一个词汇在这个语料库里大量出现，则认为这个词汇本身就是个高频词；<br>如果一个词汇在语料库里出现频率不高，但在一篇文章里频繁出现，显然这个词汇是这篇文章里特有的。<br>基于这个想法，就引入了IDF(inverse document frequency):<br><span>$$IDF(t, D) = log \\frac{N}{ 1 + \\|\\{d \\in D: t \\in D\\}\\| }$$</span><!-- Has MathJax --></p>\n<p>TF-IDF值，就能用来判断一个词汇是否是一篇文章里的关键字：</p>\n<p>$$ TFIDF = w(t) * TF(t, d) * IDF(t, D) $$</p>\n<p>这里加入了一个权重函数，按词性对词汇进行过滤：<br><span>$$w(t) = \\left\\{\n  \\begin{array}{l l}\n    0.8 & t\\ is\\ v.\\ or\\ n.\\\\\n    0.6 & t\\ is\\ adv.\\ or\\ adj.\\\\\n    0 & other\n  \\end{array} \\right.$$</span><!-- Has MathJax --></p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><a href=\"http://catx.me/seger-demo/\">Demo</a></li>\n</ul>\n<div id=\"badge-container-akfish-seger-demo-0b5e19\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-akfish-seger-demo-0b5e19\", \"akfish\", \"seger-demo\", \"0b5e19\", false);\n</script>\n\n<div id=\"badge-container-akfish-seger-b64d75\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-akfish-seger-b64d75\", \"akfish\", \"seger\", \"b64d75\", false);\n</script>\n\n<ul>\n<li><a href=\"https://github.com/akfish/seger-demo\" target=\"_blank\" rel=\"external\">GitHub - Seger Demo</a></li>\n<li><a href=\"https://github.com/akfish/seger\" target=\"_blank\" rel=\"external\">GitHub - Seger</a></li>\n</ul>\n","date":"2014-08-30T22:29:46.000Z","path":"2014/08/31/sae-chinese-keyword-extraction-service/","isDark":true,"featureColor":"#b66d48","featureImage":"/images/word.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#b66d48","isDark":true,"contrast":4.032235245651348},"Muted":{"color":"#846852","isDark":true,"contrast":5.253713678379464},"DarkVibrant":{"color":"#462a1c","isDark":true,"contrast":16.342879549491663},"DarkMuted":{"color":"#3b3435","isDark":true,"contrast":15.84737578931552},"LightMuted":{"color":"#a28c7e","isDark":true,"contrast":3.187235771086366}},"permalink":"http://catx.me/2014/08/31/sae-chinese-keyword-extraction-service/","actions":[{"name":"GitHub","link":"https://github.com/akfish/seger"},{"name":"Demo","link":"http://catx.me/seger-demo/","type":"primary"}],"json":"data/posts/2014/08/31/sae-chinese-keyword-extraction-service.json","tags":[{"name":"Algorithm","slug":"Algorithm","path":"tags/Algorithm/","permalink":"http://catx.me/tags/Algorithm/","postCount":2},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"NLP","slug":"NLP","path":"tags/NLP/","permalink":"http://catx.me/tags/NLP/","postCount":1},{"name":"SAE","slug":"SAE","path":"tags/SAE/","permalink":"http://catx.me/tags/SAE/","postCount":1}],"categories":[]}}