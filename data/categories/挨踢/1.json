{"category":"挨踢","isDark":false,"type":"category","path":"categories/挨踢/","json_base":"data/categories/挨踢/","json":"data/categories/挨踢/1.json","next":"data/categories/挨踢/2.json","current":1,"total":3,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2014/08/26/html5-sound-visualization-experiment-with-processingjs.json","path":"2014/08/26/html5-sound-visualization-experiment-with-processingjs/","data":{"title":"HTML5音频可视化试验","content":"<p><img src=\"/images/d36ba1d28266e9eea9e0bc73cf32b53557e2ed21.gif\" alt=\"\"></p>\n<p>上周末脑洞大开的想到能否完全用HTML5的Web Audio API实现一个吉他调音器，折腾过后这个主要的目标失败了，音频可视化的部分倒是相对完整，实现了音量、频谱图以及音高的可视化。</p>\n<h2 id=\"u97F3_u9AD8_u68C0_u6D4B_u7B97_u6CD5\"><a href=\"#u97F3_u9AD8_u68C0_u6D4B_u7B97_u6CD5\" class=\"headerlink\" title=\"音高检测算法\"></a>音高检测算法</h2><p>调音器的原理其实很简单，本质上就是音高检测算法(pitch detection algorithm)，实现的方式有很多<a href=\"http://strum.googlecode.com/svn/trunk/Research/Efficient%20Pitch%20Detection%20Techniques%20For%20Interactive%20Music.pdf\" target=\"_blank\" rel=\"external\">[1]</a>，时域方法和频域方法都有。</p>\n<p>乐音最基本的特征就是由一系列谐波组成，包含一个基本频率$f$，以及一系列基本频率的整数倍的子波$2f, 3f, 4f, …, nf$，基础频率$f$的值就是乐音的音调。</p>\n<p><img src=\"/images/f8919d6d536b1edcc0cfd78bbf6b1da1554330b1.png\" alt=\"\"></p>\n<p>所以一种简单的频域音高检测算法就是HPS(harmonic product spectrum)：</p>\n<p>$$Y(\\omega) = \\prod_{r = 1}^R|X(\\omega r)|$$<br>$$\\hat{Y} = \\max_{\\omega_i}{Y(\\omega_i)}$$</p>\n<p>其中$X$是音频在频域空间的向量表示（通常通过FFT得到），HPS就是求一个频率的$R$个整数数倍位置的信号强度的乘积，形成一个新的频谱图$Y$。</p>\n<p>谐波的基础频率就会在$Y$中形成波峰：</p>\n<p><img src=\"/images/5282b104e2e419c83c659f2507bdd849410f8093.png\" alt=\"\"></p>\n<p>这个方法的缺点很明显，高频信号由于已经没有多少谐波被采样，因此在高频并不可靠。不过对于音乐而言，这并不是问题，钢琴的最高音C8不过才4186.01Hz，而音乐文件的采样率普遍是kHz级别。</p>\n<h2 id=\"HTML5_Audio_API\"><a href=\"#HTML5_Audio_API\" class=\"headerlink\" title=\"HTML5 Audio API\"></a>HTML5 Audio API</h2><p>用Audio API做音频可视化至少会创建三个对象：<code>AudioContext</code>, <code>AudioSource</code>和<code>AnalyzerNode</code>。<br>前两者的作用很显然不用多说，<code>AnalyzerNode</code>提供实时的FFT数据。</p>\n<p>首先当然是创建一个<code>context</code>，绑定一个<code>analyzer</code>:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context = <span class=\"keyword\">new</span> AudioContext()</span><br><span class=\"line\">analyzer = context.createAnalyser()</span><br><span class=\"line\">analyzer.smoothingTimeConstant = <span class=\"number\">0.3</span></span><br><span class=\"line\">analyzer.fftSize = <span class=\"number\">2048</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>fftSize</code>指定把频域空间平均分成多少份.</p>\n<p>接着是创建<code>source</code>，可以是麦克风的输入：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.getUserMedia <span class=\"attribute\">audio</span>: <span class=\"literal\">true</span>, <span class=\"function\">(<span class=\"params\">(stream)</span> -&gt;</span></span><br><span class=\"line\">  source = context.createMediaStreamSource stream</span><br><span class=\"line\">  mic_stream = stream</span><br><span class=\"line\">  source.connect analyzer</span><br><span class=\"line\">  analyzer.connect context.destination</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log <span class=\"string\">\"Microphone open. Sample rate: <span class=\"subst\">#&#123;context.sampleRate&#125;</span> Hz\"</span></span><br><span class=\"line\">  ), <span class=\"function\"><span class=\"params\">(err)</span> -&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error <span class=\"string\">\"Fail to access microphone: <span class=\"subst\">#&#123;err&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>也可以是载入一个音频文件：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source = context.createBufferSource()</span><br><span class=\"line\"></span><br><span class=\"line\">source.connect analyzer</span><br><span class=\"line\">analyzer.connect context.destination</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">xhr.onload = <span class=\"function\">=&gt;</span></span><br><span class=\"line\">  context.decodeAudioData xhr.response, <span class=\"function\">(<span class=\"params\">(b)</span> -&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log <span class=\"string\">\"Audio loaded: <span class=\"subst\">#&#123;url&#125;</span>, Sample rate: <span class=\"subst\">#&#123;context.sampleRate&#125;</span>Hz\"</span></span><br><span class=\"line\">    source.buffer = b</span><br><span class=\"line\">    source.<span class=\"keyword\">loop</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    source.start <span class=\"number\">0.0</span></span><br><span class=\"line\">    ), <span class=\"function\"><span class=\"params\">(err)</span> -&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error <span class=\"string\">\"Fail to load audio: <span class=\"subst\">#&#123;url&#125;</span>\"</span></span><br><span class=\"line\">xhr.open <span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span></span><br><span class=\"line\">xhr.responseType = <span class=\"string\">'arraybuffer'</span></span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n<p>然后需要创建一个<code>ScriptProcessorNode</code>，和<code>analyzer</code>链接，这样在每帧数据可用时会执行前者的<code>onaudioprocess</code>，音频处理算法一般都放在这里：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node = context.createScriptProcessor <span class=\"number\">2048</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">node.onaudioprocess = <span class=\"function\">-&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">TODO:</span> process audio</span></span><br><span class=\"line\">node.connect context.destination</span><br><span class=\"line\">analyzer.connect node</span><br></pre></td></tr></table></figure>\n<p>读取FFT数据：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.onaudioprocess = <span class=\"function\">-&gt;</span></span><br><span class=\"line\">  n = analyzer.frequencyBinCount</span><br><span class=\"line\">  arr = <span class=\"keyword\">new</span> Uint8Array(n)</span><br><span class=\"line\">  analyzer.getByteFrequencyData arr</span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">TODO:</span> Draw</span></span><br></pre></td></tr></table></figure>\n<p>读出来的数组里包含了从低频到高频的强度，可以直接用于绘制频谱图，求和平均就是音量，也可以作为频域处理算法的输入。</p>\n<p>数组里元素$i$对应的频率为$f_i = \\frac{Sample Rate}{FFT Size} i$。</p>\n<p>在调音器这个应用中，最大的问题就是精度，Audio API里最大取值只能是<code>2048</code>，在48kHz采样率时，频率分辨率只能到23.43Hz。<br>这个精度是无法接受的，如$E4 = 329.628, F4 = 349.228$之间只相差了19.6Hz，完全无法区分。</p>\n<h2 id=\"u53EF_u89C6_u5316\"><a href=\"#u53EF_u89C6_u5316\" class=\"headerlink\" title=\"可视化\"></a>可视化</h2><p>在这个项目里尝试了下<a href=\"/processingjs.org/\">processing.js</a>，虽然API很清晰，但是绘图功能不足，没有原生的gradient，blur支持，只能人肉实现，于是性能一不小心就惨淡了。</p>\n<h2 id=\"u6E90_u7801\"><a href=\"#u6E90_u7801\" class=\"headerlink\" title=\"源码\"></a>源码</h2><ul>\n<li><a href=\"http://catx.me/not-a-tuner-yet\">Demo</a></li>\n</ul>\n<div id=\"badge-container-akfish-not-a-tuner-yet-a34a7d\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-akfish-not-a-tuner-yet-a34a7d\", \"akfish\", \"not-a-tuner-yet\", \"a34a7d\", false);\n</script>\n\n<p>建议使用Chrome打开，FireFox上性能很惨淡。</p>\n","date":"2014-08-26T01:06:16.000Z","path":"2014/08/26/html5-sound-visualization-experiment-with-processingjs/","isDark":true,"featureColor":"#146ca4","featureImage":"/images/sound-visualization-exp.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#146ca4","isDark":true,"contrast":5.665104928657267},"Muted":{"color":"#8db3c8","isDark":false,"contrast":2.230575663094013},"DarkVibrant":{"color":"#146498","isDark":true,"contrast":10.975361372213726},"DarkMuted":{"color":"#617784","isDark":true,"contrast":5.125568077118013},"LightVibrant":{"color":"#609bbd","isDark":true,"contrast":3.2074486961643944},"LightMuted":{"color":"#b5bfc6","isDark":false,"contrast":1.869572315096829}},"json":"data/posts/2014/08/26/html5-sound-visualization-experiment-with-processingjs.json","tags":[{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"Music","slug":"Music","path":"tags/Music/","permalink":"http://catx.me/tags/Music/","postCount":1},{"name":"Visualization","slug":"Visualization","path":"tags/Visualization/","permalink":"http://catx.me/tags/Visualization/","postCount":1},{"name":"processing.js","slug":"processing-js","path":"tags/processing-js/","permalink":"http://catx.me/tags/processing-js/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"fd43af0295c130096c4d8f137767624ca0cdae8e","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/08/11/china-weather-radar-crawler.json","path":"2014/08/11/china-weather-radar-crawler/","data":{"title":"中国区气象雷达数据爬虫","content":"<p>作为一个数据控，爱好各种实时数据，比如中央气象台的<a href=\"http://www.nmc.gov.cn/publish/radar/stations-chongqing.htm\" target=\"_blank\" rel=\"external\">气象雷达</a>数据。最近在进行的一个HTML5项目，就是利用Canvas和WebGL，把外观土鳖的官方数据，变成洋气+实用的交互式地图。由于HTML5 Canvas CORS的限制，在没有服务器配合的情况下，无法跨域载入图片，然后<code>getImageData</code>，因此就做了一个爬虫。</p>\n<p>经过一番试验，发现国外的免费云服务只有GAE能够访问nmc.gov.cn，确定爬虫在GAE上安家了。大致计算了下数据量，全国167个雷达站，平均10分钟更新1帧，每帧是一幅约35KB的GIF图像，一天下来就至少800+M的数据，放GAE上不现实。同时前端也需要<code>.json</code>文件，描述雷达站信息以及数据帧列表，所以还需要数据库存储，而GAE坑爹的datastore quota，一天只能5w次读写，爬虫大概跑3圈就爆了。在这样一些约束下，最后脑洞大开的结合GitHub API，把数据全存到一个GitHub repository里，然后再把git tree拖回来当数据库用，解决问题。</p>\n<p>目前在GAE上部署了两个实例，分时运行，因为bandwidth quota大概只能支撑半天，然后每天删除repository重建一次，避免超过GitHub的quota。</p>\n<p>除了爬图片，地图叠加层的对其需要知道雷达站的坐标，以及数据的范围（即图片上的“数据范围：xxx km”），前者通过之前人肉爬到的一个包含全国雷达站坐标的xml文件解决问题。<br>至于数据范围没有找到官方的数据，最后写了一个简单的OCR算法直接从图片上识别。</p>\n<h2 id=\"u9644_u8BB0_uFF1A_u7528GitHub_API_u521B_u5EFAcommit_u6D41_u7A0B\"><a href=\"#u9644_u8BB0_uFF1A_u7528GitHub_API_u521B_u5EFAcommit_u6D41_u7A0B\" class=\"headerlink\" title=\"附记：用GitHub API创建commit流程\"></a>附记：用GitHub API创建commit流程</h2><p>GitHub提供了<a href=\"https://developer.github.com/v3/repos/contents/\" target=\"_blank\" rel=\"external\">Content API</a>，可以方便的对单个文件进行CRUD操作，每次操作产生1个commit。<br>如果需要一次commit多个文件（比如这个爬虫每次cron会新增数百文件），这样显然不实际。<br>更好的做法是通过<a href=\"https://developer.github.com/v3/git/\" target=\"_blank\" rel=\"external\">Git Data API</a>，模拟git创建一次commit的过程。<br>之前做git私有传输协议的经验立即发挥作，轻车熟路的解决，流程如下：</p>\n<ol>\n<li>用<a href=\"https://developer.github.com/v3/git/blobs/\" target=\"_blank\" rel=\"external\">Blob API</a>为每个文件创建一个blob</li>\n<li>用<a href=\"https://developer.github.com/v3/git/trees/\" target=\"_blank\" rel=\"external\">Tree API</a>为每个子文件夹创建一个tree，并添加其中文件对应的blob</li>\n<li>用<a href=\"https://developer.github.com/v3/git/commits/\" target=\"_blank\" rel=\"external\">Commit API</a>读出要commit分支最新的commit，以及commit对应的tree</li>\n<li>创建root tree，未改变的文件/文件夹需要原封不动的在tree里面保留，插入/替换新增的blob/tree</li>\n<li>创建commit，tree指向新的root tree，parent指向分支最新commit</li>\n<li>用<a href=\"https://developer.github.com/v3/git/refs/\" target=\"_blank\" rel=\"external\">Reference API</a>更新分支的ref，指向新创建的commit</li>\n</ol>\n<p>如果操作中断或重复操作，blob/tree都不会导致多余的数据产生（纯浪费上传带宽而已）。<br>因为git用SHA1 Digest作为所有git object的文件名，同内容的blob/tree不会重复。<br>需要注意一个例外，commit由于包含了时间戳，会重复创建。</p>\n<p>当然最好封装好的library，会省不少事。<br>比如我在这个项目里用到的python library是<a href=\"https://github.com/jacquev6/PyGithub\" target=\"_blank\" rel=\"external\">PyGitHub</a>，几个月前给这个项目发过pull request增加了些功能，比较熟悉用起来顺手。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li>源码: <a href=\"https://github.com/catx-weather/radar-bot\" target=\"_blank\" rel=\"external\">radar-bot</a></li>\n<li>爬到的数据：<a href=\"https://github.com/catx-weather/data\" target=\"_blank\" rel=\"external\">data</a></li>\n<li>OCR工具：<a href=\"https://github.com/catx-weather/frame-range-ocr\" target=\"_blank\" rel=\"external\">Frame Range OCR</a></li>\n</ul>\n","date":"2014-08-10T16:14:12.000Z","path":"2014/08/11/china-weather-radar-crawler/","isDark":false,"featureColor":"#caa084","featureImage":"/images/tornado.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#caa084","isDark":false,"contrast":2.3667779450941966},"Muted":{"color":"#785541","isDark":true,"contrast":9.562217921145681},"DarkVibrant":{"color":"#9c5c3d","isDark":true,"contrast":7.395012998220232},"DarkMuted":{"color":"#4b3a32","isDark":true,"contrast":15.322594218985449},"LightVibrant":{"color":"#d8bba5","isDark":false,"contrast":1.814844701319505},"LightMuted":{"color":"#dcd9d6","isDark":false,"contrast":1.4056903887271448}},"json":"data/posts/2014/08/11/china-weather-radar-crawler.json","tags":[{"name":"Crawler","slug":"Crawler","path":"tags/Crawler/","permalink":"http://catx.me/tags/Crawler/","postCount":1},{"name":"Fun","slug":"Fun","path":"tags/Fun/","permalink":"http://catx.me/tags/Fun/","postCount":2},{"name":"GAE","slug":"GAE","path":"tags/GAE/","permalink":"http://catx.me/tags/GAE/","postCount":1},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"Python","slug":"Python","path":"tags/Python/","permalink":"http://catx.me/tags/Python/","postCount":1},{"name":"Weather","slug":"Weather","path":"tags/Weather/","permalink":"http://catx.me/tags/Weather/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"782006404a88139474fb39bb6d391bdc181e5ead","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","data":{"title":"seajs-worker | 无缝&模块化的Web Worker开发","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Web Worker是HTML5标准增加的多线程方案，直接使用web worker的API开发是一件比较麻烦的事：</p>\n<ul>\n<li>Worker脚本必须放在单独的文件里（虽然可以用blob inline worker，但是IE10/11不支持，并且<a href=\"http://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\" target=\"_blank\" rel=\"external\">官方也没有修改的意思</a>）</li>\n<li>Worker和浏览器脚本需要通过message通信</li>\n<li>不利于模块化开发，不管是AMD还是CMD模块，都不能直接通过<code>importScripts</code>载入运行</li>\n</ul>\n<p>RequireJS<a href=\"/requirejs.org/docs/api.html#webworker\">支持web worker</a>，可以在worker脚本一开头<code>importScript(&#39;path/to/require.js&#39;)</code>，然后就愉快的一路AMD了（当然依然要message通信）。</p>\n<p>而我最近项目里在使用的sea.js不支持，为了解决这个问题，前几天陆续向sea.js发了几个<a href=\"https://github.com/seajs/seajs/pull/1279\" target=\"_blank\" rel=\"external\">pull request</a>，给sea.js增加了web worker支持。</p>\n<p>在变更被merge过后，更进一步的折腾了下，把web worker的API封装了一遍，写了seajs-worker这个插件，实现了真正无缝的开发。开发者不需要关心worker的创建、生命周期管理，也不需要通过消息通信，而是直接通过清晰的异步方法调用。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><a href=\"https://github.com/akfish/seajs-worker\" target=\"_blank\" rel=\"external\">GitHub Repo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/example/\">示例Demo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/doc/\">文档</a></li>\n<li><a href=\"http://catx.me/seajs-worker/tests/SpecRunner.html\">测试</a></li>\n</ul>\n<h2 id=\"u4F7F_u7528_u5B9E_u4F8B\"><a href=\"#u4F7F_u7528_u5B9E_u4F8B\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><p><a href=\"http://catx.me/seajs-worker/example/\">示例</a>源码在repo的的<a href=\"https://github.com/akfish/seajs-worker/tree/master/example\" target=\"_blank\" rel=\"external\">example</a>目录里可以找到。</p>\n<p>使用seajs-worker开发web worker只需要3步。</p>\n<h3 id=\"u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\"><a href=\"#u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\" class=\"headerlink\" title=\"第一步，配置sea.js:\"></a>第一步，配置sea.js:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"actionscript\"></span><br><span class=\"line\">  seajs.config(&#123;</span><br><span class=\"line\">    base: <span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  seajs.<span class=\"keyword\">use</span>(<span class=\"string\">'example/main'</span>);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\"><a href=\"#u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\" class=\"headerlink\" title=\"第二步，实现一个具体的worker类，继承自SeaWorker：\"></a>第二步，实现一个具体的worker类，继承自SeaWorker：</h3><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># image-worker.coffee</span></span><br><span class=\"line\">define (<span class=\"built_in\">require</span>, exports, <span class=\"built_in\">module</span>) -&gt;</span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span> <span class=\"string\">'../worker'</span></span><br><span class=\"line\">  <span class=\"comment\"># require other modules directly</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span> <span class=\"string\">'./image-util'</span></span><br><span class=\"line\">  <span class=\"comment\"># @nodoc</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageWorker</span> <span class=\"keyword\">extends</span> <span class=\"title\">SeaWorker</span></span></span><br><span class=\"line\">    <span class=\"property\">@worker_service</span> <span class=\"string\">'sepia'</span>, <span class=\"function\"><span class=\"params\">(src)</span> -&gt;</span></span><br><span class=\"line\">      src.each (p) -&gt;</span><br><span class=\"line\">        r = <span class=\"number\">0.393</span> * p.r + <span class=\"number\">0.769</span> * p.g + <span class=\"number\">0.189</span> * p.b</span><br><span class=\"line\">        g = <span class=\"number\">0.349</span> * p.r + <span class=\"number\">0.686</span> * p.g + <span class=\"number\">0.168</span> * p.b</span><br><span class=\"line\">        b = <span class=\"number\">0.272</span> * p.r + <span class=\"number\">0.534</span> * p.g + <span class=\"number\">0.131</span> * p.b</span><br><span class=\"line\">        src.setRGBA p.i, r, g, b, p.a</span><br><span class=\"line\">      <span class=\"keyword\">return</span> src</span><br><span class=\"line\"></span><br><span class=\"line\">  SeaWorker.register ImageWorker</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = ImageWorker</span><br></pre></td></tr></table></figure>\n<p>可以看到worker类就是一个普通CMD模块的写法，可以自由<code>require</code>其它模块，只要执行路径里没有调用到web worker不允许访问的API（比如DOM）就行。</p>\n<h3 id=\"u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\"><a href=\"#u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\" class=\"headerlink\" title=\"第三步，创建并调用worker。\"></a>第三步，创建并调用worker。</h3><p>创建：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Worker = <span class=\"built_in\">require</span> <span class=\"string\">'./image-worker'</span></span><br><span class=\"line\">worker = <span class=\"keyword\">new</span> Worker()</span><br></pre></td></tr></table></figure></p>\n<p>seajs-worker提供了两种调用方案。</p>\n<h4 id=\"u5355worker_u65B9_u6848_uFF1A\"><a href=\"#u5355worker_u65B9_u6848_uFF1A\" class=\"headerlink\" title=\"单worker方案：\"></a>单worker方案：</h4><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src, <span class=\"function\"><span class=\"params\">(err, result)</span> -&gt;</span></span><br><span class=\"line\">  ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，再也不需要自己去实现message通信，只需要一个简单的方法调用。返回值的方法除了以上callback的方式以外，如果seajs-worker检测到了<a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a>的存在，就会返回一个promise对象，此时就可以使用<a href=\"http://promisesaplus.com/\" target=\"_blank\" rel=\"external\">Promise/A+ Pattern</a>避免callback的嵌套：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (result) -&gt; ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"u591Aworker_u65B9_u6848\"><a href=\"#u591Aworker_u65B9_u6848\" class=\"headerlink\" title=\"多worker方案\"></a>多worker方案</h4><p>仅仅使用一个worker还不足以发挥多线程的威力，seajs-worker提供了<code>map-reduce</code>语法，一句话实现worker pool:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Divide image into segments</span></span><br><span class=\"line\">segs = [seg_1, seg_2, ..., seg_n]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Worker count</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Map-Reduce</span></span><br><span class=\"line\">Worker.map segs, <span class=\"string\">'sepia'</span>, n</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (dsts) -&gt;</span><br><span class=\"line\">    Worker.reduce dsts, <span class=\"function\">(<span class=\"params\">(ctx, s, i)</span> -&gt;</span></span><br><span class=\"line\">      ctx.putImageData s, <span class=\"number\">0</span>, i * step</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ctx</span><br><span class=\"line\">      ), dst_ctx</span><br></pre></td></tr></table></figure>\n<p>以上代码把图像分成若干块，放到一个<code>Array</code>里，然后通过<code>map</code>把每块交给一个worker进行处理，指定同时最多有10个worker进行操作。完成后传回一个<code>Array</code>，分别对应每块图像的处理结果，由<code>reduce</code>绘制到canvas上。</p>\n<p><a href=\"http://blogs.msdn.com/b/eternalcoding/archive/2012/09/20/using-web-workers-to-improve-performance-of-image-manipulation.aspx\" target=\"_blank\" rel=\"external\">这篇blog</a>用web worker API细线了同样的功能，对比起来代码的清晰程度显而易见。</p>\n<h2 id=\"JavaScript_u4E2D_u4F7F_u7528\"><a href=\"#JavaScript_u4E2D_u4F7F_u7528\" class=\"headerlink\" title=\"JavaScript中使用\"></a>JavaScript中使用</h2><p>seajs-worker为JavaScript开发者提供了几个helper方法，例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Require base</span></span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/sea/worker'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a derived class</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Derived = SeaWorker.extend(&#123;</span><br><span class=\"line\">    field: <span class=\"string\">'I am a field'</span>,</span><br><span class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// I'm a function exists in both worker and browser</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    constructor: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.n = n;</span><br><span class=\"line\">      <span class=\"comment\">// Call parent constructor if needed</span></span><br><span class=\"line\">      <span class=\"comment\">// this.__super(n);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker side methods</span></span><br><span class=\"line\">  Derived.inWorker(<span class=\"string\">\"methodInWorkerOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Browser side methods</span></span><br><span class=\"line\">  Derived.inBrowser(<span class=\"string\">\"methodInBrowserOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker service, running in worker, called from browser</span></span><br><span class=\"line\">  Derived.service(<span class=\"string\">\"foo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Register</span></span><br><span class=\"line\">  SeaWorker.register(Derived);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = Derived;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u9879_u76EE_u72B6_u6001\"><a href=\"#u9879_u76EE_u72B6_u6001\" class=\"headerlink\" title=\"项目状态\"></a>项目状态</h2><p>目前seajs-worker的所有代码均有文档、注释，并通过了单元测试。</p>\n<p><del>API语句针对CoffeeScript设计优化，用JavaScript调用暂时还不够优雅，接下来会改善这个问题。</del></p>\n","date":"2014-07-31T15:02:53.000Z","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","isDark":true,"featureColor":"#d33526","featureImage":"/image/stock/6.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d33526","isDark":true,"contrast":5.2283814901860834},"Muted":{"color":"#92aab3","isDark":false,"contrast":2.4353407534583575},"DarkVibrant":{"color":"#18505f","isDark":true,"contrast":14.789314061889451},"DarkMuted":{"color":"#597e88","isDark":true,"contrast":4.714101405216207},"LightVibrant":{"color":"#d16a62","isDark":true,"contrast":3.610959820667002},"LightMuted":{"color":"#b9ccd2","isDark":false,"contrast":1.6626245807608895}},"json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"sea.js","slug":"sea-js","path":"tags/sea-js/","permalink":"http://catx.me/tags/sea-js/","postCount":1},{"name":"测试","slug":"测试","path":"tags/测试/","permalink":"http://catx.me/tags/测试/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"5dfb6067c389fb6279996dd4422c202af63ffa91","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/05/02/bright-star-catalogue-convertor.json","path":"2014/05/02/bright-star-catalogue-convertor/","data":{"title":"BSC星表数据通用转换脚本","content":"<h2 id=\"u7B80_u4ECB\"><a href=\"#u7B80_u4ECB\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这两天开始用WebGL做一个星图App，需要处理各种星表数据。</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Bright_Star_Catalogue\" target=\"_blank\" rel=\"external\">Yale Bright Star Catalogue</a> (BSC, 亮星星表)包含了所有视星等6.5以上的恒星(9000+枚)，基本上就是人类狗眼能看到的所有恒星了。</p>\n<p>写了这个转换脚本，可以将星表数据转换为任意格式，只需要创建对应格式的underscore template就行了。</p>\n<h2 id=\"u4E0B_u8F7D\"><a href=\"#u4E0B_u8F7D\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>Markdown格式化后的BSC 5th Edition Readme: <a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc\" target=\"_blank\" rel=\"external\">Bright Star Catalogue, 5th Revised Ed. </a></p>\n<p>转换脚本: <a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc/convertor\" target=\"_blank\" rel=\"external\">Generic Convertor For Bright Star Catalogue</a></p>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>Node.Js</li>\n<li>在脚本目录中<code>npm install</code>如下包：<ul>\n<li>coffee-script</li>\n<li>async</li>\n<li>underscore</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc#file-summary\" target=\"_blank\" rel=\"external\">下载</a>星表数据文件，解压<code>bsc5.dat</code>和<code>notes</code>文件，放到和脚本相同目录</li>\n<li>和脚本一起的有一个简单的<code>json</code>模板(underscore template)，也可以根据需要自己创建，放到和脚本相同目录</li>\n</ul>\n<h2 id=\"u8FD0_u884C\"><a href=\"#u8FD0_u884C\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>命令格式:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ coffee convert template_file_name output_file_name</span><br></pre></td></tr></table></figure></p>\n<p>例:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ coffee convert json bsc5.json</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u521B_u5EFA_u6A21_u677F\"><a href=\"#u521B_u5EFA_u6A21_u677F\" class=\"headerlink\" title=\"创建模板\"></a>创建模板</h2><p>参考：</p>\n<ul>\n<li><a href=\"http://underscorejs.org/#template\" target=\"_blank\" rel=\"external\">underscore.js template</a></li>\n<li><a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc/convertor#writing-templates\" target=\"_blank\" rel=\"external\">Writing Templates</a></li>\n</ul>\n","date":"2014-05-02T02:43:38.000Z","path":"2014/05/02/bright-star-catalogue-convertor/","isDark":true,"featureColor":"#33497d","featureImage":"/images/image-of-VLT.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#33497d","isDark":true,"contrast":12.50823029052348},"Muted":{"color":"#50709f","isDark":true,"contrast":5.35501644398726},"DarkVibrant":{"color":"#2c3b66","isDark":true,"contrast":13.955292258112078},"DarkMuted":{"color":"#414255","isDark":true,"contrast":14.918029817688794},"LightMuted":{"color":"#a18f88","isDark":true,"contrast":3.088275078191694}},"json":"data/posts/2014/05/02/bright-star-catalogue-convertor.json","tags":[{"name":"Astronomy","slug":"Astronomy","path":"tags/Astronomy/","permalink":"http://catx.me/tags/Astronomy/","postCount":1},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"Node.Js","slug":"Node-Js","path":"tags/Node-Js/","permalink":"http://catx.me/tags/Node-Js/","postCount":3}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17},{"name":"天文","slug":"挨踢/天文","path":"categories/挨踢/天文/","permalink":"http://catx.me/categories/挨踢/天文/","postCount":1}]},"sha1":"31413a5de30b8408592048696e01d3576efde85a","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/20/beat-flappy-2048-with-q-learning.json","path":"2014/03/20/beat-flappy-2048-with-q-learning/","data":{"title":"Beat flappy 2048 with Q Learning","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>2048这游戏已经被玩坏了，有人把它和Flappy Bird杂交，玩不过不能忍，于是写了个AI玩之。</p>\n<h2 id=\"u6E38_u620F_u6E90_u7801_u4FEE_u6539\"><a href=\"#u6E38_u620F_u6E90_u7801_u4FEE_u6539\" class=\"headerlink\" title=\"游戏源码修改\"></a>游戏源码修改</h2><p>首先需要对游戏进行适当的修改，便于AI获取游戏状态，并输出控制量。</p>\n<p>修改<code>application.js</code>，将几个关键的对象放到<code>windows</code>命名空间中便于访问：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.input = KeyboardInputManager;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.actuator = HTMLActuator;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.score = LocalScoreManager;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.game = <span class=\"keyword\">new</span> GameManager(<span class=\"number\">4</span>, KeyboardInputManager, HTMLActuator, LocalScoreManager);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>游戏的逻辑主要在<code>game_manager.js</code>中实现：</p>\n<p>游戏中的“鸟”的css class是<code>tile-bird</code>，障碍物的css class是<code>tile-block</code>，在本文中分别简称为<code>bird</code>和<code>block</code>。</p>\n<ul>\n<li>使用<code>game.jump()</code>跳跃</li>\n<li>bird的状态：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>game.birdpos</code></td>\n<td>顶端的y坐标，$[0, 1]$之间，0为顶端</td>\n</tr>\n<tr>\n<td><code>game.birdspd</code></td>\n<td>y方向速度，向下为正</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在任意时刻，只有4个<code>block</code>分别称为<code>a</code>, <code>b</code>, <code>c</code>和<code>d</code>，<code>a</code>与<code>b</code>,<code>c</code>与<code>d</code>成组，有相同的水平坐标，两组<code>block</code>之间一直保持2个tile的距离。每组block只有3种可能状态：全在上、全在下以及一上一下，因此block的状态由两个0~2之间的数字<code>game.ab</code>, <code>game.cd</code>确定。</li>\n</ul>\n<p>游戏由一个timer驱动，每一帧计算游戏状态的变化，最后调用<code>window.actuator.actuate()</code>方法计算元素位置，重绘游戏。</p>\n<p>在游戏计算出元素位置并重绘后获取状态，并由AI注入控制量是最为便捷的方式。</p>\n<p>修改<code>html_actuator.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTMLActuator.prototype.actuate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">grid, metadata</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//.. Other stuff</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Call AI</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.AI.play(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样对原游戏的改动就完成了，接下来只需要实现AI类，并把类对象赋值到<code>window.AI</code>即可。</p>\n<h2 id=\"Q-Learning\"><a href=\"#Q-Learning\" class=\"headerlink\" title=\"Q-Learning\"></a>Q-Learning</h2><p>Q-Learning是一种强化学习算法，能用于寻找Markov决策过程(MDP, Markov decision process)的最优解。<br>MDP问题模型由一个agent，状态$S$以及每个状态对应动作(action)集合$A$构成。Agent通过完成一个动作，从一个状态$S$跳转到另一个状态$S’$，获得一定的奖励。Agent的目标就是使奖励最大化，通过学习在每个状态下最优的动作，达到这个目的。</p>\n<p>算法的核心是矩阵$Q$，记录状态-动作对的奖励：</p>\n<p>$$Q: S \\times A \\rightarrow \\mathbb{R}$$</p>\n<p>算法初始时，$Q$取设计好的值，随后agent每执行一次动作，观察新状态以及获得的奖励，通过如下公式迭代更新：</p>\n<span>$$Q_{t+1}(s_t, a_t) = Q_{t}(s_t, a_t) + \\alpha_{t}(s_t, a_t) \\times [ R_{t+1} + \\gamma \\max Q_{t}(s_{t+1}, a) - Q_{t}(s_t, a_t) ]$$</span><!-- Has MathJax -->\n<p>其中：</p>\n<ul>\n<li>$Q_{t+1}(s_t, a_t)$: 新的$Q$值</li>\n<li>$Q_{t}(s_t, a_t)$: 上一时刻$Q$值</li>\n<li>$R_{t+1}$: 在$s_t$时执行$a_t$后获得的奖励</li>\n<li>$\\alpha \\in [0, 1]$: learning rate</li>\n<li>$\\gamma$: 折扣率</li>\n</ul>\n<h2 id=\"u7B97_u6CD5_u8BBE_u8BA1\"><a href=\"#u7B97_u6CD5_u8BBE_u8BA1\" class=\"headerlink\" title=\"算法设计\"></a>算法设计</h2><ul>\n<li><p>状态：</p>\n<ul>\n<li>$\\Delta y$: <code>bird</code>到能安全通过当前<code>block</code>最高点的垂直距离</li>\n<li>$\\Delta x$: <code>bird</code>到下一个block的水平方向距离</li>\n</ul>\n</li>\n<li><p>动作：</p>\n<ul>\n<li><code>jump</code>: 跳跃</li>\n<li><code>idle</code>: 不动作</li>\n</ul>\n</li>\n<li><p>奖励：</p>\n<ul>\n<li>死亡：<code>-100</code></li>\n<li>存活：<code>1</code></li>\n</ul>\n</li>\n<li><p>$Q$的初始化</p>\n</li>\n</ul>\n<p>虽然可以简单的把$Q$全初始化为0，但这样会延长学习时间。并且在很多情况下，会导致<code>bird</code>一直跳跃直到跳出顶端掉不下来，这样不管是<code>jump</code>还是<code>idle</code>都会被惩罚，这样永远无法学习到正确行为。另外在底部也会有同样的问题。</p>\n<p>实际实现时，加入了先验知识：</p>\n<ul>\n<li>对所有$\\Delta y &lt; y_{min}$的$s$，初始化<code>jump</code>的reward为<code>-100</code>。即在上端时禁止跳跃</li>\n<li><p>对所有$\\Delta y &gt; n * BirdHeight$的$s$，初始化<code>idle</code>的reward为<code>-5</code>，<code>n</code>接近<code>1</code>。即离最高点的距离小于<code>bird</code>自己高度的时候，倾向于跳跃。注意这里的reward值较小，是因为在某些组合下（如当前<code>block</code>在下，下一个<code>block</code>在上），跳跃会挂掉，值如果过大，$Q$值无法及时对惩罚做出反馈。</p>\n</li>\n<li><p>不定状态时的随机参数</p>\n</li>\n</ul>\n<p>在<code>jump</code>和<code>action</code>的reward相等时，无法通过$Q$做出决策，这个时候需要随机决定采取何种行为。</p>\n<p>实际实现时，同样没有简单的将这个概率设为<code>0.5</code>，而是让不跳跃的概率远大于跳跃。道理很简单，游戏的操作方式是不平衡的，玩家只能干预下落，而不能干预上升，掉得太低跳一下就行了，跳得太高就只有等死。</p>\n<h2 id=\"u6548_u679C\"><a href=\"#u6548_u679C\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>目前实现的版本在未学习的情况下，可以一次跳跃到700+分，学习一小时后可以到1000分，到后面出错都是遇到比较极端的组合差之毫厘，重现概率不高，所以学习速度会变慢。</p>\n<p>玩：<a href=\"http://catx.me/Q-Learning-Flappy-2048/\">Q Learning Flappy 2048</a></p>\n<p>代码：<a href=\"https://github.com/akfish/Q-Learning-Flappy-2048\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n","date":"2014-03-20T10:53:10.000Z","path":"2014/03/20/beat-flappy-2048-with-q-learning/","isDark":false,"featureColor":"#e3c772","featureImage":"/images/43e55b43715494ac817795932fe4ab2c5b34268a.png","excerpt":"","featureSwatch":{"Vibrant":{"color":"#e3c772","isDark":false,"contrast":1.6563435380830245},"Muted":{"color":"#bcaca3","isDark":false,"contrast":2.194781298784433},"DarkVibrant":{"color":"#6e5815","isDark":true,"contrast":10.222616092326977},"LightVibrant":{"color":"#fcfcec","isDark":false,"contrast":1.0357850628347347},"LightMuted":{"color":"#cbc2b3","isDark":false,"contrast":1.7636756459902587}},"json":"data/posts/2014/03/20/beat-flappy-2048-with-q-learning.json","tags":[{"name":"AI","slug":"AI","path":"tags/AI/","permalink":"http://catx.me/tags/AI/","postCount":1},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"Fun","slug":"Fun","path":"tags/Fun/","permalink":"http://catx.me/tags/Fun/","postCount":2},{"name":"JavaScript","slug":"JavaScript","path":"tags/JavaScript/","permalink":"http://catx.me/tags/JavaScript/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"1773652c6283a283d3fc9bf85a20ad51fa436693","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/20/hexo-site-migration-theme.json","path":"2014/03/20/hexo-site-migration-theme/","data":{"title":"Hexo站点迁移主题","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>今天把博客从<code>blog.catx.me</code>迁移到了<code>catx.me</code>，并关闭了原来的wordpress博客，算是完成了迁移的工作。<br>由于在过渡期也有若干个项目引用了博客的URL，所以迁移最后需要解决的问题是改变域名过后的重定向。<br>重定向包括两个方面：</p>\n<ul>\n<li>通过原URL的访客不会死链，会自动跳转到新URL</li>\n<li>搜索引擎能自动重新索引，不会降低页面排名</li>\n</ul>\n<p>实现的原理就是在每个页面的<code>&lt;head&gt;</code>部分添加两个标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">http-equiv</span>=<span class=\"value\">\"refresh\"</span> <span class=\"attribute\">content</span>=<span class=\"value\">\"0; url=http://new.domain.com/same/relative/url/of/old/site/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"canonical\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://new.domain.com/same/relative/url/of/old/site/\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第一个是给人看的，第二个是给机器看的。</p>\n<p>前者会自动让浏览器跳转到新的域名，后者在搜索引擎的bot下次抓取页面的时候读取，重新索引到新的URL。</p>\n<p>对于较大的站点，人肉在每个页面的标签很是麻烦，于是做了一个hexo的主题来实现这样一个功能（当然也有其他方式，不过主题是最简单的）。这并不是一个真正的主题，因为没有任何内容会被访问者看到。这个主题唯一的用途就是生成一个结构完全相同的站点，把每个页面重定向到一个新的域名上。</p>\n<h2 id=\"u4F7F_u7528\"><a href=\"#u4F7F_u7528\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>以把在<code>blog.catx.me</code>上的站点迁移到<code>catx.me</code>上为例，创建repo、修改DNS、修改CNAME这些部署上的细节大同小异而又千变万化，不在此说明，过程如下：</p>\n<ul>\n<li>创建一个hexo博客文件夹的副本</li>\n<li>在副本文件夹中安装这个主题：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/akfish/hexo-theme-redirect.git themes/redirect</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改副本站点的<code>_config.yml</code>文件，使用主题：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: redirect</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改副本站点的<code>_config.yml</code>文件，添加如下行指定新域名：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_domain: catx.me</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改副本站点的部署配置，部署到<code>blog.catx.me</code>(老域名)</li>\n<li>修改原站点的部署配置，部署到<code>catx.me</code>(新域名)</li>\n</ul>\n<p>这样就完成了迁移工作，比如访问<a href=\"http://blog.catx.me\" target=\"_blank\" rel=\"external\">http://blog.catx.me</a>就会自动跳转到<a href=\"http://catx.me\">http://catx.me</a></p>\n<h2 id=\"u5176_u5B83\"><a href=\"#u5176_u5B83\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>如果你的站点部署在GitHub Pages上，老域名恰好在<code>yourname.github.io</code> repo的<code>CNAME</code>绑定过，那么你其它项目的GitHub Pages的URL也需要设置跳转。</p>\n<p>比如有个项目<code>foo</code>，原有的gh-pages地址就是<code>http://blog.catx.me/foo</code>，那么就可以在副本站点中运行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page foo</span><br></pre></td></tr></table></figure>\n<p>部署后就能实现跳转。需要注意的是，hexo生成的页面路径全是小写，如果服务器是区分大小写的，就需要手动在<code>source</code>里修改成正确的形式。</p>\n<h2 id=\"u6E90_u4EE3_u7801\"><a href=\"#u6E90_u4EE3_u7801\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://github.com/akfish/hexo-theme-redirect\" target=\"_blank\" rel=\"external\">hexo-theme-redirect</a></p>\n","date":"2014-03-19T16:02:33.000Z","path":"2014/03/20/hexo-site-migration-theme/","isDark":false,"featureColor":"#a99a48","featureImage":"/image/stock/7.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#a99a48","isDark":false,"contrast":2.8607233160176517},"Muted":{"color":"#b7ac6a","isDark":false,"contrast":2.3019786002998246},"DarkVibrant":{"color":"#8a7133","isDark":true,"contrast":4.70318580028283},"DarkMuted":{"color":"#534c37","isDark":true,"contrast":14.371837375676147},"LightVibrant":{"color":"#e4dcc3","isDark":false,"contrast":1.3703902496024831},"LightMuted":{"color":"#aba790","isDark":false,"contrast":2.4244396488445554}},"json":"data/posts/2014/03/20/hexo-site-migration-theme.json","tags":[{"name":"Hexo","slug":"Hexo","path":"tags/Hexo/","permalink":"http://catx.me/tags/Hexo/","postCount":3},{"name":"migiration","slug":"migiration","path":"tags/migiration/","permalink":"http://catx.me/tags/migiration/","postCount":1},{"name":"theme","slug":"theme","path":"tags/theme/","permalink":"http://catx.me/tags/theme/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"e57c64346dc6fbf3b16ff7e7c1c38d6b851b3d32","isDigest":true}],"sha1":"b1900eca57ff9804834a72776414d8fd29874e21"}