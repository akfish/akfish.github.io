{"year":2013,"isDark":false,"type":"archive","path":"archives/2013/","json_base":"data/archives/2013/","json":"data/archives/2013/1.json","current":1,"total":1,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2013/10/19/git-custom-transfer-protocol-1.json","path":"2013/10/19/git-custom-transfer-protocol-1/","data":{"title":"Git私有传输协议实现-接口篇(1)","content":"<p>Git默认支持http, https, ssh协议，同时也提供了扩展私有协议的方法，文档<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-remote-helpers.html\" target=\"_blank\" rel=\"external\">git-remote-helpers</a>给出了详细的spec。</p>\n<p>比如要实现一种协议，把git repository存储（可加密）到私人的email邮箱中，以存储一些不便于host到GitHub的私人repo，同时免去购买主机/服务器的成本和维护带来的麻烦，Repository的clone url格式定义为<code>mail://your@email.com:repo_name</code>。</p>\n<h2 id=\"u8C03_u7528\"><a href=\"#u8C03_u7528\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>使用git命令clone, 现在什么都没实现，所以理所当然的报错：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone mail://akfish@gmail.com:foo&#10;fatal: Unable to find remote helper for &#39;mail&#39;</span><br></pre></td></tr></table></figure></p>\n<p>根据文档的描述：</p>\n<blockquote>\n<p>When git encounters a URL of the form &lt;transport&gt;://&lt;address&gt;, where &lt;transport&gt; is a protocol that it cannot handle natively, it automatically invokes git remote-&lt;transport&gt; with the full URL as the second argument. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote.</p>\n</blockquote>\n<p>即git会把url中<code>mail://</code>映射到调用命令<code>git-remote-mail</code>，所以只需要用任何开发语言实现一个标准输入输出的命令行程序，满足文档中定义的命令格式，放在git能搜寻到的位置，就能让git支持私有协议（注意python在windows下存在stdout无法被重定向的问题，无法和git正确通信）。本例中用C#实现，创建控制台程序git-remote-mail：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">git_remote_mail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            Logger logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">\"git-remote-mail.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"args: \"</span> + String.Join(<span class=\"string\">\", \"</span>, args));</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次执行clone，错误提示消失，由于这个脚本什么事情也没做，所以当然也就什么都不会发生。stdin和stdout被用于与git通信，不会显示出来。如果需要输出消息，write到stderr，或者产生一个日志文件来记录，Logger类实现了相应的功能，具体代码见<a href=\"https://github.com/akfish/git-mail/blob/master/git-remote-mail/Logger.cs\" target=\"_blank\" rel=\"external\">Logger.cs</a>。执行clone命令后，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2013/10/20 22:07:02]Open log file git-remote-mail.txt&#10;[2013/10/20 22:07:02]args: origin, mail://akfish@gmail.com:foo&#10;[2013/10/20 22:07:02]Close log file</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，在调用的时候，还传入了两个参数：origin和mail://akfish@gmail.com:foo，根据文档：</p>\n<blockquote>\n<p>Remote helper programs are invoked with one or (optionally) two arguments. The first argument specifies a remote repository as in git; it is either the name of a configured remote or a URL. The second argument specifies a URL; it is usually of the form &lt;transport&gt;://&lt;address&gt;, but any arbitrary string is possible.</p>\n</blockquote>\n<p>参数的数量为1~2个，第一个参数为repo的名字或者url，第二个参数如果存在，为repo的url。</p>\n<h2 id=\"u547D_u4EE4_u6D41\"><a href=\"#u547D_u4EE4_u6D41\" class=\"headerlink\" title=\"命令流\"></a>命令流</h2><p>Git通过stdin向remote helper发送命令，一行一个，第一个命令总是<em>capabilities</em>。Remote helper需要通过stdout返回支持的capabilities，每行一个，以空行结束。Capabilities代表helper支持哪些命令子集，如fetch需要支持<em>connect, fetch, import</em>，详细的列表在文档里有列出。</p>\n<p>命令流通常以空行结束，但在某些情况下空行后会跟着其它协议的payload（如pack），具体参见command的具体说明。要注意的是命令流用的是linux-style line ending，即以<em>\\n</em>结尾，如果使用<em>Console.WriteLine</em>产生的是DOS line ending（<em>\\r\\n</em>），则不能正确工作。<em>\n</em></p>\n<p>增加代码响应capabilities命令：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//.... </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    Logger logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">\"git-remote-mail.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.Log(<span class=\"string\">\"args: \"</span> + String.Join(<span class=\"string\">\", \"</span>, args));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> line;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exitCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        line = Console.ReadLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.Log(<span class=\"string\">\"&amp;gt;&amp;gt;\"</span> + line);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(line))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"Command stream terminated\"</span>);</span><br><span class=\"line\">            exitCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (line.StartsWith(<span class=\"string\">\"capabilities\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"connect\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"fetch\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"import\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"&amp;lt;&amp;lt;connect, fetch, import\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"Unhandled command. Exit\"</span>);</span><br><span class=\"line\">            exitCode = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.Dispose();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exitCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2013/10/20 22:28:53]Open log file git-remote-mail.txt&#10;[2013/10/20 22:28:53]args: origin, mail://akfish@gmail.com:foo&#10;[2013/10/20 22:28:53]&#38;gt;&#38;gt;capabilities&#10;[2013/10/20 22:28:53]&#38;lt;&#38;lt;connect, fetch, import&#10;[2013/10/20 22:28:53]&#38;gt;&#38;gt;connect git-upload-pack&#10;[2013/10/20 22:28:53]Unhandled command. Exit&#10;[2013/10/20 22:28:53]Close log file</span><br></pre></td></tr></table></figure>\n<p>表明命令流已经成功初始化，git继续发出connect命令开始clone的工作。</p>\n<p>接口部分就这么简单，接下来的工作就是根据文档的描述，响应具体的命令，完成协议的具体设计。</p>\n<h2 id=\"u66F4_u591A_u53C2_u8003_u8D44_u6599\"><a href=\"#u66F4_u591A_u53C2_u8003_u8D44_u6599\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><p>Git的repo中包含了大量文档，都是很好的参考资料</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/git/git&#10;$ cd git/Documentation&#10;$ grep -nRHI &#34;receive-pack&#34; *</span><br></pre></td></tr></table></figure>\n<p>会给出这些文档：</p>\n<ul>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/http-protocol.txt\" target=\"_blank\" rel=\"external\">http-protocol</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-heuristics.txt\" target=\"_blank\" rel=\"external\">pack-heuristics</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt\" target=\"_blank\" rel=\"external\">pack-protocol</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/protocol-capabilities.txt\" target=\"_blank\" rel=\"external\">protocol capabilities</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/send-pack-pipeline.txt\" target=\"_blank\" rel=\"external\"><code>send-pack</code> pipeline</a></li>\n</ul>\n<p>以下文档是相关的后端命令，作为补充：</p>\n<ul>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-http-backend.txt\" target=\"_blank\" rel=\"external\"><code>git-http-backend</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-receive-pack.txt\" target=\"_blank\" rel=\"external\"><code>git-receive-pack</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-remote-ext.txt\" target=\"_blank\" rel=\"external\"><code>git-remote-ext</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-send-pack.txt\" target=\"_blank\" rel=\"external\"><code>git-send-pack</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/gitremote-helpers.txt\" target=\"_blank\" rel=\"external\"><code>git-remote-helpers</code></a></li>\n</ul>\n<p>查看源代码中与传输协议相关的commit：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/git/git&#10;$ cd git&#10;$ git log -Stransfer</span><br></pre></td></tr></table></figure>\n<p>可以参见以下commits：</p>\n<ul>\n<li><a href=\"http://github.com/git/git/commit/4bc444eb64173f770c1d1dba2ed3db393c2a9b18\" target=\"_blank\" rel=\"external\">commit 4bc444</a> (Support FTP-over-SSL/TLS for regular FTP)</li>\n<li><a href=\"https://github.com/git/git/commit/daebaa78137d59693a808c1f0bdec0ecb40fc12e\" target=\"_blank\" rel=\"external\">commit daebaa</a> (upload/receive-pack: allow hiding ref hierarchies )</li>\n<li><a href=\"http://github.com/git/git/commit/745f7a8cacae55df3e00507344d8db2a31eb57e8\" target=\"_blank\" rel=\"external\">commit 745f7a</a> (fetch-pack: move core code to libgit.a)</li>\n<li><a href=\"http://github.com/git/git/commit/fe0435011cfc5f0c15bbd4548ce0015f5b8ad430\" target=\"_blank\" rel=\"external\">commit fe0435</a> (Add persistent-https to contrib)<br>&nbsp;</li>\n</ul>\n","date":"2013-10-19T10:47:12.000Z","path":"2013/10/19/git-custom-transfer-protocol-1/","isDark":true,"featureColor":"#2f5a75","featureImage":"/image/stock/2.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2f5a75","isDark":true,"contrast":12.293085300100254},"Muted":{"color":"#64767c","isDark":true,"contrast":5.234975288978602},"DarkVibrant":{"color":"#1f4b68","isDark":true,"contrast":13.414009026295917},"DarkMuted":{"color":"#477084","isDark":true,"contrast":5.611238656641319},"LightVibrant":{"color":"#ecdabf","isDark":false,"contrast":1.3683052639522741},"LightMuted":{"color":"#95b1b5","isDark":false,"contrast":2.274202152883682}},"json":"data/posts/2013/10/19/git-custom-transfer-protocol-1.json","tags":[{"name":"git","slug":"git","path":"tags/git/","permalink":"http://catx.me/tags/git/","postCount":2},{"name":"gmail","slug":"gmail","path":"tags/gmail/","permalink":"http://catx.me/tags/gmail/","postCount":1},{"name":"python","slug":"python","path":"tags/python/","permalink":"http://catx.me/tags/python/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"ff995da356b75b14ddb570a7230b12d82993aaf2","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2013/10/04/emacs-coffee-script-auto-complete.json","path":"2013/10/04/emacs-coffee-script-auto-complete/","data":{"title":"CoffeeScript Emacs自动完成插件","content":"<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2013/10/snapshoot.png\"><img src=\"/images/01c744b804dc7bc0fa68a56cca0d50206b090e62.png\" alt=\"ac-coffee-snapshot\"></a> Emacs CoffeeScript自动完成</p>\n<p>最近几个前端相关的应用，都用到了CoffeeScript。发现Emacs没有CoffeeScript的auto complete source，效率上略拖后腿，参考Emacs Auto Complete的<a href=\"http://cx4a.org/software/auto-complete/manual.html#Extend\" target=\"_blank\" rel=\"external\">文档</a>，自己写了一个。</p>\n<p>目前这个版本只是简单的基于<a href=\"http://coffeescript.org/documentation/docs/lexer.html\" target=\"_blank\" rel=\"external\">Lexer</a>，列出了所有identifier的名称，scope的信息是完全没有的，基本上够用。在后续的维护中，会基于<a href=\"http://coffeescript.org/documentation/docs/grammar.html\" target=\"_blank\" rel=\"external\">Grammar</a>，增加更多的feature。</p>\n<p>下载和安装说明都在Github上：<a href=\"http://project.catx.me/ac-coffee/\" target=\"_blank\" rel=\"external\">ac-coffee</a></p>\n","date":"2013-10-03T23:59:05.000Z","path":"2013/10/04/emacs-coffee-script-auto-complete/","isDark":true,"featureColor":"#947444","featureImage":"/image/stock/4.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#947444","isDark":true,"contrast":4.38675255709906},"Muted":{"color":"#8b704c","isDark":true,"contrast":4.720403801183811},"DarkVibrant":{"color":"#2c2214","isDark":true,"contrast":17.310047977134303},"DarkMuted":{"color":"#3e3121","isDark":true,"contrast":16.064607088557274},"LightVibrant":{"color":"#dcac74","isDark":false,"contrast":2.059564738834789}},"json":"data/posts/2013/10/04/emacs-coffee-script-auto-complete.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":9},{"name":"Emacs","slug":"Emacs","path":"tags/Emacs/","permalink":"http://catx.me/tags/Emacs/","postCount":1},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"Lisp","slug":"Lisp","path":"tags/Lisp/","permalink":"http://catx.me/tags/Lisp/","postCount":1},{"name":"工具","slug":"工具","path":"tags/工具/","permalink":"http://catx.me/tags/工具/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"b48841de0d3d2d2a5e4659703feae4334af179d3","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2013/09/30/douban-fm-api.json","path":"2013/09/30/douban-fm-api/","data":{"title":"豆瓣电台API分析","content":"<p>前几天看到命令行版的电台<a href=\"http://cmd.fm\" target=\"_blank\" rel=\"external\">cmd.fm</a>，表示键盘党最爱。<br>可惜音乐都是来自sound cloud，大天朝的重口味和网速各种水土不服，于是首先想到的就是要山寨个用豆瓣电台音乐的版本。<br>豆瓣毫无悬念的没有公开API，不过这个完全不影响抓包分析，完整的文档放在GitHub <a href=\"https://github.com/akfish/fm-terminal/blob/develop/douban-fm-api.md\" target=\"_blank\" rel=\"external\">Douban FM API Documentation</a>。</p>\n<p>现在已经用这个API做了一个命令行风格豆瓣电台的Chrome插件，<a href=\"http://fm.catx.me\" target=\"_blank\" rel=\"external\">FM Terminal</a>。</p>\n<p>所有的音乐都是防盗链的，所以Web应用的可能性不大。略诡异的是放出红心的概率比较低，不像官方版的那么容易陷入红心无法自拔。</p>\n<p>其中比较有意思的是两点，一是广告很容易和其它普通、二逼或者文艺的音乐区分开来。<br>另一个是豆瓣<a href=\"https://github.com/akfish/fm-terminal/blob/develop/douban-fm-api.md#discussion-of-history-parameter\" target=\"_blank\" rel=\"external\">追踪用户播放行为的方式</a>，正常播放完成的音乐豆瓣不关心，只对加红心、丢垃圾桶和跳过这样的“异常”行为感兴趣。传回去的记录是时序的，说明后台的算法应该是和时序有关的。</p>\n<p>不过我只想说，敢不敢让广告也能加心拖垃圾桶，挖掘下用户爱看神马广告。</p>\n<p>&nbsp;</p>\n","date":"2013-09-30T03:27:48.000Z","path":"2013/09/30/douban-fm-api/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2013/09/30/douban-fm-api.json","tags":[{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":9},{"name":"前端","slug":"前端","path":"tags/前端/","permalink":"http://catx.me/tags/前端/","postCount":2},{"name":"豆瓣","slug":"豆瓣","path":"tags/豆瓣/","permalink":"http://catx.me/tags/豆瓣/","postCount":1},{"name":"逆向","slug":"逆向","path":"tags/逆向/","permalink":"http://catx.me/tags/逆向/","postCount":1},{"name":"音乐","slug":"音乐","path":"tags/音乐/","permalink":"http://catx.me/tags/音乐/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"7838c01ac683b065efd9d6a5b65c83b6fb2b80d3","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2013/02/05/cuda5-visual-studio-2012-fix.json","path":"2013/02/05/cuda5-visual-studio-2012-fix/","data":{"title":"GPU并行编程CUDA5.0+Visual Studio 2012环境配置","content":"<h1 id=\"u95EE_u9898\"><a href=\"#u95EE_u9898\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>CUDA5.0并不支持Visual Studio 2012的v110 toolchain，所以在安装后尝试编译，会先后遇到如下的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc : fatal error : &#39;-ccbin&#39;: expected a number&#10;**nvcc fatal : nvcc cannot find a supported cl version. Only MSVC 8.0 and MSVC 9.0 are supported**</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"u89E3_u51B3_u65B9_u6848_uFF1A\"><a href=\"#u89E3_u51B3_u65B9_u6848_uFF1A\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h1><h2 id=\"1-_u90E8_u7F72/_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6\"><a href=\"#1-_u90E8_u7F72/_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6\" class=\"headerlink\" title=\"1.部署/修改配置文件\"></a>1.部署/修改配置文件</h2><p>在C\\:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V110\\BuildCustomizations文件夹中是MSBuild要完成编译的自定义配置文件，需要手动部署（拷贝）到C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V110\\BuildCustomizations文件夹下。本文中路径为Win7 64bit默认安装后的路径，根据自己的安装情况调整。</p>\n<p>在这之前需要修改如下文件：</p>\n<p><strong>CUDA5.0.props中</strong></p>\n<p>找到如下行：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;CudaClVersion Condition=\"'$(PlatformToolset)' == 'v90'\"&amp;gt;2008&amp;lt;/CudaClVersion&amp;gt;</span><br><span class=\"line\">&amp;lt;CudaClVersion Condition=\"'$(PlatformToolset)' == 'v100'\"&amp;gt;2010&amp;lt;/CudaClVersion&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;CudaClVersion Condition=\"'$(PlatformToolset)' == 'v110'\"&amp;gt;2010&amp;lt;/CudaClVersion&amp;gt;</span><br></pre></td></tr></table></figure>\n<p><strong>CUDA 5.0.targets中</strong></p>\n<p>找到CudaCleanDependsOn标签，改为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;CudaCleanDependsOn&amp;gt;</span><br><span class=\"line\">  $(CudaCompileDependsOn);</span><br><span class=\"line\">  _SelectedFiles;</span><br><span class=\"line\">  CudaFilterSelectedFiles;</span><br><span class=\"line\">  AddCudaCompileMetadata;</span><br><span class=\"line\">  AddCudaLinkMetadata;</span><br><span class=\"line\">  AddCudaCompileDeps;</span><br><span class=\"line\">  AddCudaCompilePropsDeps;</span><br><span class=\"line\">  ValidateCudaBuild;</span><br><span class=\"line\">  ValidateCudaCodeGeneration;</span><br><span class=\"line\">  ComputeCudaCompileOutput;</span><br><span class=\"line\">  PrepareForCudaBuild</span><br><span class=\"line\">&amp;lt;/CudaCleanDependsOn&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>找到GenerateRelocatableDeviceCode，改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GenerateRelocatableDeviceCode=\"%(CudaCompile.GenerateRelocatableDeviceCode)\"</span><br></pre></td></tr></table></figure>\n<p>找到CodeGeneration，改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CodeGeneration=\"%(CudaCompile.CodeGenerationValues)\"</span><br></pre></td></tr></table></figure>\n<p>找到CommandLineTemplate，改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandLineTemplate=\"\"$(CudaToolkitNvccPath)\" %(CudaCompile.BuildCommandLineTemplate) %(CudaCompile.ApiCommandLineTemplate) %(CudaCompile.CleanCommandLineTemplate)\" /&amp;gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-__u4FEE_u6539_u5934_u6587_u4EF6\"><a href=\"#2-__u4FEE_u6539_u5934_u6587_u4EF6\" class=\"headerlink\" title=\"2. 修改头文件\"></a>2. 修改头文件</h2><p>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v5.0\\include文件夹中，host_config.h文件。</p>\n<p>找到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> _MSC_VER &amp;lt; <span class=\"number\">1400</span> || _MSC_VER &amp;gt; <span class=\"number\">1600</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">error</span> -- unsupported MSVC version! Only MSVC <span class=\"number\">8.0</span>, <span class=\"number\">9.0</span>, and <span class=\"number\">10.0</span> are supported!</span></span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> _MSC_VER &amp;lt; <span class=\"number\">1400</span> || _MSC_VER &amp;gt; <span class=\"number\">1700</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">error</span> -- unsupported MSVC version! Only MSVC <span class=\"number\">8.0</span>, <span class=\"number\">9.0</span>, and <span class=\"number\">10.0</span> are supported!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-__u8BED_u6CD5_u9AD8_u4EAE_u652F_u6301\"><a href=\"#3-__u8BED_u6CD5_u9AD8_u4EAE_u652F_u6301\" class=\"headerlink\" title=\"3. 语法高亮支持\"></a>3. 语法高亮支持</h2><ol>\n<li>菜单“Tools-&gt;Options…”，展开左侧“Text Editor”，点击“File Extension”.</li>\n<li>在“Extension”框中输入“cu”, 选择“Microsoft Visual C++”，点击“Add”，捅“OK”。</li>\n<li>重新打开文件</li>\n</ol>\n<p>## </p>\n","date":"2013-02-05T03:37:57.000Z","path":"2013/02/05/cuda5-visual-studio-2012-fix/","isDark":true,"featureColor":"#947444","featureImage":"/image/stock/4.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#947444","isDark":true,"contrast":4.38675255709906},"Muted":{"color":"#8b704c","isDark":true,"contrast":4.720403801183811},"DarkVibrant":{"color":"#2c2214","isDark":true,"contrast":17.310047977134303},"DarkMuted":{"color":"#3e3121","isDark":true,"contrast":16.064607088557274},"LightVibrant":{"color":"#dcac74","isDark":false,"contrast":2.059564738834789}},"json":"data/posts/2013/02/05/cuda5-visual-studio-2012-fix.json","tags":[{"name":"CUDA","slug":"CUDA","path":"tags/CUDA/","permalink":"http://catx.me/tags/CUDA/","postCount":1},{"name":"GPU","slug":"GPU","path":"tags/GPU/","permalink":"http://catx.me/tags/GPU/","postCount":1},{"name":"Visual Studio 2012","slug":"Visual-Studio-2012","path":"tags/Visual-Studio-2012/","permalink":"http://catx.me/tags/Visual-Studio-2012/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"39ec1ac0fa60b1476d4dc20d9d1ac52eb6cdc4fe","isDigest":true}],"sha1":"dc62d8b8d49237b2b0ebcef63673b21a2895e1cb"}