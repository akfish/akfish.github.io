{"tag":"Music","isDark":false,"type":"tag","path":"tags/Music/","json_base":"data/tags/Music/","json":"data/tags/Music/1.json","current":1,"total":1,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2014/08/26/html5-sound-visualization-experiment-with-processingjs.json","path":"2014/08/26/html5-sound-visualization-experiment-with-processingjs/","data":{"title":"HTML5音频可视化试验","content":"<p><img src=\"/images/d36ba1d28266e9eea9e0bc73cf32b53557e2ed21.gif\" alt=\"\"></p>\n<p>上周末脑洞大开的想到能否完全用HTML5的Web Audio API实现一个吉他调音器，折腾过后这个主要的目标失败了，音频可视化的部分倒是相对完整，实现了音量、频谱图以及音高的可视化。</p>\n<h2 id=\"u97F3_u9AD8_u68C0_u6D4B_u7B97_u6CD5\"><a href=\"#u97F3_u9AD8_u68C0_u6D4B_u7B97_u6CD5\" class=\"headerlink\" title=\"音高检测算法\"></a>音高检测算法</h2><p>调音器的原理其实很简单，本质上就是音高检测算法(pitch detection algorithm)，实现的方式有很多<a href=\"http://strum.googlecode.com/svn/trunk/Research/Efficient%20Pitch%20Detection%20Techniques%20For%20Interactive%20Music.pdf\" target=\"_blank\" rel=\"external\">[1]</a>，时域方法和频域方法都有。</p>\n<p>乐音最基本的特征就是由一系列谐波组成，包含一个基本频率$f$，以及一系列基本频率的整数倍的子波$2f, 3f, 4f, …, nf$，基础频率$f$的值就是乐音的音调。</p>\n<p><img src=\"/images/f8919d6d536b1edcc0cfd78bbf6b1da1554330b1.png\" alt=\"\"></p>\n<p>所以一种简单的频域音高检测算法就是HPS(harmonic product spectrum)：</p>\n<p>$$Y(\\omega) = \\prod_{r = 1}^R|X(\\omega r)|$$<br>$$\\hat{Y} = \\max_{\\omega_i}{Y(\\omega_i)}$$</p>\n<p>其中$X$是音频在频域空间的向量表示（通常通过FFT得到），HPS就是求一个频率的$R$个整数数倍位置的信号强度的乘积，形成一个新的频谱图$Y$。</p>\n<p>谐波的基础频率就会在$Y$中形成波峰：</p>\n<p><img src=\"/images/5282b104e2e419c83c659f2507bdd849410f8093.png\" alt=\"\"></p>\n<p>这个方法的缺点很明显，高频信号由于已经没有多少谐波被采样，因此在高频并不可靠。不过对于音乐而言，这并不是问题，钢琴的最高音C8不过才4186.01Hz，而音乐文件的采样率普遍是kHz级别。</p>\n<h2 id=\"HTML5_Audio_API\"><a href=\"#HTML5_Audio_API\" class=\"headerlink\" title=\"HTML5 Audio API\"></a>HTML5 Audio API</h2><p>用Audio API做音频可视化至少会创建三个对象：<code>AudioContext</code>, <code>AudioSource</code>和<code>AnalyzerNode</code>。<br>前两者的作用很显然不用多说，<code>AnalyzerNode</code>提供实时的FFT数据。</p>\n<p>首先当然是创建一个<code>context</code>，绑定一个<code>analyzer</code>:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context = <span class=\"keyword\">new</span> AudioContext()</span><br><span class=\"line\">analyzer = context.createAnalyser()</span><br><span class=\"line\">analyzer.smoothingTimeConstant = <span class=\"number\">0.3</span></span><br><span class=\"line\">analyzer.fftSize = <span class=\"number\">2048</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>fftSize</code>指定把频域空间平均分成多少份.</p>\n<p>接着是创建<code>source</code>，可以是麦克风的输入：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.getUserMedia <span class=\"attribute\">audio</span>: <span class=\"literal\">true</span>, <span class=\"function\">(<span class=\"params\">(stream)</span> -&gt;</span></span><br><span class=\"line\">  source = context.createMediaStreamSource stream</span><br><span class=\"line\">  mic_stream = stream</span><br><span class=\"line\">  source.connect analyzer</span><br><span class=\"line\">  analyzer.connect context.destination</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log <span class=\"string\">\"Microphone open. Sample rate: <span class=\"subst\">#&#123;context.sampleRate&#125;</span> Hz\"</span></span><br><span class=\"line\">  ), <span class=\"function\"><span class=\"params\">(err)</span> -&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error <span class=\"string\">\"Fail to access microphone: <span class=\"subst\">#&#123;err&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>也可以是载入一个音频文件：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source = context.createBufferSource()</span><br><span class=\"line\"></span><br><span class=\"line\">source.connect analyzer</span><br><span class=\"line\">analyzer.connect context.destination</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">xhr.onload = <span class=\"function\">=&gt;</span></span><br><span class=\"line\">  context.decodeAudioData xhr.response, <span class=\"function\">(<span class=\"params\">(b)</span> -&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log <span class=\"string\">\"Audio loaded: <span class=\"subst\">#&#123;url&#125;</span>, Sample rate: <span class=\"subst\">#&#123;context.sampleRate&#125;</span>Hz\"</span></span><br><span class=\"line\">    source.buffer = b</span><br><span class=\"line\">    source.<span class=\"keyword\">loop</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    source.start <span class=\"number\">0.0</span></span><br><span class=\"line\">    ), <span class=\"function\"><span class=\"params\">(err)</span> -&gt;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error <span class=\"string\">\"Fail to load audio: <span class=\"subst\">#&#123;url&#125;</span>\"</span></span><br><span class=\"line\">xhr.open <span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span></span><br><span class=\"line\">xhr.responseType = <span class=\"string\">'arraybuffer'</span></span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n<p>然后需要创建一个<code>ScriptProcessorNode</code>，和<code>analyzer</code>链接，这样在每帧数据可用时会执行前者的<code>onaudioprocess</code>，音频处理算法一般都放在这里：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node = context.createScriptProcessor <span class=\"number\">2048</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">node.onaudioprocess = <span class=\"function\">-&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">TODO:</span> process audio</span></span><br><span class=\"line\">node.connect context.destination</span><br><span class=\"line\">analyzer.connect node</span><br></pre></td></tr></table></figure>\n<p>读取FFT数据：</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.onaudioprocess = <span class=\"function\">-&gt;</span></span><br><span class=\"line\">  n = analyzer.frequencyBinCount</span><br><span class=\"line\">  arr = <span class=\"keyword\">new</span> Uint8Array(n)</span><br><span class=\"line\">  analyzer.getByteFrequencyData arr</span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">TODO:</span> Draw</span></span><br></pre></td></tr></table></figure>\n<p>读出来的数组里包含了从低频到高频的强度，可以直接用于绘制频谱图，求和平均就是音量，也可以作为频域处理算法的输入。</p>\n<p>数组里元素$i$对应的频率为$f_i = \\frac{Sample Rate}{FFT Size} i$。</p>\n<p>在调音器这个应用中，最大的问题就是精度，Audio API里最大取值只能是<code>2048</code>，在48kHz采样率时，频率分辨率只能到23.43Hz。<br>这个精度是无法接受的，如$E4 = 329.628, F4 = 349.228$之间只相差了19.6Hz，完全无法区分。</p>\n<h2 id=\"u53EF_u89C6_u5316\"><a href=\"#u53EF_u89C6_u5316\" class=\"headerlink\" title=\"可视化\"></a>可视化</h2><p>在这个项目里尝试了下<a href=\"/processingjs.org/\">processing.js</a>，虽然API很清晰，但是绘图功能不足，没有原生的gradient，blur支持，只能人肉实现，于是性能一不小心就惨淡了。</p>\n<h2 id=\"u6E90_u7801\"><a href=\"#u6E90_u7801\" class=\"headerlink\" title=\"源码\"></a>源码</h2><ul>\n<li><a href=\"http://catx.me/not-a-tuner-yet\">Demo</a></li>\n</ul>\n<div id=\"badge-container-akfish-not-a-tuner-yet-a34a7d\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-akfish-not-a-tuner-yet-a34a7d\", \"akfish\", \"not-a-tuner-yet\", \"a34a7d\", false);\n</script>\n\n<p>建议使用Chrome打开，FireFox上性能很惨淡。</p>\n","date":"2014-08-26T01:06:16.000Z","path":"2014/08/26/html5-sound-visualization-experiment-with-processingjs/","isDark":true,"featureColor":"#146ca4","featureImage":"/images/sound-visualization-exp.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#146ca4","isDark":true,"contrast":5.665104928657267},"Muted":{"color":"#8db3c8","isDark":false,"contrast":2.230575663094013},"DarkVibrant":{"color":"#146498","isDark":true,"contrast":10.975361372213726},"DarkMuted":{"color":"#617784","isDark":true,"contrast":5.125568077118013},"LightVibrant":{"color":"#609bbd","isDark":true,"contrast":3.2074486961643944},"LightMuted":{"color":"#b5bfc6","isDark":false,"contrast":1.869572315096829}},"permalink":"http://catx.me/2014/08/26/html5-sound-visualization-experiment-with-processingjs/","json":"data/posts/2014/08/26/html5-sound-visualization-experiment-with-processingjs.json","tags":[{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"Music","slug":"Music","path":"tags/Music/","permalink":"http://catx.me/tags/Music/","postCount":1},{"name":"Visualization","slug":"Visualization","path":"tags/Visualization/","permalink":"http://catx.me/tags/Visualization/","postCount":1},{"name":"processing.js","slug":"processing-js","path":"tags/processing-js/","permalink":"http://catx.me/tags/processing-js/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"64ec5714b6bb6527a2db457e2431194da8fca63c","isDigest":true}],"sha1":"1b45ecded72d4bc2a5d19adb464091ab587f2766"}