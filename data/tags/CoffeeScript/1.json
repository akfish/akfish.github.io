{"tag":"CoffeeScript","isDark":false,"type":"tag","path":"tags/CoffeeScript/","json_base":"data/tags/CoffeeScript/","json":"data/tags/CoffeeScript/1.json","current":1,"total":1,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","data":{"title":"seajs-worker | 无缝&模块化的Web Worker开发","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Web Worker是HTML5标准增加的多线程方案，直接使用web worker的API开发是一件比较麻烦的事：</p>\n<ul>\n<li>Worker脚本必须放在单独的文件里（虽然可以用blob inline worker，但是IE10/11不支持，并且<a href=\"http://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\" target=\"_blank\" rel=\"external\">官方也没有修改的意思</a>）</li>\n<li>Worker和浏览器脚本需要通过message通信</li>\n<li>不利于模块化开发，不管是AMD还是CMD模块，都不能直接通过<code>importScripts</code>载入运行</li>\n</ul>\n<p>RequireJS<a href=\"/requirejs.org/docs/api.html#webworker\">支持web worker</a>，可以在worker脚本一开头<code>importScript(&#39;path/to/require.js&#39;)</code>，然后就愉快的一路AMD了（当然依然要message通信）。</p>\n<p>而我最近项目里在使用的sea.js不支持，为了解决这个问题，前几天陆续向sea.js发了几个<a href=\"https://github.com/seajs/seajs/pull/1279\" target=\"_blank\" rel=\"external\">pull request</a>，给sea.js增加了web worker支持。</p>\n<p>在变更被merge过后，更进一步的折腾了下，把web worker的API封装了一遍，写了seajs-worker这个插件，实现了真正无缝的开发。开发者不需要关心worker的创建、生命周期管理，也不需要通过消息通信，而是直接通过清晰的异步方法调用。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><a href=\"https://github.com/akfish/seajs-worker\" target=\"_blank\" rel=\"external\">GitHub Repo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/example/\">示例Demo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/doc/\">文档</a></li>\n<li><a href=\"http://catx.me/seajs-worker/tests/SpecRunner.html\">测试</a></li>\n</ul>\n<h2 id=\"u4F7F_u7528_u5B9E_u4F8B\"><a href=\"#u4F7F_u7528_u5B9E_u4F8B\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><p><a href=\"http://catx.me/seajs-worker/example/\">示例</a>源码在repo的的<a href=\"https://github.com/akfish/seajs-worker/tree/master/example\" target=\"_blank\" rel=\"external\">example</a>目录里可以找到。</p>\n<p>使用seajs-worker开发web worker只需要3步。</p>\n<h3 id=\"u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\"><a href=\"#u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\" class=\"headerlink\" title=\"第一步，配置sea.js:\"></a>第一步，配置sea.js:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"actionscript\"></span><br><span class=\"line\">  seajs.config(&#123;</span><br><span class=\"line\">    base: <span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  seajs.<span class=\"keyword\">use</span>(<span class=\"string\">'example/main'</span>);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\"><a href=\"#u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\" class=\"headerlink\" title=\"第二步，实现一个具体的worker类，继承自SeaWorker：\"></a>第二步，实现一个具体的worker类，继承自SeaWorker：</h3><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># image-worker.coffee</span></span><br><span class=\"line\">define (<span class=\"built_in\">require</span>, exports, <span class=\"built_in\">module</span>) -&gt;</span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span> <span class=\"string\">'../worker'</span></span><br><span class=\"line\">  <span class=\"comment\"># require other modules directly</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span> <span class=\"string\">'./image-util'</span></span><br><span class=\"line\">  <span class=\"comment\"># @nodoc</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageWorker</span> <span class=\"keyword\">extends</span> <span class=\"title\">SeaWorker</span></span></span><br><span class=\"line\">    <span class=\"property\">@worker_service</span> <span class=\"string\">'sepia'</span>, <span class=\"function\"><span class=\"params\">(src)</span> -&gt;</span></span><br><span class=\"line\">      src.each (p) -&gt;</span><br><span class=\"line\">        r = <span class=\"number\">0.393</span> * p.r + <span class=\"number\">0.769</span> * p.g + <span class=\"number\">0.189</span> * p.b</span><br><span class=\"line\">        g = <span class=\"number\">0.349</span> * p.r + <span class=\"number\">0.686</span> * p.g + <span class=\"number\">0.168</span> * p.b</span><br><span class=\"line\">        b = <span class=\"number\">0.272</span> * p.r + <span class=\"number\">0.534</span> * p.g + <span class=\"number\">0.131</span> * p.b</span><br><span class=\"line\">        src.setRGBA p.i, r, g, b, p.a</span><br><span class=\"line\">      <span class=\"keyword\">return</span> src</span><br><span class=\"line\"></span><br><span class=\"line\">  SeaWorker.register ImageWorker</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = ImageWorker</span><br></pre></td></tr></table></figure>\n<p>可以看到worker类就是一个普通CMD模块的写法，可以自由<code>require</code>其它模块，只要执行路径里没有调用到web worker不允许访问的API（比如DOM）就行。</p>\n<h3 id=\"u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\"><a href=\"#u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\" class=\"headerlink\" title=\"第三步，创建并调用worker。\"></a>第三步，创建并调用worker。</h3><p>创建：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Worker = <span class=\"built_in\">require</span> <span class=\"string\">'./image-worker'</span></span><br><span class=\"line\">worker = <span class=\"keyword\">new</span> Worker()</span><br></pre></td></tr></table></figure></p>\n<p>seajs-worker提供了两种调用方案。</p>\n<h4 id=\"u5355worker_u65B9_u6848_uFF1A\"><a href=\"#u5355worker_u65B9_u6848_uFF1A\" class=\"headerlink\" title=\"单worker方案：\"></a>单worker方案：</h4><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src, <span class=\"function\"><span class=\"params\">(err, result)</span> -&gt;</span></span><br><span class=\"line\">  ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，再也不需要自己去实现message通信，只需要一个简单的方法调用。返回值的方法除了以上callback的方式以外，如果seajs-worker检测到了<a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a>的存在，就会返回一个promise对象，此时就可以使用<a href=\"http://promisesaplus.com/\" target=\"_blank\" rel=\"external\">Promise/A+ Pattern</a>避免callback的嵌套：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (result) -&gt; ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"u591Aworker_u65B9_u6848\"><a href=\"#u591Aworker_u65B9_u6848\" class=\"headerlink\" title=\"多worker方案\"></a>多worker方案</h4><p>仅仅使用一个worker还不足以发挥多线程的威力，seajs-worker提供了<code>map-reduce</code>语法，一句话实现worker pool:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Divide image into segments</span></span><br><span class=\"line\">segs = [seg_1, seg_2, ..., seg_n]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Worker count</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Map-Reduce</span></span><br><span class=\"line\">Worker.map segs, <span class=\"string\">'sepia'</span>, n</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (dsts) -&gt;</span><br><span class=\"line\">    Worker.reduce dsts, <span class=\"function\">(<span class=\"params\">(ctx, s, i)</span> -&gt;</span></span><br><span class=\"line\">      ctx.putImageData s, <span class=\"number\">0</span>, i * step</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ctx</span><br><span class=\"line\">      ), dst_ctx</span><br></pre></td></tr></table></figure>\n<p>以上代码把图像分成若干块，放到一个<code>Array</code>里，然后通过<code>map</code>把每块交给一个worker进行处理，指定同时最多有10个worker进行操作。完成后传回一个<code>Array</code>，分别对应每块图像的处理结果，由<code>reduce</code>绘制到canvas上。</p>\n<p><a href=\"http://blogs.msdn.com/b/eternalcoding/archive/2012/09/20/using-web-workers-to-improve-performance-of-image-manipulation.aspx\" target=\"_blank\" rel=\"external\">这篇blog</a>用web worker API细线了同样的功能，对比起来代码的清晰程度显而易见。</p>\n<h2 id=\"JavaScript_u4E2D_u4F7F_u7528\"><a href=\"#JavaScript_u4E2D_u4F7F_u7528\" class=\"headerlink\" title=\"JavaScript中使用\"></a>JavaScript中使用</h2><p>seajs-worker为JavaScript开发者提供了几个helper方法，例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Require base</span></span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/sea/worker'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a derived class</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Derived = SeaWorker.extend(&#123;</span><br><span class=\"line\">    field: <span class=\"string\">'I am a field'</span>,</span><br><span class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// I'm a function exists in both worker and browser</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    constructor: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.n = n;</span><br><span class=\"line\">      <span class=\"comment\">// Call parent constructor if needed</span></span><br><span class=\"line\">      <span class=\"comment\">// this.__super(n);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker side methods</span></span><br><span class=\"line\">  Derived.inWorker(<span class=\"string\">\"methodInWorkerOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Browser side methods</span></span><br><span class=\"line\">  Derived.inBrowser(<span class=\"string\">\"methodInBrowserOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker service, running in worker, called from browser</span></span><br><span class=\"line\">  Derived.service(<span class=\"string\">\"foo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Register</span></span><br><span class=\"line\">  SeaWorker.register(Derived);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = Derived;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u9879_u76EE_u72B6_u6001\"><a href=\"#u9879_u76EE_u72B6_u6001\" class=\"headerlink\" title=\"项目状态\"></a>项目状态</h2><p>目前seajs-worker的所有代码均有文档、注释，并通过了单元测试。</p>\n<p><del>API语句针对CoffeeScript设计优化，用JavaScript调用暂时还不够优雅，接下来会改善这个问题。</del></p>\n","date":"2014-07-31T15:02:53.000Z","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","isDark":true,"featureColor":"#d33526","featureImage":"/image/stock/6.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d33526","isDark":true,"contrast":5.2283814901860834},"Muted":{"color":"#92aab3","isDark":false,"contrast":2.4353407534583575},"DarkVibrant":{"color":"#18505f","isDark":true,"contrast":14.789314061889451},"DarkMuted":{"color":"#597e88","isDark":true,"contrast":4.714101405216207},"LightVibrant":{"color":"#d16a62","isDark":true,"contrast":3.610959820667002},"LightMuted":{"color":"#b9ccd2","isDark":false,"contrast":1.6626245807608895}},"permalink":"http://catx.me/2014/07/31/seajs-worker-seamless-and-modular-web-worker/","json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"sea.js","slug":"sea-js","path":"tags/sea-js/","permalink":"http://catx.me/tags/sea-js/","postCount":1},{"name":"测试","slug":"测试","path":"tags/测试/","permalink":"http://catx.me/tags/测试/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"34341dd0b341e0cebf921bbf7805246a761aeb5f","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/05/02/bright-star-catalogue-convertor.json","path":"2014/05/02/bright-star-catalogue-convertor/","data":{"title":"BSC星表数据通用转换脚本","content":"<h2 id=\"u7B80_u4ECB\"><a href=\"#u7B80_u4ECB\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这两天开始用WebGL做一个星图App，需要处理各种星表数据。</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Bright_Star_Catalogue\" target=\"_blank\" rel=\"external\">Yale Bright Star Catalogue</a> (BSC, 亮星星表)包含了所有视星等6.5以上的恒星(9000+枚)，基本上就是人类狗眼能看到的所有恒星了。</p>\n<p>写了这个转换脚本，可以将星表数据转换为任意格式，只需要创建对应格式的underscore template就行了。</p>\n<h2 id=\"u4E0B_u8F7D\"><a href=\"#u4E0B_u8F7D\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>Markdown格式化后的BSC 5th Edition Readme: <a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc\" target=\"_blank\" rel=\"external\">Bright Star Catalogue, 5th Revised Ed. </a></p>\n<p>转换脚本: <a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc/convertor\" target=\"_blank\" rel=\"external\">Generic Convertor For Bright Star Catalogue</a></p>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>Node.Js</li>\n<li>在脚本目录中<code>npm install</code>如下包：<ul>\n<li>coffee-script</li>\n<li>async</li>\n<li>underscore</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc#file-summary\" target=\"_blank\" rel=\"external\">下载</a>星表数据文件，解压<code>bsc5.dat</code>和<code>notes</code>文件，放到和脚本相同目录</li>\n<li>和脚本一起的有一个简单的<code>json</code>模板(underscore template)，也可以根据需要自己创建，放到和脚本相同目录</li>\n</ul>\n<h2 id=\"u8FD0_u884C\"><a href=\"#u8FD0_u884C\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>命令格式:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ coffee convert template_file_name output_file_name</span><br></pre></td></tr></table></figure></p>\n<p>例:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ coffee convert json bsc5.json</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u521B_u5EFA_u6A21_u677F\"><a href=\"#u521B_u5EFA_u6A21_u677F\" class=\"headerlink\" title=\"创建模板\"></a>创建模板</h2><p>参考：</p>\n<ul>\n<li><a href=\"http://underscorejs.org/#template\" target=\"_blank\" rel=\"external\">underscore.js template</a></li>\n<li><a href=\"https://github.com/akfish/Universe/tree/master/data/catalog/bsc/convertor#writing-templates\" target=\"_blank\" rel=\"external\">Writing Templates</a></li>\n</ul>\n","date":"2014-05-02T02:43:38.000Z","path":"2014/05/02/bright-star-catalogue-convertor/","isDark":true,"featureColor":"#33497d","featureImage":"/images/image-of-VLT.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#33497d","isDark":true,"contrast":12.50823029052348},"Muted":{"color":"#50709f","isDark":true,"contrast":5.35501644398726},"DarkVibrant":{"color":"#2c3b66","isDark":true,"contrast":13.955292258112078},"DarkMuted":{"color":"#414255","isDark":true,"contrast":14.918029817688794},"LightMuted":{"color":"#a18f88","isDark":true,"contrast":3.088275078191694}},"permalink":"http://catx.me/2014/05/02/bright-star-catalogue-convertor/","json":"data/posts/2014/05/02/bright-star-catalogue-convertor.json","tags":[{"name":"Astronomy","slug":"Astronomy","path":"tags/Astronomy/","permalink":"http://catx.me/tags/Astronomy/","postCount":1},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"Node.Js","slug":"Node-Js","path":"tags/Node-Js/","permalink":"http://catx.me/tags/Node-Js/","postCount":3}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17},{"name":"天文","slug":"挨踢/天文","path":"categories/挨踢/天文/","permalink":"http://catx.me/categories/挨踢/天文/","postCount":1}]},"sha1":"8c0e3f5d346b77522a99bd3d54b2624e9ef32b33","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/20/beat-flappy-2048-with-q-learning.json","path":"2014/03/20/beat-flappy-2048-with-q-learning/","data":{"title":"Beat flappy 2048 with Q Learning","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>2048这游戏已经被玩坏了，有人把它和Flappy Bird杂交，玩不过不能忍，于是写了个AI玩之。</p>\n<h2 id=\"u6E38_u620F_u6E90_u7801_u4FEE_u6539\"><a href=\"#u6E38_u620F_u6E90_u7801_u4FEE_u6539\" class=\"headerlink\" title=\"游戏源码修改\"></a>游戏源码修改</h2><p>首先需要对游戏进行适当的修改，便于AI获取游戏状态，并输出控制量。</p>\n<p>修改<code>application.js</code>，将几个关键的对象放到<code>windows</code>命名空间中便于访问：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.input = KeyboardInputManager;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.actuator = HTMLActuator;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.score = LocalScoreManager;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.game = <span class=\"keyword\">new</span> GameManager(<span class=\"number\">4</span>, KeyboardInputManager, HTMLActuator, LocalScoreManager);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>游戏的逻辑主要在<code>game_manager.js</code>中实现：</p>\n<p>游戏中的“鸟”的css class是<code>tile-bird</code>，障碍物的css class是<code>tile-block</code>，在本文中分别简称为<code>bird</code>和<code>block</code>。</p>\n<ul>\n<li>使用<code>game.jump()</code>跳跃</li>\n<li>bird的状态：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>game.birdpos</code></td>\n<td>顶端的y坐标，$[0, 1]$之间，0为顶端</td>\n</tr>\n<tr>\n<td><code>game.birdspd</code></td>\n<td>y方向速度，向下为正</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在任意时刻，只有4个<code>block</code>分别称为<code>a</code>, <code>b</code>, <code>c</code>和<code>d</code>，<code>a</code>与<code>b</code>,<code>c</code>与<code>d</code>成组，有相同的水平坐标，两组<code>block</code>之间一直保持2个tile的距离。每组block只有3种可能状态：全在上、全在下以及一上一下，因此block的状态由两个0~2之间的数字<code>game.ab</code>, <code>game.cd</code>确定。</li>\n</ul>\n<p>游戏由一个timer驱动，每一帧计算游戏状态的变化，最后调用<code>window.actuator.actuate()</code>方法计算元素位置，重绘游戏。</p>\n<p>在游戏计算出元素位置并重绘后获取状态，并由AI注入控制量是最为便捷的方式。</p>\n<p>修改<code>html_actuator.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTMLActuator.prototype.actuate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">grid, metadata</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//.. Other stuff</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Call AI</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.AI.play(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样对原游戏的改动就完成了，接下来只需要实现AI类，并把类对象赋值到<code>window.AI</code>即可。</p>\n<h2 id=\"Q-Learning\"><a href=\"#Q-Learning\" class=\"headerlink\" title=\"Q-Learning\"></a>Q-Learning</h2><p>Q-Learning是一种强化学习算法，能用于寻找Markov决策过程(MDP, Markov decision process)的最优解。<br>MDP问题模型由一个agent，状态$S$以及每个状态对应动作(action)集合$A$构成。Agent通过完成一个动作，从一个状态$S$跳转到另一个状态$S’$，获得一定的奖励。Agent的目标就是使奖励最大化，通过学习在每个状态下最优的动作，达到这个目的。</p>\n<p>算法的核心是矩阵$Q$，记录状态-动作对的奖励：</p>\n<p>$$Q: S \\times A \\rightarrow \\mathbb{R}$$</p>\n<p>算法初始时，$Q$取设计好的值，随后agent每执行一次动作，观察新状态以及获得的奖励，通过如下公式迭代更新：</p>\n<span>$$Q_{t+1}(s_t, a_t) = Q_{t}(s_t, a_t) + \\alpha_{t}(s_t, a_t) \\times [ R_{t+1} + \\gamma \\max Q_{t}(s_{t+1}, a) - Q_{t}(s_t, a_t) ]$$</span><!-- Has MathJax -->\n<p>其中：</p>\n<ul>\n<li>$Q_{t+1}(s_t, a_t)$: 新的$Q$值</li>\n<li>$Q_{t}(s_t, a_t)$: 上一时刻$Q$值</li>\n<li>$R_{t+1}$: 在$s_t$时执行$a_t$后获得的奖励</li>\n<li>$\\alpha \\in [0, 1]$: learning rate</li>\n<li>$\\gamma$: 折扣率</li>\n</ul>\n<h2 id=\"u7B97_u6CD5_u8BBE_u8BA1\"><a href=\"#u7B97_u6CD5_u8BBE_u8BA1\" class=\"headerlink\" title=\"算法设计\"></a>算法设计</h2><ul>\n<li><p>状态：</p>\n<ul>\n<li>$\\Delta y$: <code>bird</code>到能安全通过当前<code>block</code>最高点的垂直距离</li>\n<li>$\\Delta x$: <code>bird</code>到下一个block的水平方向距离</li>\n</ul>\n</li>\n<li><p>动作：</p>\n<ul>\n<li><code>jump</code>: 跳跃</li>\n<li><code>idle</code>: 不动作</li>\n</ul>\n</li>\n<li><p>奖励：</p>\n<ul>\n<li>死亡：<code>-100</code></li>\n<li>存活：<code>1</code></li>\n</ul>\n</li>\n<li><p>$Q$的初始化</p>\n</li>\n</ul>\n<p>虽然可以简单的把$Q$全初始化为0，但这样会延长学习时间。并且在很多情况下，会导致<code>bird</code>一直跳跃直到跳出顶端掉不下来，这样不管是<code>jump</code>还是<code>idle</code>都会被惩罚，这样永远无法学习到正确行为。另外在底部也会有同样的问题。</p>\n<p>实际实现时，加入了先验知识：</p>\n<ul>\n<li>对所有$\\Delta y &lt; y_{min}$的$s$，初始化<code>jump</code>的reward为<code>-100</code>。即在上端时禁止跳跃</li>\n<li><p>对所有$\\Delta y &gt; n * BirdHeight$的$s$，初始化<code>idle</code>的reward为<code>-5</code>，<code>n</code>接近<code>1</code>。即离最高点的距离小于<code>bird</code>自己高度的时候，倾向于跳跃。注意这里的reward值较小，是因为在某些组合下（如当前<code>block</code>在下，下一个<code>block</code>在上），跳跃会挂掉，值如果过大，$Q$值无法及时对惩罚做出反馈。</p>\n</li>\n<li><p>不定状态时的随机参数</p>\n</li>\n</ul>\n<p>在<code>jump</code>和<code>action</code>的reward相等时，无法通过$Q$做出决策，这个时候需要随机决定采取何种行为。</p>\n<p>实际实现时，同样没有简单的将这个概率设为<code>0.5</code>，而是让不跳跃的概率远大于跳跃。道理很简单，游戏的操作方式是不平衡的，玩家只能干预下落，而不能干预上升，掉得太低跳一下就行了，跳得太高就只有等死。</p>\n<h2 id=\"u6548_u679C\"><a href=\"#u6548_u679C\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>目前实现的版本在未学习的情况下，可以一次跳跃到700+分，学习一小时后可以到1000分，到后面出错都是遇到比较极端的组合差之毫厘，重现概率不高，所以学习速度会变慢。</p>\n<p>玩：<a href=\"http://catx.me/Q-Learning-Flappy-2048/\">Q Learning Flappy 2048</a></p>\n<p>代码：<a href=\"https://github.com/akfish/Q-Learning-Flappy-2048\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n","date":"2014-03-20T10:53:10.000Z","path":"2014/03/20/beat-flappy-2048-with-q-learning/","isDark":false,"featureColor":"#e3c772","featureImage":"/images/43e55b43715494ac817795932fe4ab2c5b34268a.png","excerpt":"","featureSwatch":{"Vibrant":{"color":"#e3c772","isDark":false,"contrast":1.6563435380830245},"Muted":{"color":"#bcaca3","isDark":false,"contrast":2.194781298784433},"DarkVibrant":{"color":"#6e5815","isDark":true,"contrast":10.222616092326977},"LightVibrant":{"color":"#fcfcec","isDark":false,"contrast":1.0357850628347347},"LightMuted":{"color":"#cbc2b3","isDark":false,"contrast":1.7636756459902587}},"permalink":"http://catx.me/2014/03/20/beat-flappy-2048-with-q-learning/","json":"data/posts/2014/03/20/beat-flappy-2048-with-q-learning.json","tags":[{"name":"AI","slug":"AI","path":"tags/AI/","permalink":"http://catx.me/tags/AI/","postCount":1},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"Fun","slug":"Fun","path":"tags/Fun/","permalink":"http://catx.me/tags/Fun/","postCount":2},{"name":"JavaScript","slug":"JavaScript","path":"tags/JavaScript/","permalink":"http://catx.me/tags/JavaScript/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"ea834ca2055280b5fdf2042dbebcf028508b19d8","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/12/hexo-uml-tag-plugin.json","path":"2014/03/12/hexo-uml-tag-plugin/","data":{"title":"Hexo UML插件","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>技术类博客总是不可避免的要插入各种UML图，昨天偶然发现一个有意思的Javascript库<a href=\"http://jumly.tmtk.net/\" target=\"_blank\" rel=\"external\">Jumly</a>，用于渲染UML sequence diagram和robustness diagram。于是制作了一个hexo插件，便于在博客中插入。</p>\n<p><strong>Sequence Diagram</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@found &#34;You&#34;, -&#62;&#10;  @message &#34;Think&#34;, -&#62;&#10;    @message &#34;Write your idea&#34;, &#34;hexo-tag-uml&#34;, -&#62;&#10;      @message &#34;&#34;, &#34;JUMLY&#34;, -&#62;&#10;        @create &#34;Diagram&#34;&#10;hexo_tag_uml.css &#34;background-color&#34;:&#34;#8CC84B&#34;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Robustness Diagram</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@actor &#34;User&#34; :-&#62; @view &#34;Browser&#34;&#10;@view &#34;Browser&#34; :-&#62; @controller &#34;Server&#34;&#10;@controller &#34;Server&#34; :-&#62; @entity &#34;Database&#34;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-tag-uml --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521D_u59CB_u5316\"><a href=\"#u521D_u59CB_u5316\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在blog文件夹中执行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo uml install</span><br></pre></td></tr></table></figure>\n<p>在<code>_config.yml</code>文件中添加：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:&#10;- hexo-tag-uml</span><br></pre></td></tr></table></figure></p>\n<p>在主题的<code>.ejs</code>文件的合适位置插入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">%-</span> <span class=\"attribute\">partial</span>('<span class=\"attribute\">jumly</span>') %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一般而言可以放在<code>&lt;head&gt;</code>一节里，需要注意的是Jumly依赖于jQuery，如果主题里引用了其它位置的jQuery，会导致冲突。<br>比如hexo的默认主题landscape就在<code>after-footer.ejs</code>中插入了jQuery，需要将相应行去掉，替换为上面语句。<br>也是因为实际主题的实现哥又不同，这个插件没能实现自动修改theme layout文件。</p>\n<h2 id=\"u8BED_u6CD5\"><a href=\"#u8BED_u6CD5\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&amp;#37; uml [diagram_type] %&#125;</span><br><span class=\"line\">&#123;&amp;#37; uml %&#125;</span><br></pre></td></tr></table></figure>\n<p><code>diagram_type</code>可以取的值为：</p>\n<ul>\n<li>sequence</li>\n<li>robustness</li>\n</ul>\n<p>如果留空，默认为sequence。</p>\n<h2 id=\"u793A_u4F8B\"><a href=\"#u793A_u4F8B\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&amp;#37; uml %&#125;</span><br><span class=\"line\">@found \"Browser\", -&gt;</span><br><span class=\"line\">  @alt &#123;</span><br><span class=\"line\"><span class=\"code\">    \"[200]\": -&gt; @message \"GET href resources\", \"HTTP Server\"</span></span><br><span class=\"line\"><span class=\"code\">    \"[301]\": -&gt; @ref \"GET the moved page\"</span></span><br><span class=\"line\"><span class=\"code\">    \"[404]\": -&gt; @ref \"show NOT FOUND\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">@find(\".ref\").css(width:256, \"padding-bottom\":4)</span><br><span class=\"line\">  .find(\".tag\").css float:\"left\"</span><br><span class=\"line\">get<span class=\"emphasis\">_the_</span>moved_page.css \"background-color\":\"#80c080\"</span><br><span class=\"line\">show<span class=\"emphasis\">_not_</span>found.css \"background-color\":\"#f0b0b0\"</span><br><span class=\"line\">&#123;&amp;#37; enduml %&#125;</span><br></pre></td></tr></table></figure>\n<p>效果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@found &#34;Browser&#34;, -&#62;&#10;  @alt &#123;&#10;    &#34;[200]&#34;: -&#62; @message &#34;GET href resources&#34;, &#34;HTTP Server&#34;&#10;    &#34;[301]&#34;: -&#62; @ref &#34;GET the moved page&#34;&#10;    &#34;[404]&#34;: -&#62; @ref &#34;show NOT FOUND&#34;&#10;  &#125;&#10;@find(&#34;.ref&#34;).css(width:256, &#34;padding-bottom&#34;:4)&#10;  .find(&#34;.tag&#34;).css float:&#34;left&#34;&#10;get_the_moved_page.css &#34;background-color&#34;:&#34;#80c080&#34;&#10;show_not_found.css &#34;background-color&#34;:&#34;#f0b0b0&#34;</span><br></pre></td></tr></table></figure>\n<p>Jumly的表达式规则详见：<a href=\"http://jumly.tmtk.net/reference.html\" target=\"_blank\" rel=\"external\">Jumly Reference Manual</a></p>\n<p>在线编辑器：<a href=\"http://jumly.tmtk.net/try.html\" target=\"_blank\" rel=\"external\">Try Jumly</a></p>\n","date":"2014-03-12T06:23:37.000Z","path":"2014/03/12/hexo-uml-tag-plugin/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"permalink":"http://catx.me/2014/03/12/hexo-uml-tag-plugin/","json":"data/posts/2014/03/12/hexo-uml-tag-plugin.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"Hexo","slug":"Hexo","path":"tags/Hexo/","permalink":"http://catx.me/tags/Hexo/","postCount":3},{"name":"Jumly","slug":"Jumly","path":"tags/Jumly/","permalink":"http://catx.me/tags/Jumly/","postCount":1},{"name":"Node.Js","slug":"Node-Js","path":"tags/Node-Js/","permalink":"http://catx.me/tags/Node-Js/","postCount":3},{"name":"UML","slug":"UML","path":"tags/UML/","permalink":"http://catx.me/tags/UML/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"cad5a159769f8b2a28978c2383bf0bbe1ed6d69b","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/09/hexo-mathjax-plugin.json","path":"2014/03/09/hexo-mathjax-plugin/","data":{"title":"Hexo MathJax插件","content":"<div id=\"badge-container-akfish-hexo-math-6e264f5\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-akfish-hexo-math-6e264f5\", \"akfish\", \"hexo-math\", \"6e264f5\", false);\n</script>\n\n<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Hexo不支持数学公式，网上可以找到很多人肉修改theme使其支持用<a href=\"http://www.mathjax.org/\" target=\"_blank\" rel=\"external\">MathJax</a>渲染公式的方法，主要分为两个步骤：</p>\n<ul>\n<li>在theme的header中插入对MathJax CDN script的引用，并配置inline math</li>\n<li>在文章中用inline math插入公式</li>\n</ul>\n<p>这个方法有两个明显的缺点：</p>\n<ul>\n<li>需要人肉进行的工作太多</li>\n<li>遇到特殊符号需要人肉escape，否则会被markdown parser吃掉</li>\n</ul>\n<p>于是开发了一个插件，实现：</p>\n<ul>\n<li>自动部署MathJax</li>\n<li>添加MathJax Tag</li>\n</ul>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-math --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521D_u59CB_u5316\"><a href=\"#u521D_u59CB_u5316\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在blog文件夹中执行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo math install</span><br></pre></td></tr></table></figure>\n<p>在<code>_config.yml</code>文件中添加：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:&#10;- hexo-math</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u4F7F_u7528\"><a href=\"#u4F7F_u7528\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>对于不含特殊符号的公式，可以直接使用MathJax的inline math表达式.<br>如果含有特殊符号，则需要人肉escape，如<code>\\</code>之类的特殊符号在LaTex表达式中出现频率很高，这样就很麻烦，使用tag能够省不少事。</p>\n<p><strong>MathJax Inline:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simple inline $a = b + c$.</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p>Simple inline $a = b + c$.</p>\n<p><strong>MathJax Block:</strong><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$\\frac&#123;\\partial u&#125;&#123;\\partial t&#125;</span><br><span class=\"line\">= h^2 \\left( \\frac&#123;\\partial^2 u&#125;&#123;\\partial x^2&#125; +</span><br><span class=\"line\">\\frac&#123;\\partial^2 u&#125;&#123;\\partial y^2&#125; +</span><br><span class=\"line\">\\frac&#123;\\partial^2 u&#125;&#123;\\partial z^2&#125;\\right)$$</span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<p>$$\\frac{\\partial u}{\\partial t}<br>= h^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} +<br>\\frac{\\partial^2 u}{\\partial y^2} +<br>\\frac{\\partial^2 u}{\\partial z^2}\\right)$$</p>\n<p><strong>Tag inline:</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This equation &#123;&amp;#37; math \\cos 2\\theta = \\cos^2 \\theta - \\sin^2 \\theta =  2 \\cos^2 \\theta - 1 %&#125; is inline.</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p>This equation <span>$\\cos 2\\theta = \\cos^2 \\theta - \\sin^2 \\theta =  2 \\cos^2 \\theta - 1$</span><!-- Has MathJax --> is inline.</p>\n<p><strong>Tag Block:</strong><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&amp;#37; math_block %&#125;</span><br><span class=\"line\">\\begin&#123;aligned&#125;</span><br><span class=\"line\">\\dot&#123;x&#125; &amp; = \\sigma(y-x) \\\\</span><br><span class=\"line\">\\dot&#123;y&#125; &amp; = \\rho x - y - xz \\\\</span><br><span class=\"line\">\\dot&#123;z&#125; &amp; = -\\beta z + xy</span><br><span class=\"line\">\\end&#123;aligned&#125;</span><br><span class=\"line\">&#123;&amp;#37; endmath_block %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果：</p>\n<span>$$\\begin{aligned}\n\\dot{x} & = \\sigma(y-x) \\\\\n\\dot{y} & = \\rho x - y - xz \\\\\n\\dot{z} & = -\\beta z + xy\n\\end{aligned}$$</span><!-- Has MathJax -->\n<h2 id=\"u6E90_u4EE3_u7801\"><a href=\"#u6E90_u4EE3_u7801\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p><a href=\"https://github.com/akfish/hexo-math\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n","date":"2014-03-08T19:08:10.000Z","path":"2014/03/09/hexo-mathjax-plugin/","isDark":true,"featureColor":"#254277","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#254277","isDark":true,"contrast":13.119400726558645},"Muted":{"color":"#526c95","isDark":true,"contrast":5.699027819875463},"DarkVibrant":{"color":"#113a74","isDark":true,"contrast":13.761948622251554},"DarkMuted":{"color":"#425c7b","isDark":true,"contrast":11.860230374565882},"LightVibrant":{"color":"#f4f7fc","isDark":false,"contrast":1.0738073817947642},"LightMuted":{"color":"#8e9db6","isDark":false,"contrast":2.745663409490839}},"permalink":"http://catx.me/2014/03/09/hexo-mathjax-plugin/","json":"data/posts/2014/03/09/hexo-mathjax-plugin.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"Hexo","slug":"Hexo","path":"tags/Hexo/","permalink":"http://catx.me/tags/Hexo/","postCount":3},{"name":"Node.Js","slug":"Node-Js","path":"tags/Node-Js/","permalink":"http://catx.me/tags/Node-Js/","postCount":3}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"465df2ded27fd09edad82c8c76edf17963cd7320","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code.json","path":"2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","data":{"title":"从CoffeeScript源代码中获取文法并可视化","content":"<p>最近在研究把CoffeeScript编译到.Net CLR环境上运行的可能性，在几个CoffeeScript compiler的实现中，没有发现对文法定义的specification，如果要人肉重建不仅工作量忧桑，还有可能导致兼容性问题。于是看了下源代码，发现略施小计就能解决这个问题。</p>\n<p>CoffeeScript的Parser使用jison生成的，所有的文法都在<a href=\"http://coffeescript.org/documentation/docs/grammar.html\" target=\"_blank\" rel=\"external\">grammar.coffee</a>里定义了。这个代码非常好改，去掉对jison的调用，把语法定义用JSON.stringify() format了再输出，执行<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">修改后的代码</a>：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee grammar.coffee</span><br></pre></td></tr></table></figure></p>\n<p>就会得到一大串jison格式的文法定义：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"tokens\"</span>:<span class=\"string\">\" TERMINATOR TERMINATOR TERMINATOR STATEMENT INDENT OUTDENT INDENT OUTDENT IDENTIFIER NUMBER STRING JS REGEX BOOL = = INDENT OUTDENT : : INDENT OUTDENT RETURN RETURN HERECOMMENT PARAM_START PARAM_END -&amp;gt; =&amp;gt;  ,  , ... = ... . ?. :: :: INDEX_START INDEX_END INDEX_SOAK &#123; &#125;  , TERMINATOR INDENT OUTDENT CLASS CLASS CLASS EXTENDS CLASS EXTENDS CLASS CLASS CLASS EXTENDS CLASS EXTENDS SUPER SUPER  FUNC_EXIST CALL_START CALL_END CALL_START CALL_END THIS @ @ [ ] [ ] .. ... [ ] , TERMINATOR INDENT OUTDENT INDENT OUTDENT , TRY TRY TRY FINALLY TRY FINALLY CATCH THROW ( ) ( INDENT OUTDENT ) WHILE WHILE WHEN UNTIL UNTIL WHEN LOOP LOOP FOR FOR FOR OWN , FORIN FOROF FORIN WHEN FOROF WHEN FORIN BY FORIN WHEN BY FORIN BY WHEN SWITCH INDENT OUTDENT SWITCH INDENT ELSE OUTDENT SWITCH INDENT OUTDENT SWITCH INDENT ELSE OUTDENT LEADING_WHEN LEADING_WHEN TERMINATOR IF ELSE IF ELSE POST_IF POST_IF UNARY - + -- ++ -- ++ ? + - MATH SHIFT COMPARE LOGIC RELATION COMPOUND_ASSIGN COMPOUND_ASSIGN INDENT OUTDENT EXTENDS\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bnf\"</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Root\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"\"</span>,<span class=\"string\">\"return $$ = new yy.Block;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body\"</span>,<span class=\"string\">\"return $$ = $1;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Block TERMINATOR\"</span>,<span class=\"string\">\"return $$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Body\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"Line\"</span>,<span class=\"string\">\"$$ = yy.Block.wrap([$1]);\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body TERMINATOR Line\"</span>,<span class=\"string\">\"$$ = $1.push($3);\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body TERMINATOR\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Line\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"Expression\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Statement\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>这样已经算是可用了，但可读性依然不高，经过一番搜索发现一个jison-to-w3c文法标记格式的<a href=\"http://bottlecaps.de/convert/\" target=\"_blank\" rel=\"external\">转换器</a>，得到<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">文法</a>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Root     ::= Body?&#10;Body     ::= Line ( TERMINATOR Line | TERMINATOR )*&#10;Line     ::= Expression&#10;           | Statement&#10;Statement&#10;         ::= Return&#10;           | Comment&#10;           | STATEMENT&#10;Expression&#10;         ::= Value&#10;           | Invocation&#10;           | Code&#10;           | Operation&#10;           | Assign&#10;           | If&#10;           | Try&#10;           | While&#10;           | For&#10;           | Switch&#10;           | Class&#10;           | Throw&#10;...</span><br></pre></td></tr></table></figure></p>\n<p>最后找到一个可视化文法的网站<a href=\"http://bottlecaps.de/rr/ui\" target=\"_blank\" rel=\"external\">Railroad Diagram Generator</a>将其可视化，just for fun:</p>\n<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/coffee-grammar.png\"><img src=\"/images/064306e5ca2ed757a42cd94fd214d22e49fc19c8.png\" alt=\"coffee-grammar\"></a></p>\n<p>完整的图在：<a href=\"http://project.catx.me/other/coffee-grammar.xhtml\" target=\"_blank\" rel=\"external\">http://project.catx.me/other/coffee-grammar.xhtml</a></p>\n<p>源代码+完整的文法定义：<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">https://gist.github.com/akfish/8827385</a></p>\n","date":"2014-02-05T16:55:24.000Z","path":"2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","isDark":true,"featureColor":"#254277","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#254277","isDark":true,"contrast":13.119400726558645},"Muted":{"color":"#526c95","isDark":true,"contrast":5.699027819875463},"DarkVibrant":{"color":"#113a74","isDark":true,"contrast":13.761948622251554},"DarkMuted":{"color":"#425c7b","isDark":true,"contrast":11.860230374565882},"LightVibrant":{"color":"#f4f7fc","isDark":false,"contrast":1.0738073817947642},"LightMuted":{"color":"#8e9db6","isDark":false,"contrast":2.745663409490839}},"permalink":"http://catx.me/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","json":"data/posts/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":4},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":4}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"e4db85e7a7cb163df421f354cd4c6c9f96a1ebbd","isDigest":true}],"sha1":"deeaa8c46d30ff0cd119560ef09b885f8aeb791d"}