{"tag":"测试","isDark":false,"type":"tag","path":"tags/测试/","json_base":"data/tags/测试/","json":"data/tags/测试/1.json","current":1,"total":1,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","data":{"title":"seajs-worker | 无缝&模块化的Web Worker开发","content":"<h2 id=\"u4ECB_u7ECD\"><a href=\"#u4ECB_u7ECD\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Web Worker是HTML5标准增加的多线程方案，直接使用web worker的API开发是一件比较麻烦的事：</p>\n<ul>\n<li>Worker脚本必须放在单独的文件里（虽然可以用blob inline worker，但是IE10/11不支持，并且<a href=\"http://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\" target=\"_blank\" rel=\"external\">官方也没有修改的意思</a>）</li>\n<li>Worker和浏览器脚本需要通过message通信</li>\n<li>不利于模块化开发，不管是AMD还是CMD模块，都不能直接通过<code>importScripts</code>载入运行</li>\n</ul>\n<p>RequireJS<a href=\"/requirejs.org/docs/api.html#webworker\">支持web worker</a>，可以在worker脚本一开头<code>importScript(&#39;path/to/require.js&#39;)</code>，然后就愉快的一路AMD了（当然依然要message通信）。</p>\n<p>而我最近项目里在使用的sea.js不支持，为了解决这个问题，前几天陆续向sea.js发了几个<a href=\"https://github.com/seajs/seajs/pull/1279\" target=\"_blank\" rel=\"external\">pull request</a>，给sea.js增加了web worker支持。</p>\n<p>在变更被merge过后，更进一步的折腾了下，把web worker的API封装了一遍，写了seajs-worker这个插件，实现了真正无缝的开发。开发者不需要关心worker的创建、生命周期管理，也不需要通过消息通信，而是直接通过清晰的异步方法调用。</p>\n<h2 id=\"u94FE_u63A5\"><a href=\"#u94FE_u63A5\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><a href=\"https://github.com/akfish/seajs-worker\" target=\"_blank\" rel=\"external\">GitHub Repo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/example/\">示例Demo</a></li>\n<li><a href=\"http://catx.me/seajs-worker/doc/\">文档</a></li>\n<li><a href=\"http://catx.me/seajs-worker/tests/SpecRunner.html\">测试</a></li>\n</ul>\n<h2 id=\"u4F7F_u7528_u5B9E_u4F8B\"><a href=\"#u4F7F_u7528_u5B9E_u4F8B\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><p><a href=\"http://catx.me/seajs-worker/example/\">示例</a>源码在repo的的<a href=\"https://github.com/akfish/seajs-worker/tree/master/example\" target=\"_blank\" rel=\"external\">example</a>目录里可以找到。</p>\n<p>使用seajs-worker开发web worker只需要3步。</p>\n<h3 id=\"u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\"><a href=\"#u7B2C_u4E00_u6B65_uFF0C_u914D_u7F6Esea-js_3A\" class=\"headerlink\" title=\"第一步，配置sea.js:\"></a>第一步，配置sea.js:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"actionscript\"></span><br><span class=\"line\">  seajs.config(&#123;</span><br><span class=\"line\">    base: <span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  seajs.<span class=\"keyword\">use</span>(<span class=\"string\">'example/main'</span>);</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- other sutff --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\"><a href=\"#u7B2C_u4E8C_u6B65_uFF0C_u5B9E_u73B0_u4E00_u4E2A_u5177_u4F53_u7684worker_u7C7B_uFF0C_u7EE7_u627F_u81EASeaWorker_uFF1A\" class=\"headerlink\" title=\"第二步，实现一个具体的worker类，继承自SeaWorker：\"></a>第二步，实现一个具体的worker类，继承自SeaWorker：</h3><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># image-worker.coffee</span></span><br><span class=\"line\">define (<span class=\"built_in\">require</span>, exports, <span class=\"built_in\">module</span>) -&gt;</span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span> <span class=\"string\">'../worker'</span></span><br><span class=\"line\">  <span class=\"comment\"># require other modules directly</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span> <span class=\"string\">'./image-util'</span></span><br><span class=\"line\">  <span class=\"comment\"># @nodoc</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageWorker</span> <span class=\"keyword\">extends</span> <span class=\"title\">SeaWorker</span></span></span><br><span class=\"line\">    <span class=\"property\">@worker_service</span> <span class=\"string\">'sepia'</span>, <span class=\"function\"><span class=\"params\">(src)</span> -&gt;</span></span><br><span class=\"line\">      src.each (p) -&gt;</span><br><span class=\"line\">        r = <span class=\"number\">0.393</span> * p.r + <span class=\"number\">0.769</span> * p.g + <span class=\"number\">0.189</span> * p.b</span><br><span class=\"line\">        g = <span class=\"number\">0.349</span> * p.r + <span class=\"number\">0.686</span> * p.g + <span class=\"number\">0.168</span> * p.b</span><br><span class=\"line\">        b = <span class=\"number\">0.272</span> * p.r + <span class=\"number\">0.534</span> * p.g + <span class=\"number\">0.131</span> * p.b</span><br><span class=\"line\">        src.setRGBA p.i, r, g, b, p.a</span><br><span class=\"line\">      <span class=\"keyword\">return</span> src</span><br><span class=\"line\"></span><br><span class=\"line\">  SeaWorker.register ImageWorker</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = ImageWorker</span><br></pre></td></tr></table></figure>\n<p>可以看到worker类就是一个普通CMD模块的写法，可以自由<code>require</code>其它模块，只要执行路径里没有调用到web worker不允许访问的API（比如DOM）就行。</p>\n<h3 id=\"u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\"><a href=\"#u7B2C_u4E09_u6B65_uFF0C_u521B_u5EFA_u5E76_u8C03_u7528worker_u3002\" class=\"headerlink\" title=\"第三步，创建并调用worker。\"></a>第三步，创建并调用worker。</h3><p>创建：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Worker = <span class=\"built_in\">require</span> <span class=\"string\">'./image-worker'</span></span><br><span class=\"line\">worker = <span class=\"keyword\">new</span> Worker()</span><br></pre></td></tr></table></figure></p>\n<p>seajs-worker提供了两种调用方案。</p>\n<h4 id=\"u5355worker_u65B9_u6848_uFF1A\"><a href=\"#u5355worker_u65B9_u6848_uFF1A\" class=\"headerlink\" title=\"单worker方案：\"></a>单worker方案：</h4><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src, <span class=\"function\"><span class=\"params\">(err, result)</span> -&gt;</span></span><br><span class=\"line\">  ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，再也不需要自己去实现message通信，只需要一个简单的方法调用。返回值的方法除了以上callback的方式以外，如果seajs-worker检测到了<a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a>的存在，就会返回一个promise对象，此时就可以使用<a href=\"http://promisesaplus.com/\" target=\"_blank\" rel=\"external\">Promise/A+ Pattern</a>避免callback的嵌套：<br><figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.sepia img_src</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (result) -&gt; ctx.putImageData result, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"u591Aworker_u65B9_u6848\"><a href=\"#u591Aworker_u65B9_u6848\" class=\"headerlink\" title=\"多worker方案\"></a>多worker方案</h4><p>仅仅使用一个worker还不足以发挥多线程的威力，seajs-worker提供了<code>map-reduce</code>语法，一句话实现worker pool:</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Divide image into segments</span></span><br><span class=\"line\">segs = [seg_1, seg_2, ..., seg_n]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Worker count</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Map-Reduce</span></span><br><span class=\"line\">Worker.map segs, <span class=\"string\">'sepia'</span>, n</span><br><span class=\"line\">  .<span class=\"keyword\">then</span> (dsts) -&gt;</span><br><span class=\"line\">    Worker.reduce dsts, <span class=\"function\">(<span class=\"params\">(ctx, s, i)</span> -&gt;</span></span><br><span class=\"line\">      ctx.putImageData s, <span class=\"number\">0</span>, i * step</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ctx</span><br><span class=\"line\">      ), dst_ctx</span><br></pre></td></tr></table></figure>\n<p>以上代码把图像分成若干块，放到一个<code>Array</code>里，然后通过<code>map</code>把每块交给一个worker进行处理，指定同时最多有10个worker进行操作。完成后传回一个<code>Array</code>，分别对应每块图像的处理结果，由<code>reduce</code>绘制到canvas上。</p>\n<p><a href=\"http://blogs.msdn.com/b/eternalcoding/archive/2012/09/20/using-web-workers-to-improve-performance-of-image-manipulation.aspx\" target=\"_blank\" rel=\"external\">这篇blog</a>用web worker API细线了同样的功能，对比起来代码的清晰程度显而易见。</p>\n<h2 id=\"JavaScript_u4E2D_u4F7F_u7528\"><a href=\"#JavaScript_u4E2D_u4F7F_u7528\" class=\"headerlink\" title=\"JavaScript中使用\"></a>JavaScript中使用</h2><p>seajs-worker为JavaScript开发者提供了几个helper方法，例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Require base</span></span><br><span class=\"line\">  SeaWorker = <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/sea/worker'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a derived class</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Derived = SeaWorker.extend(&#123;</span><br><span class=\"line\">    field: <span class=\"string\">'I am a field'</span>,</span><br><span class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// I'm a function exists in both worker and browser</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    constructor: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.n = n;</span><br><span class=\"line\">      <span class=\"comment\">// Call parent constructor if needed</span></span><br><span class=\"line\">      <span class=\"comment\">// this.__super(n);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker side methods</span></span><br><span class=\"line\">  Derived.inWorker(<span class=\"string\">\"methodInWorkerOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Browser side methods</span></span><br><span class=\"line\">  Derived.inBrowser(<span class=\"string\">\"methodInBrowserOnly\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Worker service, running in worker, called from browser</span></span><br><span class=\"line\">  Derived.service(<span class=\"string\">\"foo\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Register</span></span><br><span class=\"line\">  SeaWorker.register(Derived);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = Derived;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u9879_u76EE_u72B6_u6001\"><a href=\"#u9879_u76EE_u72B6_u6001\" class=\"headerlink\" title=\"项目状态\"></a>项目状态</h2><p>目前seajs-worker的所有代码均有文档、注释，并通过了单元测试。</p>\n<p><del>API语句针对CoffeeScript设计优化，用JavaScript调用暂时还不够优雅，接下来会改善这个问题。</del></p>\n","date":"2014-07-31T15:02:53.000Z","path":"2014/07/31/seajs-worker-seamless-and-modular-web-worker/","isDark":true,"featureColor":"#d33526","featureImage":"/image/stock/6.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d33526","isDark":true,"contrast":5.2283814901860834},"Muted":{"color":"#92aab3","isDark":false,"contrast":2.4353407534583575},"DarkVibrant":{"color":"#18505f","isDark":true,"contrast":14.789314061889451},"DarkMuted":{"color":"#597e88","isDark":true,"contrast":4.714101405216207},"LightVibrant":{"color":"#d16a62","isDark":true,"contrast":3.610959820667002},"LightMuted":{"color":"#b9ccd2","isDark":false,"contrast":1.6626245807608895}},"json":"data/posts/2014/07/31/seajs-worker-seamless-and-modular-web-worker.json","tags":[{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":6},{"name":"GitHub","slug":"GitHub","path":"tags/GitHub/","permalink":"http://catx.me/tags/GitHub/","postCount":6},{"name":"HTML5","slug":"HTML5","path":"tags/HTML5/","permalink":"http://catx.me/tags/HTML5/","postCount":2},{"name":"sea.js","slug":"sea-js","path":"tags/sea-js/","permalink":"http://catx.me/tags/sea-js/","postCount":1},{"name":"测试","slug":"测试","path":"tags/测试/","permalink":"http://catx.me/tags/测试/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"5dfb6067c389fb6279996dd4422c202af63ffa91","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook.json","path":"2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook/","data":{"title":"通过Git Pre-Commit Hook执行MSBuild和MSTest","content":"<p>Git的pre-commit hook会在commit之前执行，当脚本的返回值不为0的时候，终止commit过程，因此可以把编译、测试、lint等workflow放到这一hook中，减少引入到版本库中的bug。</p>\n<p>以下脚本用于调用MSBuild和MSTest对C#工程在commit前进行build和test。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh&#10; &#10;# Helper&#10;safeRunCommand() &#123;&#10;    typeset cmd=&#34;$*&#34;&#10;    typeset ret_code&#10; &#10;    echo cmd=$cmd&#10;    eval $cmd&#10;    ret_code=$?&#10;    if [ $ret_code != 0 ]; then&#10;        printf &#34;Error : [%d] when executing command: &#39;$cmd&#39;&#34; $ret_code&#10;        exit $ret_code&#10;    fi&#10;&#125;&#10; &#10;# Path To MSBuild.exe&#10;MSBuild=&#34;/c/Windows/Microsoft.NET/Framework/v4.0.30319/MSBuild.exe&#34;&#10;# Path To MSTest.exe&#10;MSTest=&#34;/d/Program\\ Files\\ \\(x86\\)/Microsoft\\ Visual\\ Studio\\ 11.0/Common7/IDE/MSTest.exe&#34;&#10;# Get Project root path (without tailing /)&#10;ProjectRoot=&#34;$(git rev-parse --show-toplevel)&#34;&#10; &#10;# Test Containers (without leading /)&#10;Tests=(&#10;    &#34;ConsoleSharp.Tests/bin/Debug/ConsoleSharp.Tests.dll&#34; &#10;    &#34;Mirror.Test/bin/Debug/Mirror.Test.dll&#34;&#10;)&#10; &#10; &#10;# Build&#10;safeRunCommand $MSBuild $ProjectRoot/ConsoleSharp.sln&#10; &#10;# Test&#10;Args=(&#34;$&#123;Tests[@]/#//testcontainer:$ProjectRoot/&#125;&#34;)&#10;safeRunCommand $MSTest $(eval &#39;echo &#34;$&#123;Args[*]&#125;&#34;&#39;)</span><br></pre></td></tr></table></figure>\n","date":"2014-01-15T13:06:56.000Z","path":"2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"json":"data/posts/2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook.json","tags":[{"name":"Shell","slug":"Shell","path":"tags/Shell/","permalink":"http://catx.me/tags/Shell/","postCount":1},{"name":"git","slug":"git","path":"tags/git/","permalink":"http://catx.me/tags/git/","postCount":2},{"name":"测试","slug":"测试","path":"tags/测试/","permalink":"http://catx.me/tags/测试/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"7b3e1a9071bb466c6e9d1b452d294ab9544c5cbb","isDigest":true}],"sha1":"142898ef98739a7413b0e5db4e64920882734b96"}