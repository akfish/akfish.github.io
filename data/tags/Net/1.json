{"tag":".Net","isDark":false,"type":"tag","path":"tags/Net/","json_base":"data/tags/Net/","json":"data/tags/Net/1.json","current":1,"total":1,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2014/03/01/generate-dynamic-proxy-class-at-runtime-with-ilgenerator-c-sharp.json","path":"2014/03/01/generate-dynamic-proxy-class-at-runtime-with-ilgenerator-c-sharp/","data":{"title":"用C# ILGenerator在运行时动态生成proxy","content":"<h2 id=\"u95EE_u9898_u63CF_u8FF0\"><a href=\"#u95EE_u9898_u63CF_u8FF0\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>C#中经常会遇到通过单一入口动态调用对象或服务的情况，形如：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">ProxyBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">object</span> <span class=\"title\">Invoke</span>(<span class=\"params\"><span class=\"keyword\">object</span> someMethodRelatedInfo, <span class=\"keyword\">object</span>[] arguments</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如Reflection，远程服务，Host动态脚本引擎时从C#调用引擎context内的方法等等情况都可以归类于这样的模型。</p>\n<p>一种较好的工程实现就是把这些服务方法用接口定义，获得强类型的校验，避免出现不必要的bug，并便于维护。如：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFooService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MethodWithNoReturn</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MethodTakeParameterAndReturn</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于不同的后端，需要有具体的调用实现：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FooProxyBase</span> : <span class=\"title\">ProxyBase</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">object</span> <span class=\"title\">Invoke</span>(<span class=\"params\"><span class=\"keyword\">object</span> someMethodRelatedInfo, <span class=\"keyword\">object</span>[] arguments</span>)</span><br><span class=\"line\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Pack to JSON and send via http</span></span><br><span class=\"line\">    <span class=\"comment\">// Or adapte and call other classes</span></span><br><span class=\"line\">    <span class=\"comment\">// Or whatever</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终的Proxy类通过继承调用实现类，同时实现服务约定接口实现：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FooService : FooProxyBase, IFooService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  #region Implement IFooService</span><br><span class=\"line\">  public void MethodWithNoReturn() </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Invoke(\"MethodWithNoReturn\", new object[0]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public int MethodTakeParameterAndReturn(int a, int b)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    return Invoke(\"MethodTakeParameterAndReturn\", new object[] &#123; a, b &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #endregion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来有一个显然的问题，Proxy类包含大量重复的代码，方法越多实现起来越费劲。这个问题的point of interest就在于Proxy类的动态生成，实现以后只需要一行代码就能替代人肉实现一个巨大的Proxy类：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IFooService proxy = ProxyEmitter.CreateProxy&amp;lt;FooProxyBase, IFooService&amp;gt;(<span class=\"comment\">/*Constructor parameters are supported*/</span>);</span><br></pre></td></tr></table></figure>\n<p>要动态生成Proxy类有很多种方法（如生成源代码然后编译），这里采用在运行时通过Reflection获取服务接口的方法，动态生成Proxy类，最后用ILGenerator.Emit用.Net IL实现代码逻辑。</p>\n<h2 id=\"u5B9E_u73B0_u8981_u70B9\"><a href=\"#u5B9E_u73B0_u8981_u70B9\" class=\"headerlink\" title=\"实现要点\"></a>实现要点</h2><p>如何动态创建Assembly, Module, Type的框架性代码MSDN有详尽的walkthrough，不在本文讨论重点，具体实现可参考源代码。</p>\n<p>这一节记录在实现这个项目中几处逻辑的IL代码生成，有几点是必须要知道的：</p>\n<ul>\n<li>.Net CLR是基于栈的虚拟机</li>\n<li>.Net CLR（在生成C#类时）是强类型的</li>\n<li>参数顺序入栈</li>\n<li>非static method的第一个参数总是this指针</li>\n</ul>\n<p>1. 有参数的constructor</p>\n<p>在C#中很多涉及自动生成的情况（如serialization）都要求无参数的constructor，在有的情况下很让人忧桑，其实要支持有参数的constructor也是可行的。</p>\n<p>如果父类只有一个有参数的constructor，子类的constructor实现必须用足够的参数构造：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span>: <span class=\"title\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Derived</span>(<span class=\"params\"><span class=\"keyword\">int</span> may, <span class=\"keyword\">string</span> para, <span class=\"keyword\">object</span>[] meters</span>): <span class=\"title\">base</span>(<span class=\"params\">may, para, meters</span>) </span>&#123;&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用IL实现上述代码，需要将参数重新压栈，然后call base的ctor指针：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">EmitCtor</span>(<span class=\"params\">TypeBuilder tBuilder, ConstructorInfo ctor</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pTypes = ctor.GetParameters().Select(p =&amp;gt; p.ParameterType).ToArray();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = Emitter.GetConstructor(</span><br><span class=\"line\">        tBuilder,</span><br><span class=\"line\">        MethodAttributes.Public |</span><br><span class=\"line\">        MethodAttributes.HideBySig |</span><br><span class=\"line\">        MethodAttributes.SpecialName |</span><br><span class=\"line\">        MethodAttributes.RTSpecialName,</span><br><span class=\"line\">        pTypes</span><br><span class=\"line\">        );</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ilGen = builder.GetILGenerator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// No locals</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load all args, note arg 0 is this pointer, so must emit one more</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt;= pTypes.Length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DoEmit(ilGen, OpCodes.Ldarg_S, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Call base ctor</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Call, ctor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的IL形如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IL_0000: ldarg.0</span><br><span class=\"line\">IL_0001: ldarg.1</span><br><span class=\"line\">IL_0002: ldarg.2</span><br><span class=\"line\">IL_0003: ldarg.3</span><br><span class=\"line\">IL_0004: call instance void Base::.ctor(int32, string, object)</span><br><span class=\"line\">IL_0009: ret</span><br></pre></td></tr></table></figure>\n<p>2. Array的初始化<br>由于Invoke的长相，决定了这个生成器中需要大量的生成object[]对象，并把参数装进去。<br>创建一个local variable，首先需要declare：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ilGen.DeclareLocal(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">object</span>[]))</span><br></pre></td></tr></table></figure>\n<p>每个method的运行环境里维护了一个local列表，IL代码通过index把local入栈和出栈。<br>创建Array对象，并设置到local：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize array</span></span><br><span class=\"line\"><span class=\"comment\">// IL_0006:  ldc.i4.x</span></span><br><span class=\"line\">DoEmit(ilGen, OpCodes.Ldc_I4_S, pTypes.Length);</span><br><span class=\"line\"><span class=\"comment\">// IL_0007:  newarr     [mscorlib]System.Object</span></span><br><span class=\"line\">DoEmit(ilGen, OpCodes.Newarr, <span class=\"keyword\">typeof</span>(Object));</span><br><span class=\"line\"><span class=\"comment\">// IL_000c:  stloc.1</span></span><br><span class=\"line\">DoEmit(ilGen, OpCodes.Stloc_0);</span><br><span class=\"line\">``` </span><br><span class=\"line\">对Array元素的逐条赋值由<span class=\"number\">4</span>~<span class=\"number\">5</span>条机器指令完成：</span><br><span class=\"line\"></span><br><span class=\"line\">*   ldloc.?将array入栈</span><br><span class=\"line\">*   ldc_i4_?将当前元素的index入栈</span><br><span class=\"line\">*   将需要赋给元素的值入栈（本例中为参数用ldarg_s，注意参数<span class=\"number\">0</span>为<span class=\"keyword\">this</span>指针）</span><br><span class=\"line\">*   如果是<span class=\"keyword\">value</span> type需要box</span><br><span class=\"line\">*   stelem.<span class=\"keyword\">ref</span>指令完成赋值</span><br><span class=\"line\"></span><br><span class=\"line\">```cs</span><br><span class=\"line\"><span class=\"comment\">// Now fill the array</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; pTypes.Length; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Load the array first</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_000X + 00: ldloc.0</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ldloc_0);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Push the index</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_000X + 01: ldc_i4_x</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ldc_I4_S, i);</span><br><span class=\"line\">    <span class=\"comment\">// Load argument i + 1 (note that argument 0 is this pointer(?))</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_000X + 02: ldarg_X</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Ldarg_S, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Box value type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pTypes[i].IsValueType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IL_000X + 03: box pTypes[i]</span></span><br><span class=\"line\">        DoEmit(ilGen, OpCodes.Box, pTypes[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Set arrary element</span></span><br><span class=\"line\">    <span class=\"comment\">// IL_00X + ??: stelem.ref</span></span><br><span class=\"line\">    DoEmit(ilGen, OpCodes.Stelem_Ref);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6E90_u4EE3_u7801_u53CA_u4F7F_u7528_u65B9_u6CD5\"><a href=\"#u6E90_u4EE3_u7801_u53CA_u4F7F_u7528_u65B9_u6CD5\" class=\"headerlink\" title=\"源代码及使用方法\"></a>源代码及使用方法</h2><p>见<a href=\"https://github.com/akfish/ProxyEmitter\" target=\"_blank\" rel=\"external\">GitHub</a>。</p>\n","date":"2014-02-28T18:50:56.000Z","path":"2014/03/01/generate-dynamic-proxy-class-at-runtime-with-ilgenerator-c-sharp/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"json":"data/posts/2014/03/01/generate-dynamic-proxy-class-at-runtime-with-ilgenerator-c-sharp.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"d38bc1c21649a430376bcbda4dead703b085610a","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/02/28/the-making-of-sarcasm-2-ast-generators-and-fun-with-visualization.json","path":"2014/02/28/the-making-of-sarcasm-2-ast-generators-and-fun-with-visualization/","data":{"title":"The Making Of Sarcasm (2) - AST, Generators and Fun with Visualization","content":"<p>In <a href=\"http://catx.me/2014/02/25/the-making-of-sarcasm-1/\">part 1</a> we discussed the design goals of Sarcasm and devised a grammar specification that covers most of Irony’s features.</p>\n<p>Continuing from <a href=\"https://github.com/akfish/Sarcasm/commit/15c9e6e1ef69bd1150d51af558e3a897e09accb8\" target=\"_blank\" rel=\"external\">commit 15c9e6</a>, in which I implemented the <a href=\"https://github.com/akfish/Sarcasm/blob/15c9e6e1ef69bd1150d51af558e3a897e09accb8/Sarcasm/Parser/SarcasmGrammar.cs\" target=\"_blank\" rel=\"external\">grammar specs</a> by hand with Irony, we will discuss the following topics:</p>\n<ul>\n<li>Construction of abstract syntax tree</li>\n<li>Generator workflow</li>\n<li>MarkDown generator</li>\n<li>Having some fun with visualization</li>\n</ul>\n<h2 id=\"AST_Overview\"><a href=\"#AST_Overview\" class=\"headerlink\" title=\"AST Overview\"></a>AST Overview</h2><p>After <a href=\"https://github.com/akfish/Sarcasm/blob/develop/Sarcasm/Parser/SarcasmGrammar.cs\" target=\"_blank\" rel=\"external\">grammar class</a> is implemented, the first thing you are going to do is to create a parser instance:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> language = <span class=\"keyword\">new</span> LanguageData(<span class=\"keyword\">new</span> SarcasmGrammar());</span><br><span class=\"line\"><span class=\"keyword\">var</span> parser = <span class=\"keyword\">new</span> Irony.Parsing.Parser(_language);</span><br></pre></td></tr></table></figure>\n<p>With the Parser instance, we can parse source code by simply:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parseTree = parser.Parse(sourceCode);</span><br><span class=\"line\"><span class=\"keyword\">var</span> parseRoot = parseTree.Root;</span><br><span class=\"line\"><span class=\"keyword\">var</span> astRoot = ParseRoot.AstNode;</span><br></pre></td></tr></table></figure>\n<p>If something is wrong with the grammar or source code, parseRoot and astRoot will be null. For now I will not go into error handling.</p>\n<p>Two kinds of trees are generated when Irony parses the source code: parsing tree and optional abstract syntax tree. To create an AST, you must do the following:</p>\n<p>1. Set language flag in grammar class’s constructor</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LanguageFlags |= LanguageFlags.CreateAst;</span><br></pre></td></tr></table></figure>\n<p>2. Create a bunch of AST node class deriving from Irony.Interpreter.Ast (also remember to add reference to assembly Irony.Interpreter.dll).</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Make your own base class will make life eaiser</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">SarcasmNode</span> : <span class=\"title\">AstNode</span> &#123;<span class=\"comment\">/*...*/</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// For other nodes</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Document</span> : <span class=\"title\">SarcasmNode</span> &#123;<span class=\"comment\">/*...*/</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IdNode</span> : <span class=\"title\">SarcasmNode</span> &#123;<span class=\"comment\">/*...*/</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">/*...*/</span></span><br></pre></td></tr></table></figure>\n<p>3. Assign AST node class to each Terminal/NonTerminal instances.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// For terminals</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ID = <span class=\"keyword\">new</span> IdentifierTerminal(<span class=\"string\">\"ID\"</span>);</span><br><span class=\"line\">ID.AstConfig.NodeType = <span class=\"keyword\">typeof</span> (IdNode);</span><br><span class=\"line\"><span class=\"comment\">// For non-terminals</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Directive = <span class=\"keyword\">new</span> NonTerminal(<span class=\"string\">\"Directive\"</span>, <span class=\"keyword\">typeof</span>(DirectiveNode));</span><br></pre></td></tr></table></figure>\n<p>4. Override AST node’s Init method to handle initialization.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In AST node class</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> AstNode ChildNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Init</span>(<span class=\"params\">AstContext context, ParseTreeNode treeNode</span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Keep this</span></span><br><span class=\"line\">            <span class=\"keyword\">base</span>.Init(context, treeNode);</span><br><span class=\"line\">            <span class=\"comment\">// treeNode is the corresponding node in parse tree, contains information like:</span></span><br><span class=\"line\">            <span class=\"comment\">// Token</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> token = treeNode.Token;</span><br><span class=\"line\">            <span class=\"comment\">// Term</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> term = treeNode.Term;</span><br><span class=\"line\">            <span class=\"comment\">// Child nodes</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> nodes = treeNode.GetMappedChildNodes();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Set AsString to a human readable format. It will be used to display AST in Irony.GrammarExplorer</span></span><br><span class=\"line\">            AsString = <span class=\"string\">\"Id: \"</span> + token.Text;</span><br><span class=\"line\">            <span class=\"comment\">// Use AddChild to build tree structure, it returns an AstNode instance of child's AST node </span></span><br><span class=\"line\">            ChildNode = AddChild(<span class=\"keyword\">string</span>.Empty, nodes[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>That’s almost all you need to know about how to construct an AST. However, if you mess it up, things can get ugly since the debug information is extremely not helpful. The most common exception on can get is:</p>\n<blockquote>\n<p>System.NullReferenceException: Object reference not set to an instance of an object.<br>at Irony.Ast.AstBuilder.BuildAst(ParseTreeNode parseNode) in f:\\Dev\\Tool\\Irony_2013_12_12\\Irony\\Ast\\AstBuilder.cs:line 97<br>This will not help you at all. But I will tell you that this always has to do with forgetting to set AST node type to one of your Terminals/Non-Terminals.</p>\n</blockquote>\n<p>Here are some tips I learned in the hard way (the only way mostly, since Irony’s documentation is poor):</p>\n<ul>\n<li>Assign AST node type to all Terminals/NonTerminals, including any intermediate/temporary ones.</li>\n<li>Except the ones marked as transient. They will not be created at all.</li>\n<li>CommentTerminals will NOT be mapped to AST at all. You will get the above error regardless the AST node type is set or not.</li>\n</ul>\n<h2 id=\"Generator_Workflow\"><a href=\"#Generator_Workflow\" class=\"headerlink\" title=\"Generator Workflow\"></a>Generator Workflow</h2><p>AST marks the watershed between compiler’s front end and back end. Although there’re still some work (e.g. type validation and  semantic analysis) left to be done, we can already generate something with this AST now. The most commonly used method here is the <a href=\"http://en.wikipedia.org/wiki/Visitor_pattern\" target=\"_blank\" rel=\"external\">visitor pattern</a>:</p>\n<p>1. Declare a interface for Visitor, one overload for each AST node</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISarcasmVisitor</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span>(<span class=\"params\">IdNode node</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span>(<span class=\"params\">Document node</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Visit</span>(<span class=\"params\">StringValueNode node</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// others</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2. Add virtual/abstract method to AST base class and implement in all derived class</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">SarcasmNode</span> : <span class=\"title\">AstNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Accept</span>(<span class=\"params\">ISarcasmVisitor visitor</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Document</span> : <span class=\"title\">SarcasmNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Accept</span>(<span class=\"params\">ISarcasmVisitor visitor</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        visitor.Visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3. Then we can create a generator by implement specific ISarcasmVisitor for different workflow, not only for target code generation but also outlining, semantic analysis.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">TargetGenerator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> SarcasmParser Parser &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">TargetGenerator</span>(<span class=\"params\">SarcasmParser parser</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        Parser = parser;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">BeforeVisitor</span>(<span class=\"params\">StreamWriter writer, ISarcasmVisitor visitor</span>) </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> ISarcasmVisitor <span class=\"title\">MakeVisitor</span>(<span class=\"params\">StreamWriter writer</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">AfterVisitor</span>(<span class=\"params\">StreamWriter writer, ISarcasmVisitor visitor</span>) </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Generate</span>(<span class=\"params\">StreamReader sourceStream, StreamWriter targetStream</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Parse first</span></span><br><span class=\"line\">        Parser.Parse(sourceStream);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Parser.IsValid)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> visitor = MakeVisitor(targetStream);</span><br><span class=\"line\">            BeforeVisitor(targetStream, visitor);</span><br><span class=\"line\">            <span class=\"comment\">// Visit AST</span></span><br><span class=\"line\">            Parser.Document.Accept(visitor);</span><br><span class=\"line\">            AfterVisitor(targetStream, visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        targetStream.Flush();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Parser.IsValid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MarkDown_Generation\"><a href=\"#MarkDown_Generation\" class=\"headerlink\" title=\"MarkDown Generation\"></a>MarkDown Generation</h2><p>MarkDown generation for Sarcasm is very straight forward, since the syntax is in MarkDown. All I need to do is remove comment delimiters, add correct amount of line endings, format grammar rule into block and escape some special characters.</p>\n<p>Again I won’t bother with the details here. Just see <a href=\"https://github.com/akfish/Sarcasm/blob/develop/Sarcasm/Generator/MarkDownGenerator.cs\" target=\"_blank\" rel=\"external\">the code</a> for yourself.</p>\n<h2 id=\"Something_Fun_with_Visualization\"><a href=\"#Something_Fun_with_Visualization\" class=\"headerlink\" title=\"Something Fun with Visualization\"></a>Something Fun with Visualization</h2><p>The original plan was to start generate C# parser class from here. Then I found an interesting project <a href=\"http://arborjs.org\" target=\"_blank\" rel=\"external\">arbor.js</a> (especially its <a href=\"http://arborjs.org/halfviz/\" target=\"_blank\" rel=\"external\">halfviz</a> demo) and decided to do something fun with it. The idea is to make a better tool for debug. What debug information is better than a visualized one?</p>\n<p>The halfviz demo converts a simple language called HalfTone to a node network. With the generator framework in place, it took me less than half an hour to <a href=\"https://github.com/akfish/Sarcasm/blob/feature/Visualization/Sarcasm/Generator/HalfToneGenerator.cs\" target=\"_blank\" rel=\"external\">generate node</a> representation from Sarcasm grammar source file. This can be used to visualize references between terminals and non-terminals:</p>\n<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/vis.png\"><img src=\"/images/4be5b8b991d3bcafb280141940e1291eedbaf612.png\" alt=\"sarcasm-vis\"></a></p>\n<p>You can play with it live <a href=\"http://arborjs.org/halfviz/#/NjM0OA\" target=\"_blank\" rel=\"external\">here</a>. It looks more confusing in this form, for now. But with some interaction (filtering, folding, highlighting for example), it can help develops quickly navigate though the grammar.<br>Here’s another concept of how to visualize grammar related errors in this form (click to enlarge):<br><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/concept.png\"><img src=\"/images/a645da29630a43fdaaedfc76d6a683eeeb522ebf.png\" alt=\"sarcasm-concept\"></a></p>\n<p>Imagine view build errors in Visual Studio with this graph and navigate to the line that is responsible by click on the node. I definitely will try to create something like that later when I begin to make tool chain for Sarcasm.</p>\n","date":"2014-02-27T18:46:18.000Z","path":"2014/02/28/the-making-of-sarcasm-2-ast-generators-and-fun-with-visualization/","isDark":true,"featureColor":"#266cb4","featureImage":"/image/stock/1.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#266cb4","isDark":true,"contrast":5.450121616568956},"Muted":{"color":"#4b70a6","isDark":true,"contrast":5.296212493095912},"DarkVibrant":{"color":"#3260a1","isDark":true,"contrast":10.521199995853594},"DarkMuted":{"color":"#515787","isDark":true,"contrast":11.462157427934459},"LightVibrant":{"color":"#5791c6","isDark":true,"contrast":3.512948192359975},"LightMuted":{"color":"#9bb4cc","isDark":false,"contrast":2.144138719552091}},"json":"data/posts/2014/02/28/the-making-of-sarcasm-2-ast-generators-and-fun-with-visualization.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"C++","slug":"C","path":"tags/C/","permalink":"http://catx.me/tags/C/","postCount":2},{"name":"Markdown","slug":"Markdown","path":"tags/Markdown/","permalink":"http://catx.me/tags/Markdown/","postCount":1},{"name":"Sarcasm","slug":"Sarcasm","path":"tags/Sarcasm/","permalink":"http://catx.me/tags/Sarcasm/","postCount":1},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"87744898d698bead13d8f9f2ac546d14d5e0d31c","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/02/25/the-making-of-sarcasm-1.json","path":"2014/02/25/the-making-of-sarcasm-1/","data":{"title":"The Making Of Sarcasm (1) - Design Goals And Grammar","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>This is not a tutorial on how to use <a href=\"https://irony.codeplex.com/\" target=\"_blank\" rel=\"external\">Irony.net</a>. When I am done with this series of articles, hopefully we will never need to deal with Irony directly ever again.</p>\n<p>In case you didn’t know what Irony is, here is the introduction on its official site:</p>\n<blockquote>\n<p><strong>Irony</strong> is a development kit for implementing languages on .NET platform. Unlike most existing yacc/lex-style solutions Irony does not employ any scanner or parser code generation from grammar specifications written in a specialized meta-language. In Irony the target language grammar is coded directly in c# using operator overloading to express grammar constructs. Irony’s scanner and parser modules use the grammar encoded as c# class to control the parsing process.</p>\n</blockquote>\n<p>Looks fantastic. However, after I tried for days to implement CoffeeScript grammar with it, I encountered some issues:</p>\n<ul>\n<li>While constructing grammar with C# directly sounds cool, the syntax is just not as clean and efficient as a special design DSL would be.</li>\n<li>There are absolutely no compile-time checking on grammar. You have to compile it into dll first, then load it with Irony.GrammarExplorer.</li>\n<li>It is extremely hard, if not impossible, to track any grammar errors back to source code.</li>\n<li>On top of that, debug information on Shift-Reduce and Reduce-Reduce conflict is almost unreadable for a complex grammar.</li>\n</ul>\n<p>It’s a nice concept with poor tooling, which makes it scale poorly as the complexity of grammar grows. After some painstaking efforts to make my CoffeeScript parser to work, I finally begin to do something about it. I decide to create:</p>\n<blockquote>\n<p><strong>Sarcasm</strong>, an EBNF-like DSL that generates Irony.</p>\n</blockquote>\n<p>The design goals are to:</p>\n<ul>\n<li>Implement a DSL that allow developers to define grammar in a more clean and efficient syntax that looks very much like EBNF notation.</li>\n<li>Generate Irony grammar implementation (in C#) and a nice formatted grammar specification document (in MarkDown)</li>\n<li>Enable compile-time error checking and grammar validation</li>\n<li>Trace any errors back to the source code</li>\n<li>Improve the readability of debug information for grammar conflicts</li>\n<li>Provide necessary Visual Studio languages services, templates and tools</li>\n</ul>\n<h2 id=\"Sarcasm_Workflow\"><a href=\"#Sarcasm_Workflow\" class=\"headerlink\" title=\"Sarcasm Workflow\"></a>Sarcasm Workflow</h2><ol>\n<li>Developer writes grammar specification file (.sarc)</li>\n<li>Compiler checks for syntax error and generates both Irony grammar class (in C#) and spec docs (in MarkDown)</li>\n<li>VS continues build process</li>\n<li>If build failed, Sarcasm tools filters though all error messages, and map related errors back to specific tokens in .sarc file.</li>\n<li>If build succeeded,Sarcasm toolsloads the assembly and validates grammar.</li>\n<li>Sarcasm toolstranslates any grammar conflicts, errors into a readable format and trace back to specific rule in .sarc file.<br>The entire workflow should be seamlessly integrated with Visual Studio.</li>\n</ol>\n<h2 id=\"Sarcasm_Grammar\"><a href=\"#Sarcasm_Grammar\" class=\"headerlink\" title=\"Sarcasm Grammar\"></a>Sarcasm Grammar</h2><p>In a nutshell, the Sarcasm grammar is a hybrid of MakeDown and modified EBNF notation. Here’s a quick snippet:<span style=\"line-height: 1.5em;\"></span></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"header\"># H1</span></span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Block comment</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">// Single Line Comment</span><br><span class=\"line\"></span><br><span class=\"line\">// Directive</span><br><span class=\"line\">@class SarcasmGrammar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"header\">## H2</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Declarations</span><br><span class=\"line\">ID      = new IdentifierTerminal(\"ID\");</span><br><span class=\"line\">STRING  = new StringLiteral(\"STRING\", \"\\\"\", StringOptions.AllowsAllEscapes);</span><br><span class=\"line\"></span><br><span class=\"line\">// Production Rules</span><br><span class=\"line\">SimpleValue := STRING | ID;  </span><br><span class=\"line\"></span><br><span class=\"line\">// Repeat</span><br><span class=\"line\">Ids := ID&#123;&#125;;</span><br><span class=\"line\">Ids := ID*;</span><br><span class=\"line\">Ids := ID?;</span><br><span class=\"line\">Ids := ID+;</span><br><span class=\"line\"></span><br><span class=\"line\">// Repeat with delimiters</span><br><span class=\"line\">Ids := ID&#123;\",\"&#125;;</span><br><span class=\"line\">Ids := ID*(\".\");</span><br><span class=\"line\">Ids := ID+(\",\");</span><br><span class=\"line\"><span class=\"header\">### H3</span></span><br></pre></td></tr></table></figure>\n<p>As you can see, the grammar consists of:</p>\n<ul>\n<li>MarkDown headers (start with one or more <span style=\"text-decoration: underline;\">#</span>). Directly used for outlining.</li>\n<li>Comments (single line and block). All other text contents go into comments. MarkDown syntax can be used in comments.</li>\n<li>Directives (starting with <span style=\"text-decoration: underline;\">@)</span>. Configures compiler behaviors like generated class names.</li>\n<li>Declarations. Declare and initialize grammar terminals.</li>\n<li>Production rules. Specifies the grammar rules.<br>I won’t go into full details here. But you can see for yourself:</li>\n</ul>\n<p>Here is the <a href=\"https://gist.github.com/akfish/9167407#file-sarcasm-sarc\" target=\"_blank\" rel=\"external\">full grammar of Sarcasm writing in Sarcasm</a>.</p>\n<p>And here is the <a href=\"https://gist.github.com/akfish/9167407#file-sarcasm-md\" target=\"_blank\" rel=\"external\">MarkDownspecification documentation generated from that file</a></p>\n<p>While the<a href=\"https://github.com/akfish/Sarcasm\" target=\"_blank\" rel=\"external\">project</a>is still in early developing stage, the grammar is mostly completed. I should be able to bootstrap it in a day or two.</p>\n","date":"2014-02-24T20:13:46.000Z","path":"2014/02/25/the-making-of-sarcasm-1/","isDark":true,"featureColor":"#2f5a75","featureImage":"/image/stock/2.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2f5a75","isDark":true,"contrast":12.293085300100254},"Muted":{"color":"#64767c","isDark":true,"contrast":5.234975288978602},"DarkVibrant":{"color":"#1f4b68","isDark":true,"contrast":13.414009026295917},"DarkMuted":{"color":"#477084","isDark":true,"contrast":5.611238656641319},"LightVibrant":{"color":"#ecdabf","isDark":false,"contrast":1.3683052639522741},"LightMuted":{"color":"#95b1b5","isDark":false,"contrast":2.274202152883682}},"json":"data/posts/2014/02/25/the-making-of-sarcasm-1.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"61b28f035d12be8855506fec2c0db5f9289e687b","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/02/08/visual-studio-gplex-gppg-project-config.json","path":"2014/02/08/visual-studio-gplex-gppg-project-config/","data":{"title":"Visual Studio GPLEX/GPPG配置","content":"<p>入手实现Coffee#（CoffeeScript for .Net）的编译器时，发现了<a href=\"http://gplex.codeplex.com\" target=\"_blank\" rel=\"external\">GPLEX</a>和<a href=\"http://gppg.codeplex.com/\" target=\"_blank\" rel=\"external\">GPPG</a>这一对.Net环境下类Lex和Yacc的工具，用于自动生成C#实现的Scanner和Parser，可以快速的构建编译器的前端部分。使用时需要编写.lex（词法描述）和.y（语法描述）文件，调用工具生成.cs文件，加入到工程中编译。</p>\n<p>通过修改csproject文件的配置，可以让vs自动处理.lex/.y文件的生成以及依赖关系。工程目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CoffeeSharp&#10; &#9500;&#9472;documents&#10; &#9500;&#9472;src&#10; &#9474; &#9492;&#9472;CoffeeSharp&#10; &#9474; &#9500;&#9472;CoffeeSharp.csproj&#10; &#9474; &#9500;&#9472;Scanner.lex&#10; &#9474; &#9500;&#9472;Scanner.cs&#10; &#9474; &#9500;&#9472;Parser.y&#10; &#9474; &#9500;&#9472;Parser.cs&#10; &#9474; &#9492;&#9472;...&#10; &#9492;&#9472;tools&#10; &#9500;&#9472;gppg.exe&#10; &#9492;&#9472;gplex.exe</span><br></pre></td></tr></table></figure>\n<p>编辑CoffeeScript.csproj文件：</p>\n<p>1. 添加依赖关系：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;!-- Generated with GPLEX and GPPG--&amp;gt;</span><br><span class=\"line\">&amp;lt;ItemGroup&amp;gt;</span><br><span class=\"line\">  &amp;lt;Compile Include=\"Scanner.cs\"&amp;gt;</span><br><span class=\"line\">    &amp;lt;AutoGen&amp;gt;True&amp;lt;/AutoGen&amp;gt;</span><br><span class=\"line\">    &amp;lt;DependentUpon&amp;gt;Scanner.lex&amp;lt;/DependentUpon&amp;gt;</span><br><span class=\"line\">  &amp;lt;/Compile&amp;gt;</span><br><span class=\"line\">  &amp;lt;Compile Include=\"Parser.cs\"&amp;gt;</span><br><span class=\"line\">    &amp;lt;AutoGen&amp;gt;True&amp;lt;/AutoGen&amp;gt;</span><br><span class=\"line\">    &amp;lt;DependentUpon&amp;gt;Parser.y&amp;lt;/DependentUpon&amp;gt;</span><br><span class=\"line\">  &amp;lt;/Compile&amp;gt;</span><br><span class=\"line\">&amp;lt;/ItemGroup&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>2. 创建Lex/Yacc Target（修改原有的.lex/.y文件项）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;!-- Lexer And Parser Specification Files --&amp;gt;</span><br><span class=\"line\">&amp;lt;ItemGroup&amp;gt;</span><br><span class=\"line\">  &amp;lt;Lex Include=\"Scanner.lex\" /&amp;gt;</span><br><span class=\"line\">  &amp;lt;Yacc Include=\"Parser.y\" /&amp;gt;</span><br><span class=\"line\">&amp;lt;/ItemGroup&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>3. 设置Target生成规则，命令行根据实际情况修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;!-- Lex Target --&amp;gt;</span><br><span class=\"line\">&amp;lt;Target Name=\"LexGenerator\" Inputs=\"@(Lex)\" Outputs=\"@(Lex-&amp;gt;'%(RelativeDir)%(Filename).cs')\"&amp;gt;</span><br><span class=\"line\">  &amp;lt;Exec Command=\"$(SolutionDir)..\\tools\\gplex.exe /unicode /out:@(Lex -&amp;gt;'%(RelativeDir)%(Filename).cs') %(Lex.Identity)\" /&amp;gt;</span><br><span class=\"line\">  &amp;lt;CreateItem Include=\"%(Lex.RelativeDir)%(Lex.Filename).cs\"&amp;gt;</span><br><span class=\"line\">    &amp;lt;Output TaskParameter=\"Include\" ItemName=\"FileWrites\" /&amp;gt;</span><br><span class=\"line\">  &amp;lt;/CreateItem&amp;gt;</span><br><span class=\"line\">&amp;lt;/Target&amp;gt;</span><br><span class=\"line\">&amp;lt;!-- Yacc Target --&amp;gt;</span><br><span class=\"line\">&amp;lt;Target Name=\"YaccGenerator\" Inputs=\"@(Yacc)\" Outputs=\"@(Yacc-&amp;gt;'%(RelativeDir)%(Filename).cs')\"&amp;gt;</span><br><span class=\"line\">  &amp;lt;Exec Command=\"$(SolutionDir)..\\tools\\gppg.exe /gplex /out:@(Yacc -&amp;gt;'%(RelativeDir)%(Filename).cs') %(Yacc.Identity)\" /&amp;gt;</span><br><span class=\"line\">  &amp;lt;CreateItem Include=\"%(Yacc.RelativeDir)%(Yacc.Filename).cs\"&amp;gt;</span><br><span class=\"line\">    &amp;lt;Output TaskParameter=\"Include\" ItemName=\"FileWrites\" /&amp;gt;</span><br><span class=\"line\">  &amp;lt;/CreateItem&amp;gt;</span><br><span class=\"line\">&amp;lt;/Target&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>4. 设置依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;PropertyGroup&amp;gt;</span><br><span class=\"line\">    &amp;lt;BuildDependsOn&amp;gt;LexGenerator;YaccGenerator;$(BuildDependsOn)&amp;lt;/BuildDependsOn&amp;gt;</span><br><span class=\"line\">    &amp;lt;CompileDependsOn&amp;gt;LexGenerator;YaccGenerator;$(CompileDependsOn)&amp;lt;/CompileDependsOn&amp;gt;</span><br><span class=\"line\">  &amp;lt;/PropertyGroup&amp;gt;</span><br></pre></td></tr></table></figure>\n<p>重新载入工程文件，会看到生成的.cs文件都折叠在了对应的.lex/.y文件之下：</p>\n<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/yacc-lex-config.png\"><img src=\"/images/664de6c412578efb10f8d11276fe46b559eceace.png\" alt=\"yacc-lex-config\"></a></p>\n<p>编译时的错误信息也会显示在vs中：</p>\n<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/lex-error.png\"><img src=\"/images/757c2a223d238b4ef3fa0349d6be0704996d7330.png\" alt=\"lex-error\"></a></p>\n<p>和使用pre-build event来实现预编译相比，这种方式最大的优点在于依赖关系明显，不易误操作编辑生成的文件，并且vs只会在.lex/.y文件有变更的情况下重新生成代码。支持按需生成会省不少事，比如在项目中配置了git pre-commit hook要求<a href=\"http://catx.me/2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook/\" title=\"通过Git Pre-Commit Hook执行MSBuild和MSTest\">每次commit前检查build和test的正确性</a>，而很多代码自动生成工具会加上时间戳，这样编译一次就会带来文件变更，导致每次commit后都会产生新的diff。</p>\n","date":"2014-02-07T21:10:49.000Z","path":"2014/02/08/visual-studio-gplex-gppg-project-config/","isDark":true,"featureColor":"#2b6a7d","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2b6a7d","isDark":true,"contrast":6.152506571402196},"Muted":{"color":"#628d9b","isDark":true,"contrast":3.8818866665042275},"DarkVibrant":{"color":"#08536a","isDark":true,"contrast":13.30121420712154},"DarkMuted":{"color":"#4d7e8e","isDark":true,"contrast":4.693454244598322},"LightVibrant":{"color":"#74d4e4","isDark":false,"contrast":1.7100585291773622},"LightMuted":{"color":"#769ca9","isDark":false,"contrast":2.958324937392382}},"json":"data/posts/2014/02/08/visual-studio-gplex-gppg-project-config.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":9},{"name":"Visual Studio 2012","slug":"Visual-Studio-2012","path":"tags/Visual-Studio-2012/","permalink":"http://catx.me/tags/Visual-Studio-2012/","postCount":2},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"5fbce7a11aae5a212be0b0c0a4cf5c93fe795a4b","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code.json","path":"2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","data":{"title":"从CoffeeScript源代码中获取文法并可视化","content":"<p>最近在研究把CoffeeScript编译到.Net CLR环境上运行的可能性，在几个CoffeeScript compiler的实现中，没有发现对文法定义的specification，如果要人肉重建不仅工作量忧桑，还有可能导致兼容性问题。于是看了下源代码，发现略施小计就能解决这个问题。</p>\n<p>CoffeeScript的Parser使用jison生成的，所有的文法都在<a href=\"http://coffeescript.org/documentation/docs/grammar.html\" target=\"_blank\" rel=\"external\">grammar.coffee</a>里定义了。这个代码非常好改，去掉对jison的调用，把语法定义用JSON.stringify() format了再输出，执行<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">修改后的代码</a>：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee grammar.coffee</span><br></pre></td></tr></table></figure></p>\n<p>就会得到一大串jison格式的文法定义：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"tokens\"</span>:<span class=\"string\">\" TERMINATOR TERMINATOR TERMINATOR STATEMENT INDENT OUTDENT INDENT OUTDENT IDENTIFIER NUMBER STRING JS REGEX BOOL = = INDENT OUTDENT : : INDENT OUTDENT RETURN RETURN HERECOMMENT PARAM_START PARAM_END -&amp;gt; =&amp;gt;  ,  , ... = ... . ?. :: :: INDEX_START INDEX_END INDEX_SOAK &#123; &#125;  , TERMINATOR INDENT OUTDENT CLASS CLASS CLASS EXTENDS CLASS EXTENDS CLASS CLASS CLASS EXTENDS CLASS EXTENDS SUPER SUPER  FUNC_EXIST CALL_START CALL_END CALL_START CALL_END THIS @ @ [ ] [ ] .. ... [ ] , TERMINATOR INDENT OUTDENT INDENT OUTDENT , TRY TRY TRY FINALLY TRY FINALLY CATCH THROW ( ) ( INDENT OUTDENT ) WHILE WHILE WHEN UNTIL UNTIL WHEN LOOP LOOP FOR FOR FOR OWN , FORIN FOROF FORIN WHEN FOROF WHEN FORIN BY FORIN WHEN BY FORIN BY WHEN SWITCH INDENT OUTDENT SWITCH INDENT ELSE OUTDENT SWITCH INDENT OUTDENT SWITCH INDENT ELSE OUTDENT LEADING_WHEN LEADING_WHEN TERMINATOR IF ELSE IF ELSE POST_IF POST_IF UNARY - + -- ++ -- ++ ? + - MATH SHIFT COMPARE LOGIC RELATION COMPOUND_ASSIGN COMPOUND_ASSIGN INDENT OUTDENT EXTENDS\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bnf\"</span>:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Root\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"\"</span>,<span class=\"string\">\"return $$ = new yy.Block;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body\"</span>,<span class=\"string\">\"return $$ = $1;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Block TERMINATOR\"</span>,<span class=\"string\">\"return $$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Body\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"Line\"</span>,<span class=\"string\">\"$$ = yy.Block.wrap([$1]);\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body TERMINATOR Line\"</span>,<span class=\"string\">\"$$ = $1.push($3);\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Body TERMINATOR\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Line\"</span>:</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [<span class=\"string\">\"Expression\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>],</span><br><span class=\"line\">      [<span class=\"string\">\"Statement\"</span>,<span class=\"string\">\"$$ = $1;\"</span>,<span class=\"literal\">null</span>]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>这样已经算是可用了，但可读性依然不高，经过一番搜索发现一个jison-to-w3c文法标记格式的<a href=\"http://bottlecaps.de/convert/\" target=\"_blank\" rel=\"external\">转换器</a>，得到<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">文法</a>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Root     ::= Body?&#10;Body     ::= Line ( TERMINATOR Line | TERMINATOR )*&#10;Line     ::= Expression&#10;           | Statement&#10;Statement&#10;         ::= Return&#10;           | Comment&#10;           | STATEMENT&#10;Expression&#10;         ::= Value&#10;           | Invocation&#10;           | Code&#10;           | Operation&#10;           | Assign&#10;           | If&#10;           | Try&#10;           | While&#10;           | For&#10;           | Switch&#10;           | Class&#10;           | Throw&#10;...</span><br></pre></td></tr></table></figure></p>\n<p>最后找到一个可视化文法的网站<a href=\"http://bottlecaps.de/rr/ui\" target=\"_blank\" rel=\"external\">Railroad Diagram Generator</a>将其可视化，just for fun:</p>\n<p><a href=\"http://catx.me/wordpress/wp-content/uploads/2014/02/coffee-grammar.png\"><img src=\"/images/064306e5ca2ed757a42cd94fd214d22e49fc19c8.png\" alt=\"coffee-grammar\"></a></p>\n<p>完整的图在：<a href=\"http://project.catx.me/other/coffee-grammar.xhtml\" target=\"_blank\" rel=\"external\">http://project.catx.me/other/coffee-grammar.xhtml</a></p>\n<p>源代码+完整的文法定义：<a href=\"https://gist.github.com/akfish/8827385\" target=\"_blank\" rel=\"external\">https://gist.github.com/akfish/8827385</a></p>\n","date":"2014-02-05T16:55:24.000Z","path":"2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code/","isDark":true,"featureColor":"#2f5a75","featureImage":"/image/stock/2.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#2f5a75","isDark":true,"contrast":12.293085300100254},"Muted":{"color":"#64767c","isDark":true,"contrast":5.234975288978602},"DarkVibrant":{"color":"#1f4b68","isDark":true,"contrast":13.414009026295917},"DarkMuted":{"color":"#477084","isDark":true,"contrast":5.611238656641319},"LightVibrant":{"color":"#ecdabf","isDark":false,"contrast":1.3683052639522741},"LightMuted":{"color":"#95b1b5","isDark":false,"contrast":2.274202152883682}},"json":"data/posts/2014/02/06/get-and-visualize-grammar-definition-of-coffee-script-from-source-code.json","tags":[{"name":".Net","slug":"Net","path":"tags/Net/","permalink":"http://catx.me/tags/Net/","postCount":5},{"name":"CoffeeScript","slug":"CoffeeScript","path":"tags/CoffeeScript/","permalink":"http://catx.me/tags/CoffeeScript/","postCount":9},{"name":"compiler","slug":"compiler","path":"tags/compiler/","permalink":"http://catx.me/tags/compiler/","postCount":5}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":24}]},"sha1":"495d221209b03d2c1b2cc2f61a3e91d6a54a4018","isDigest":true}],"sha1":"05ca677451ac1cb5a1d61129b15e9e584530f8e0"}