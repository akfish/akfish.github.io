{"tag":"git","isDark":false,"type":"tag","path":"tags/git/","json_base":"data/tags/git/","json":"data/tags/git/1.json","current":1,"total":1,"posts":[{"type":"post","json_base":"data/posts","json":"data/posts/2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook.json","path":"2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook/","data":{"title":"通过Git Pre-Commit Hook执行MSBuild和MSTest","content":"<p>Git的pre-commit hook会在commit之前执行，当脚本的返回值不为0的时候，终止commit过程，因此可以把编译、测试、lint等workflow放到这一hook中，减少引入到版本库中的bug。</p>\n<p>以下脚本用于调用MSBuild和MSTest对C#工程在commit前进行build和test。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh&#10; &#10;# Helper&#10;safeRunCommand() &#123;&#10;    typeset cmd=&#34;$*&#34;&#10;    typeset ret_code&#10; &#10;    echo cmd=$cmd&#10;    eval $cmd&#10;    ret_code=$?&#10;    if [ $ret_code != 0 ]; then&#10;        printf &#34;Error : [%d] when executing command: &#39;$cmd&#39;&#34; $ret_code&#10;        exit $ret_code&#10;    fi&#10;&#125;&#10; &#10;# Path To MSBuild.exe&#10;MSBuild=&#34;/c/Windows/Microsoft.NET/Framework/v4.0.30319/MSBuild.exe&#34;&#10;# Path To MSTest.exe&#10;MSTest=&#34;/d/Program\\ Files\\ \\(x86\\)/Microsoft\\ Visual\\ Studio\\ 11.0/Common7/IDE/MSTest.exe&#34;&#10;# Get Project root path (without tailing /)&#10;ProjectRoot=&#34;$(git rev-parse --show-toplevel)&#34;&#10; &#10;# Test Containers (without leading /)&#10;Tests=(&#10;    &#34;ConsoleSharp.Tests/bin/Debug/ConsoleSharp.Tests.dll&#34; &#10;    &#34;Mirror.Test/bin/Debug/Mirror.Test.dll&#34;&#10;)&#10; &#10; &#10;# Build&#10;safeRunCommand $MSBuild $ProjectRoot/ConsoleSharp.sln&#10; &#10;# Test&#10;Args=(&#34;$&#123;Tests[@]/#//testcontainer:$ProjectRoot/&#125;&#34;)&#10;safeRunCommand $MSTest $(eval &#39;echo &#34;$&#123;Args[*]&#125;&#34;&#39;)</span><br></pre></td></tr></table></figure>\n","date":"2014-01-15T13:06:56.000Z","path":"2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook/","isDark":false,"featureColor":"#d19e40","featureImage":"/image/stock/5.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#d19e40","isDark":false,"contrast":2.433412395275077},"Muted":{"color":"#798249","isDark":true,"contrast":4.168289617634703},"DarkVibrant":{"color":"#97623d","isDark":true,"contrast":7.586487507499872},"DarkMuted":{"color":"#5a4e32","isDark":true,"contrast":14.22073373466042},"LightVibrant":{"color":"#d6c395","isDark":false,"contrast":1.7356438765314866},"LightMuted":{"color":"#aea18e","isDark":false,"contrast":2.5336980009663206}},"permalink":"http://catx.me/2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook/","json":"data/posts/2014/01/15/run-msbuild-and-mstest-from-git-pre-commit-hook.json","tags":[{"name":"Shell","slug":"Shell","path":"tags/Shell/","permalink":"http://catx.me/tags/Shell/","postCount":1},{"name":"git","slug":"git","path":"tags/git/","permalink":"http://catx.me/tags/git/","postCount":2},{"name":"测试","slug":"测试","path":"tags/测试/","permalink":"http://catx.me/tags/测试/","postCount":2}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"efe30beb49e136a085529e178c53ea60d26a8ec5","isDigest":true},{"type":"post","json_base":"data/posts","json":"data/posts/2013/10/19/git-custom-transfer-protocol-1.json","path":"2013/10/19/git-custom-transfer-protocol-1/","data":{"title":"Git私有传输协议实现-接口篇(1)","content":"<p>Git默认支持http, https, ssh协议，同时也提供了扩展私有协议的方法，文档<a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-remote-helpers.html\" target=\"_blank\" rel=\"external\">git-remote-helpers</a>给出了详细的spec。</p>\n<p>比如要实现一种协议，把git repository存储（可加密）到私人的email邮箱中，以存储一些不便于host到GitHub的私人repo，同时免去购买主机/服务器的成本和维护带来的麻烦，Repository的clone url格式定义为<code>mail://your@email.com:repo_name</code>。</p>\n<h2 id=\"u8C03_u7528\"><a href=\"#u8C03_u7528\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>使用git命令clone, 现在什么都没实现，所以理所当然的报错：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone mail://akfish@gmail.com:foo&#10;fatal: Unable to find remote helper for &#39;mail&#39;</span><br></pre></td></tr></table></figure></p>\n<p>根据文档的描述：</p>\n<blockquote>\n<p>When git encounters a URL of the form &lt;transport&gt;://&lt;address&gt;, where &lt;transport&gt; is a protocol that it cannot handle natively, it automatically invokes git remote-&lt;transport&gt; with the full URL as the second argument. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote.</p>\n</blockquote>\n<p>即git会把url中<code>mail://</code>映射到调用命令<code>git-remote-mail</code>，所以只需要用任何开发语言实现一个标准输入输出的命令行程序，满足文档中定义的命令格式，放在git能搜寻到的位置，就能让git支持私有协议（注意python在windows下存在stdout无法被重定向的问题，无法和git正确通信）。本例中用C#实现，创建控制台程序git-remote-mail：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">git_remote_mail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span><br><span class=\"line\">        </span>&#123;</span><br><span class=\"line\">            Logger logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">\"git-remote-mail.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"args: \"</span> + String.Join(<span class=\"string\">\", \"</span>, args));</span><br><span class=\"line\"></span><br><span class=\"line\">            logger.Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次执行clone，错误提示消失，由于这个脚本什么事情也没做，所以当然也就什么都不会发生。stdin和stdout被用于与git通信，不会显示出来。如果需要输出消息，write到stderr，或者产生一个日志文件来记录，Logger类实现了相应的功能，具体代码见<a href=\"https://github.com/akfish/git-mail/blob/master/git-remote-mail/Logger.cs\" target=\"_blank\" rel=\"external\">Logger.cs</a>。执行clone命令后，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2013/10/20 22:07:02]Open log file git-remote-mail.txt&#10;[2013/10/20 22:07:02]args: origin, mail://akfish@gmail.com:foo&#10;[2013/10/20 22:07:02]Close log file</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，在调用的时候，还传入了两个参数：origin和mail://akfish@gmail.com:foo，根据文档：</p>\n<blockquote>\n<p>Remote helper programs are invoked with one or (optionally) two arguments. The first argument specifies a remote repository as in git; it is either the name of a configured remote or a URL. The second argument specifies a URL; it is usually of the form &lt;transport&gt;://&lt;address&gt;, but any arbitrary string is possible.</p>\n</blockquote>\n<p>参数的数量为1~2个，第一个参数为repo的名字或者url，第二个参数如果存在，为repo的url。</p>\n<h2 id=\"u547D_u4EE4_u6D41\"><a href=\"#u547D_u4EE4_u6D41\" class=\"headerlink\" title=\"命令流\"></a>命令流</h2><p>Git通过stdin向remote helper发送命令，一行一个，第一个命令总是<em>capabilities</em>。Remote helper需要通过stdout返回支持的capabilities，每行一个，以空行结束。Capabilities代表helper支持哪些命令子集，如fetch需要支持<em>connect, fetch, import</em>，详细的列表在文档里有列出。</p>\n<p>命令流通常以空行结束，但在某些情况下空行后会跟着其它协议的payload（如pack），具体参见command的具体说明。要注意的是命令流用的是linux-style line ending，即以<em>\\n</em>结尾，如果使用<em>Console.WriteLine</em>产生的是DOS line ending（<em>\\r\\n</em>），则不能正确工作。<em>\n</em></p>\n<p>增加代码响应capabilities命令：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//.... </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    Logger logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">\"git-remote-mail.txt\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.Log(<span class=\"string\">\"args: \"</span> + String.Join(<span class=\"string\">\", \"</span>, args));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> line;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exitCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        line = Console.ReadLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.Log(<span class=\"string\">\"&amp;gt;&amp;gt;\"</span> + line);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(line))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"Command stream terminated\"</span>);</span><br><span class=\"line\">            exitCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (line.StartsWith(<span class=\"string\">\"capabilities\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"connect\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"fetch\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"import\\n\"</span>);</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"&amp;lt;&amp;lt;connect, fetch, import\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log(<span class=\"string\">\"Unhandled command. Exit\"</span>);</span><br><span class=\"line\">            exitCode = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.Dispose();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exitCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2013/10/20 22:28:53]Open log file git-remote-mail.txt&#10;[2013/10/20 22:28:53]args: origin, mail://akfish@gmail.com:foo&#10;[2013/10/20 22:28:53]&#38;gt;&#38;gt;capabilities&#10;[2013/10/20 22:28:53]&#38;lt;&#38;lt;connect, fetch, import&#10;[2013/10/20 22:28:53]&#38;gt;&#38;gt;connect git-upload-pack&#10;[2013/10/20 22:28:53]Unhandled command. Exit&#10;[2013/10/20 22:28:53]Close log file</span><br></pre></td></tr></table></figure>\n<p>表明命令流已经成功初始化，git继续发出connect命令开始clone的工作。</p>\n<p>接口部分就这么简单，接下来的工作就是根据文档的描述，响应具体的命令，完成协议的具体设计。</p>\n<h2 id=\"u66F4_u591A_u53C2_u8003_u8D44_u6599\"><a href=\"#u66F4_u591A_u53C2_u8003_u8D44_u6599\" class=\"headerlink\" title=\"更多参考资料\"></a>更多参考资料</h2><p>Git的repo中包含了大量文档，都是很好的参考资料</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/git/git&#10;$ cd git/Documentation&#10;$ grep -nRHI &#34;receive-pack&#34; *</span><br></pre></td></tr></table></figure>\n<p>会给出这些文档：</p>\n<ul>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/http-protocol.txt\" target=\"_blank\" rel=\"external\">http-protocol</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-heuristics.txt\" target=\"_blank\" rel=\"external\">pack-heuristics</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt\" target=\"_blank\" rel=\"external\">pack-protocol</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/protocol-capabilities.txt\" target=\"_blank\" rel=\"external\">protocol capabilities</a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/technical/send-pack-pipeline.txt\" target=\"_blank\" rel=\"external\"><code>send-pack</code> pipeline</a></li>\n</ul>\n<p>以下文档是相关的后端命令，作为补充：</p>\n<ul>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-http-backend.txt\" target=\"_blank\" rel=\"external\"><code>git-http-backend</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-receive-pack.txt\" target=\"_blank\" rel=\"external\"><code>git-receive-pack</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-remote-ext.txt\" target=\"_blank\" rel=\"external\"><code>git-remote-ext</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/git-send-pack.txt\" target=\"_blank\" rel=\"external\"><code>git-send-pack</code></a></li>\n<li><a href=\"https://github.com/git/git/blob/master/Documentation/gitremote-helpers.txt\" target=\"_blank\" rel=\"external\"><code>git-remote-helpers</code></a></li>\n</ul>\n<p>查看源代码中与传输协议相关的commit：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/git/git&#10;$ cd git&#10;$ git log -Stransfer</span><br></pre></td></tr></table></figure>\n<p>可以参见以下commits：</p>\n<ul>\n<li><a href=\"http://github.com/git/git/commit/4bc444eb64173f770c1d1dba2ed3db393c2a9b18\" target=\"_blank\" rel=\"external\">commit 4bc444</a> (Support FTP-over-SSL/TLS for regular FTP)</li>\n<li><a href=\"https://github.com/git/git/commit/daebaa78137d59693a808c1f0bdec0ecb40fc12e\" target=\"_blank\" rel=\"external\">commit daebaa</a> (upload/receive-pack: allow hiding ref hierarchies )</li>\n<li><a href=\"http://github.com/git/git/commit/745f7a8cacae55df3e00507344d8db2a31eb57e8\" target=\"_blank\" rel=\"external\">commit 745f7a</a> (fetch-pack: move core code to libgit.a)</li>\n<li><a href=\"http://github.com/git/git/commit/fe0435011cfc5f0c15bbd4548ce0015f5b8ad430\" target=\"_blank\" rel=\"external\">commit fe0435</a> (Add persistent-https to contrib)<br>&nbsp;</li>\n</ul>\n","date":"2013-10-19T10:47:12.000Z","path":"2013/10/19/git-custom-transfer-protocol-1/","isDark":true,"featureColor":"#254277","featureImage":"/image/stock/3.jpg","excerpt":"","featureSwatch":{"Vibrant":{"color":"#254277","isDark":true,"contrast":13.119400726558645},"Muted":{"color":"#526c95","isDark":true,"contrast":5.699027819875463},"DarkVibrant":{"color":"#113a74","isDark":true,"contrast":13.761948622251554},"DarkMuted":{"color":"#425c7b","isDark":true,"contrast":11.860230374565882},"LightVibrant":{"color":"#f4f7fc","isDark":false,"contrast":1.0738073817947642},"LightMuted":{"color":"#8e9db6","isDark":false,"contrast":2.745663409490839}},"permalink":"http://catx.me/2013/10/19/git-custom-transfer-protocol-1/","json":"data/posts/2013/10/19/git-custom-transfer-protocol-1.json","tags":[{"name":"git","slug":"git","path":"tags/git/","permalink":"http://catx.me/tags/git/","postCount":2},{"name":"gmail","slug":"gmail","path":"tags/gmail/","permalink":"http://catx.me/tags/gmail/","postCount":1},{"name":"python","slug":"python","path":"tags/python/","permalink":"http://catx.me/tags/python/","postCount":1}],"categories":[{"name":"挨踢","slug":"挨踢","path":"categories/挨踢/","permalink":"http://catx.me/categories/挨踢/","postCount":17}]},"sha1":"38af0e954168117919825e9fb8821b50bdeb9a29","isDigest":true}],"sha1":"d7bd7eb53b3889a0dee99bd6bd749c8fa5f60cfc"}